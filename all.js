!function (e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function (e) { if (!e.document)
        throw new Error("jQuery requires a window with a document"); return t(e); } : t(e);
}("undefined" != typeof window ? window : this, function (C, e) {
    "use strict";
    var t = [], E = C.document, r = Object.getPrototypeOf, s = t.slice, g = t.concat, u = t.push, i = t.indexOf, n = {}, o = n.toString, v = n.hasOwnProperty, a = v.toString, l = a.call(Object), y = {}, m = function (e) { return "function" == typeof e && "number" != typeof e.nodeType; }, x = function (e) { return null != e && e === e.window; }, c = { type: !0, src: !0, nonce: !0, noModule: !0 };
    function b(e, t, n) { var r, i, o = (n = n || E).createElement("script"); if (o.text = e, t)
        for (r in c)
            (i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i); n.head.appendChild(o).parentNode.removeChild(o); }
    function w(e) { return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? n[o.call(e)] || "object" : typeof e; }
    var f = "3.4.1", k = function (e, t) { return new k.fn.init(e, t); }, p = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    function d(e) { var t = !!e && "length" in e && e.length, n = w(e); return !m(e) && !x(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e); }
    k.fn = k.prototype = { jquery: f, constructor: k, length: 0, toArray: function () { return s.call(this); }, get: function (e) { return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e]; }, pushStack: function (e) { var t = k.merge(this.constructor(), e); return t.prevObject = this, t; }, each: function (e) { return k.each(this, e); }, map: function (n) { return this.pushStack(k.map(this, function (e, t) { return n.call(e, t, e); })); }, slice: function () { return this.pushStack(s.apply(this, arguments)); }, first: function () { return this.eq(0); }, last: function () { return this.eq(-1); }, eq: function (e) { var t = this.length, n = +e + (e < 0 ? t : 0); return this.pushStack(0 <= n && n < t ? [this[n]] : []); }, end: function () { return this.prevObject || this.constructor(); }, push: u, sort: t.sort, splice: t.splice }, k.extend = k.fn.extend = function () { var e, t, n, r, i, o, a = arguments[0] || {}, s = 1, u = arguments.length, l = !1; for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || m(a) || (a = {}), s === u && (a = this, s--); s < u; s++)
        if (null != (e = arguments[s]))
            for (t in e)
                r = e[t], "__proto__" !== t && a !== r && (l && r && (k.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], o = i && !Array.isArray(n) ? [] : i || k.isPlainObject(n) ? n : {}, i = !1, a[t] = k.extend(l, o, r)) : void 0 !== r && (a[t] = r)); return a; }, k.extend({ expando: "jQuery" + (f + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (e) { throw new Error(e); }, noop: function () { }, isPlainObject: function (e) { var t, n; return !(!e || "[object Object]" !== o.call(e)) && (!(t = r(e)) || "function" == typeof (n = v.call(t, "constructor") && t.constructor) && a.call(n) === l); }, isEmptyObject: function (e) { var t; for (t in e)
            return !1; return !0; }, globalEval: function (e, t) { b(e, { nonce: t && t.nonce }); }, each: function (e, t) { var n, r = 0; if (d(e)) {
            for (n = e.length; r < n; r++)
                if (!1 === t.call(e[r], r, e[r]))
                    break;
        }
        else
            for (r in e)
                if (!1 === t.call(e[r], r, e[r]))
                    break; return e; }, trim: function (e) { return null == e ? "" : (e + "").replace(p, ""); }, makeArray: function (e, t) { var n = t || []; return null != e && (d(Object(e)) ? k.merge(n, "string" == typeof e ? [e] : e) : u.call(n, e)), n; }, inArray: function (e, t, n) { return null == t ? -1 : i.call(t, e, n); }, merge: function (e, t) { for (var n = +t.length, r = 0, i = e.length; r < n; r++)
            e[i++] = t[r]; return e.length = i, e; }, grep: function (e, t, n) { for (var r = [], i = 0, o = e.length, a = !n; i < o; i++)
            !t(e[i], i) !== a && r.push(e[i]); return r; }, map: function (e, t, n) { var r, i, o = 0, a = []; if (d(e))
            for (r = e.length; o < r; o++)
                null != (i = t(e[o], o, n)) && a.push(i);
        else
            for (o in e)
                null != (i = t(e[o], o, n)) && a.push(i); return g.apply([], a); }, guid: 1, support: y }), "function" == typeof Symbol && (k.fn[Symbol.iterator] = t[Symbol.iterator]), k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) { n["[object " + t + "]"] = t.toLowerCase(); });
    var h = function (n) { var e, d, b, o, i, h, f, g, w, u, l, T, C, a, E, v, s, c, y, k = "sizzle" + 1 * new Date, m = n.document, S = 0, r = 0, p = ue(), x = ue(), N = ue(), A = ue(), D = function (e, t) { return e === t && (l = !0), 0; }, j = {}.hasOwnProperty, t = [], q = t.pop, L = t.push, H = t.push, O = t.slice, P = function (e, t) { for (var n = 0, r = e.length; n < r; n++)
        if (e[n] === t)
            return n; return -1; }, R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", I = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+", W = "\\[" + M + "*(" + I + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + I + "))|)" + M + "*\\]", $ = ":(" + I + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + W + ")*)|.*)\\)|)", F = new RegExp(M + "+", "g"), B = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), _ = new RegExp("^" + M + "*," + M + "*"), z = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = new RegExp(M + "|>"), X = new RegExp($), V = new RegExp("^" + I + "$"), G = { ID: new RegExp("^#(" + I + ")"), CLASS: new RegExp("^\\.(" + I + ")"), TAG: new RegExp("^(" + I + "|[*])"), ATTR: new RegExp("^" + W), PSEUDO: new RegExp("^" + $), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"), bool: new RegExp("^(?:" + R + ")$", "i"), needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i") }, Y = /HTML$/i, Q = /^(?:input|select|textarea|button)$/i, J = /^h\d$/i, K = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ee = /[+~]/, te = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"), ne = function (e, t, n) { var r = "0x" + t - 65536; return r != r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320); }, re = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, ie = function (e, t) { return t ? "\0" === e ? "\ufffd" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e; }, oe = function () { T(); }, ae = be(function (e) { return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase(); }, { dir: "parentNode", next: "legend" }); try {
        H.apply(t = O.call(m.childNodes), m.childNodes), t[m.childNodes.length].nodeType;
    }
    catch (e) {
        H = { apply: t.length ? function (e, t) { L.apply(e, O.call(t)); } : function (e, t) { var n = e.length, r = 0; while (e[n++] = t[r++])
                ; e.length = n - 1; } };
    } function se(t, e, n, r) { var i, o, a, s, u, l, c, f = e && e.ownerDocument, p = e ? e.nodeType : 9; if (n = n || [], "string" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p)
        return n; if (!r && ((e ? e.ownerDocument || e : m) !== C && T(e), e = e || C, E)) {
        if (11 !== p && (u = Z.exec(t)))
            if (i = u[1]) {
                if (9 === p) {
                    if (!(a = e.getElementById(i)))
                        return n;
                    if (a.id === i)
                        return n.push(a), n;
                }
                else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i)
                    return n.push(a), n;
            }
            else {
                if (u[2])
                    return H.apply(n, e.getElementsByTagName(t)), n;
                if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName)
                    return H.apply(n, e.getElementsByClassName(i)), n;
            }
        if (d.qsa && !A[t + " "] && (!v || !v.test(t)) && (1 !== p || "object" !== e.nodeName.toLowerCase())) {
            if (c = t, f = e, 1 === p && U.test(t)) {
                (s = e.getAttribute("id")) ? s = s.replace(re, ie) : e.setAttribute("id", s = k), o = (l = h(t)).length;
                while (o--)
                    l[o] = "#" + s + " " + xe(l[o]);
                c = l.join(","), f = ee.test(t) && ye(e.parentNode) || e;
            }
            try {
                return H.apply(n, f.querySelectorAll(c)), n;
            }
            catch (e) {
                A(t, !0);
            }
            finally {
                s === k && e.removeAttribute("id");
            }
        }
    } return g(t.replace(B, "$1"), e, n, r); } function ue() { var r = []; return function e(t, n) { return r.push(t + " ") > b.cacheLength && delete e[r.shift()], e[t + " "] = n; }; } function le(e) { return e[k] = !0, e; } function ce(e) { var t = C.createElement("fieldset"); try {
        return !!e(t);
    }
    catch (e) {
        return !1;
    }
    finally {
        t.parentNode && t.parentNode.removeChild(t), t = null;
    } } function fe(e, t) { var n = e.split("|"), r = n.length; while (r--)
        b.attrHandle[n[r]] = t; } function pe(e, t) { var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex; if (r)
        return r; if (n)
        while (n = n.nextSibling)
            if (n === t)
                return -1; return e ? 1 : -1; } function de(t) { return function (e) { return "input" === e.nodeName.toLowerCase() && e.type === t; }; } function he(n) { return function (e) { var t = e.nodeName.toLowerCase(); return ("input" === t || "button" === t) && e.type === n; }; } function ge(t) { return function (e) { return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : "label" in e && e.disabled === t; }; } function ve(a) { return le(function (o) { return o = +o, le(function (e, t) { var n, r = a([], e.length, o), i = r.length; while (i--)
        e[n = r[i]] && (e[n] = !(t[n] = e[n])); }); }); } function ye(e) { return e && "undefined" != typeof e.getElementsByTagName && e; } for (e in d = se.support = {}, i = se.isXML = function (e) { var t = e.namespaceURI, n = (e.ownerDocument || e).documentElement; return !Y.test(t || n && n.nodeName || "HTML"); }, T = se.setDocument = function (e) { var t, n, r = e ? e.ownerDocument || e : m; return r !== C && 9 === r.nodeType && r.documentElement && (a = (C = r).documentElement, E = !i(C), m !== C && (n = C.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", oe, !1) : n.attachEvent && n.attachEvent("onunload", oe)), d.attributes = ce(function (e) { return e.className = "i", !e.getAttribute("className"); }), d.getElementsByTagName = ce(function (e) { return e.appendChild(C.createComment("")), !e.getElementsByTagName("*").length; }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function (e) { return a.appendChild(e).id = k, !C.getElementsByName || !C.getElementsByName(k).length; }), d.getById ? (b.filter.ID = function (e) { var t = e.replace(te, ne); return function (e) { return e.getAttribute("id") === t; }; }, b.find.ID = function (e, t) { if ("undefined" != typeof t.getElementById && E) {
        var n = t.getElementById(e);
        return n ? [n] : [];
    } }) : (b.filter.ID = function (e) { var n = e.replace(te, ne); return function (e) { var t = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id"); return t && t.value === n; }; }, b.find.ID = function (e, t) { if ("undefined" != typeof t.getElementById && E) {
        var n, r, i, o = t.getElementById(e);
        if (o) {
            if ((n = o.getAttributeNode("id")) && n.value === e)
                return [o];
            i = t.getElementsByName(e), r = 0;
            while (o = i[r++])
                if ((n = o.getAttributeNode("id")) && n.value === e)
                    return [o];
        }
        return [];
    } }), b.find.TAG = d.getElementsByTagName ? function (e, t) { return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0; } : function (e, t) { var n, r = [], i = 0, o = t.getElementsByTagName(e); if ("*" === e) {
        while (n = o[i++])
            1 === n.nodeType && r.push(n);
        return r;
    } return o; }, b.find.CLASS = d.getElementsByClassName && function (e, t) { if ("undefined" != typeof t.getElementsByClassName && E)
        return t.getElementsByClassName(e); }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function (e) { a.appendChild(e).innerHTML = "<a id='" + k + "'></a><select id='" + k + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && v.push("[*^$]=" + M + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || v.push("\\[" + M + "*(?:value|" + R + ")"), e.querySelectorAll("[id~=" + k + "-]").length || v.push("~="), e.querySelectorAll(":checked").length || v.push(":checked"), e.querySelectorAll("a#" + k + "+*").length || v.push(".#.+[+~]"); }), ce(function (e) { e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>"; var t = C.createElement("input"); t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && v.push("name" + M + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled").length && v.push(":enabled", ":disabled"), a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && v.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), v.push(",.*:"); })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function (e) { d.disconnectedMatch = c.call(e, "*"), c.call(e, "[s!='']:x"), s.push("!=", $); }), v = v.length && new RegExp(v.join("|")), s = s.length && new RegExp(s.join("|")), t = K.test(a.compareDocumentPosition), y = t || K.test(a.contains) ? function (e, t) { var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode; return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r))); } : function (e, t) { if (t)
        while (t = t.parentNode)
            if (t === e)
                return !0; return !1; }, D = t ? function (e, t) { if (e === t)
        return l = !0, 0; var n = !e.compareDocumentPosition - !t.compareDocumentPosition; return n || (1 & (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e === C || e.ownerDocument === m && y(m, e) ? -1 : t === C || t.ownerDocument === m && y(m, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1); } : function (e, t) { if (e === t)
        return l = !0, 0; var n, r = 0, i = e.parentNode, o = t.parentNode, a = [e], s = [t]; if (!i || !o)
        return e === C ? -1 : t === C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0; if (i === o)
        return pe(e, t); n = e; while (n = n.parentNode)
        a.unshift(n); n = t; while (n = n.parentNode)
        s.unshift(n); while (a[r] === s[r])
        r++; return r ? pe(a[r], s[r]) : a[r] === m ? -1 : s[r] === m ? 1 : 0; }), C; }, se.matches = function (e, t) { return se(e, null, null, t); }, se.matchesSelector = function (e, t) { if ((e.ownerDocument || e) !== C && T(e), d.matchesSelector && E && !A[t + " "] && (!s || !s.test(t)) && (!v || !v.test(t)))
        try {
            var n = c.call(e, t);
            if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType)
                return n;
        }
        catch (e) {
            A(t, !0);
        } return 0 < se(t, C, null, [e]).length; }, se.contains = function (e, t) { return (e.ownerDocument || e) !== C && T(e), y(e, t); }, se.attr = function (e, t) { (e.ownerDocument || e) !== C && T(e); var n = b.attrHandle[t.toLowerCase()], r = n && j.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0; return void 0 !== r ? r : d.attributes || !E ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null; }, se.escape = function (e) { return (e + "").replace(re, ie); }, se.error = function (e) { throw new Error("Syntax error, unrecognized expression: " + e); }, se.uniqueSort = function (e) { var t, n = [], r = 0, i = 0; if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(D), l) {
        while (t = e[i++])
            t === e[i] && (r = n.push(i));
        while (r--)
            e.splice(n[r], 1);
    } return u = null, e; }, o = se.getText = function (e) { var t, n = "", r = 0, i = e.nodeType; if (i) {
        if (1 === i || 9 === i || 11 === i) {
            if ("string" == typeof e.textContent)
                return e.textContent;
            for (e = e.firstChild; e; e = e.nextSibling)
                n += o(e);
        }
        else if (3 === i || 4 === i)
            return e.nodeValue;
    }
    else
        while (t = e[r++])
            n += o(t); return n; }, (b = se.selectors = { cacheLength: 50, createPseudo: le, match: G, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (e) { return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || "").replace(te, ne), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4); }, CHILD: function (e) { return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]), e; }, PSEUDO: function (e) { var t, n = !e[6] && e[2]; return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3)); } }, filter: { TAG: function (e) { var t = e.replace(te, ne).toLowerCase(); return "*" === e ? function () { return !0; } : function (e) { return e.nodeName && e.nodeName.toLowerCase() === t; }; }, CLASS: function (e) { var t = p[e + " "]; return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && p(e, function (e) { return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || ""); }); }, ATTR: function (n, r, i) { return function (e) { var t = se.attr(e, n); return null == t ? "!=" === r : !r || (t += "", "=" === r ? t === i : "!=" === r ? t !== i : "^=" === r ? i && 0 === t.indexOf(i) : "*=" === r ? i && -1 < t.indexOf(i) : "$=" === r ? i && t.slice(-i.length) === i : "~=" === r ? -1 < (" " + t.replace(F, " ") + " ").indexOf(i) : "|=" === r && (t === i || t.slice(0, i.length + 1) === i + "-")); }; }, CHILD: function (h, e, t, g, v) { var y = "nth" !== h.slice(0, 3), m = "last" !== h.slice(-4), x = "of-type" === e; return 1 === g && 0 === v ? function (e) { return !!e.parentNode; } : function (e, t, n) { var r, i, o, a, s, u, l = y !== m ? "nextSibling" : "previousSibling", c = e.parentNode, f = x && e.nodeName.toLowerCase(), p = !n && !x, d = !1; if (c) {
                if (y) {
                    while (l) {
                        a = e;
                        while (a = a[l])
                            if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType)
                                return !1;
                        u = l = "only" === h && !u && "nextSibling";
                    }
                    return !0;
                }
                if (u = [m ? c.firstChild : c.lastChild], m && p) {
                    d = (s = (r = (i = (o = (a = c)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]) && r[2], a = s && c.childNodes[s];
                    while (a = ++s && a && a[l] || (d = s = 0) || u.pop())
                        if (1 === a.nodeType && ++d && a === e) {
                            i[h] = [S, s, d];
                            break;
                        }
                }
                else if (p && (d = s = (r = (i = (o = (a = e)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]), !1 === d)
                    while (a = ++s && a && a[l] || (d = s = 0) || u.pop())
                        if ((x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) && ++d && (p && ((i = (o = a[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [S, d]), a === e))
                            break;
                return (d -= v) === g || d % g == 0 && 0 <= d / g;
            } }; }, PSEUDO: function (e, o) { var t, a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e); return a[k] ? a(o) : 1 < a.length ? (t = [e, e, "", o], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function (e, t) { var n, r = a(e, o), i = r.length; while (i--)
                e[n = P(e, r[i])] = !(t[n] = r[i]); }) : function (e) { return a(e, 0, t); }) : a; } }, pseudos: { not: le(function (e) { var r = [], i = [], s = f(e.replace(B, "$1")); return s[k] ? le(function (e, t, n, r) { var i, o = s(e, null, r, []), a = e.length; while (a--)
                (i = o[a]) && (e[a] = !(t[a] = i)); }) : function (e, t, n) { return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop(); }; }), has: le(function (t) { return function (e) { return 0 < se(t, e).length; }; }), contains: le(function (t) { return t = t.replace(te, ne), function (e) { return -1 < (e.textContent || o(e)).indexOf(t); }; }), lang: le(function (n) { return V.test(n || "") || se.error("unsupported lang: " + n), n = n.replace(te, ne).toLowerCase(), function (e) { var t; do {
                if (t = E ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang"))
                    return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-");
            } while ((e = e.parentNode) && 1 === e.nodeType); return !1; }; }), target: function (e) { var t = n.location && n.location.hash; return t && t.slice(1) === e.id; }, root: function (e) { return e === a; }, focus: function (e) { return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex); }, enabled: ge(!1), disabled: ge(!0), checked: function (e) { var t = e.nodeName.toLowerCase(); return "input" === t && !!e.checked || "option" === t && !!e.selected; }, selected: function (e) { return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected; }, empty: function (e) { for (e = e.firstChild; e; e = e.nextSibling)
                if (e.nodeType < 6)
                    return !1; return !0; }, parent: function (e) { return !b.pseudos.empty(e); }, header: function (e) { return J.test(e.nodeName); }, input: function (e) { return Q.test(e.nodeName); }, button: function (e) { var t = e.nodeName.toLowerCase(); return "input" === t && "button" === e.type || "button" === t; }, text: function (e) { var t; return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase()); }, first: ve(function () { return [0]; }), last: ve(function (e, t) { return [t - 1]; }), eq: ve(function (e, t, n) { return [n < 0 ? n + t : n]; }), even: ve(function (e, t) { for (var n = 0; n < t; n += 2)
                e.push(n); return e; }), odd: ve(function (e, t) { for (var n = 1; n < t; n += 2)
                e.push(n); return e; }), lt: ve(function (e, t, n) { for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r;)
                e.push(r); return e; }), gt: ve(function (e, t, n) { for (var r = n < 0 ? n + t : n; ++r < t;)
                e.push(r); return e; }) } }).pseudos.nth = b.pseudos.eq, { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 })
        b.pseudos[e] = de(e); for (e in { submit: !0, reset: !0 })
        b.pseudos[e] = he(e); function me() { } function xe(e) { for (var t = 0, n = e.length, r = ""; t < n; t++)
        r += e[t].value; return r; } function be(s, e, t) { var u = e.dir, l = e.next, c = l || u, f = t && "parentNode" === c, p = r++; return e.first ? function (e, t, n) { while (e = e[u])
        if (1 === e.nodeType || f)
            return s(e, t, n); return !1; } : function (e, t, n) { var r, i, o, a = [S, p]; if (n) {
        while (e = e[u])
            if ((1 === e.nodeType || f) && s(e, t, n))
                return !0;
    }
    else
        while (e = e[u])
            if (1 === e.nodeType || f)
                if (i = (o = e[k] || (e[k] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), l && l === e.nodeName.toLowerCase())
                    e = e[u] || e;
                else {
                    if ((r = i[c]) && r[0] === S && r[1] === p)
                        return a[2] = r[2];
                    if ((i[c] = a)[2] = s(e, t, n))
                        return !0;
                } return !1; }; } function we(i) { return 1 < i.length ? function (e, t, n) { var r = i.length; while (r--)
        if (!i[r](e, t, n))
            return !1; return !0; } : i[0]; } function Te(e, t, n, r, i) { for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++)
        (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s))); return a; } function Ce(d, h, g, v, y, e) { return v && !v[k] && (v = Ce(v)), y && !y[k] && (y = Ce(y, e)), le(function (e, t, n, r) { var i, o, a, s = [], u = [], l = t.length, c = e || function (e, t, n) { for (var r = 0, i = t.length; r < i; r++)
        se(e, t[r], n); return n; }(h || "*", n.nodeType ? [n] : n, []), f = !d || !e && h ? c : Te(c, s, d, n, r), p = g ? y || (e ? d : l || v) ? [] : t : f; if (g && g(f, p, n, r), v) {
        i = Te(p, u), v(i, [], n, r), o = i.length;
        while (o--)
            (a = i[o]) && (p[u[o]] = !(f[u[o]] = a));
    } if (e) {
        if (y || d) {
            if (y) {
                i = [], o = p.length;
                while (o--)
                    (a = p[o]) && i.push(f[o] = a);
                y(null, p = [], i, r);
            }
            o = p.length;
            while (o--)
                (a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a));
        }
    }
    else
        p = Te(p === t ? p.splice(l, p.length) : p), y ? y(null, t, p, r) : H.apply(t, p); }); } function Ee(e) { for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[" "], s = o ? 1 : 0, u = be(function (e) { return e === i; }, a, !0), l = be(function (e) { return -1 < P(i, e); }, a, !0), c = [function (e, t, n) { var r = !o && (n || t !== w) || ((i = t).nodeType ? u(e, t, n) : l(e, t, n)); return i = null, r; }]; s < r; s++)
        if (t = b.relative[e[s].type])
            c = [be(we(c), t)];
        else {
            if ((t = b.filter[e[s].type].apply(null, e[s].matches))[k]) {
                for (n = ++s; n < r; n++)
                    if (b.relative[e[n].type])
                        break;
                return Ce(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1).concat({ value: " " === e[s - 2].type ? "*" : "" })).replace(B, "$1"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e));
            }
            c.push(t);
        } return we(c); } return me.prototype = b.filters = b.pseudos, b.setFilters = new me, h = se.tokenize = function (e, t) { var n, r, i, o, a, s, u, l = x[e + " "]; if (l)
        return t ? 0 : l.slice(0); a = e, s = [], u = b.preFilter; while (a) {
        for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), s.push(i = [])), n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({ value: n, type: r[0].replace(B, " ") }), a = a.slice(n.length)), b.filter)
            !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), i.push({ value: n, type: o, matches: r }), a = a.slice(n.length));
        if (!n)
            break;
    } return t ? a.length : a ? se.error(e) : x(e, s).slice(0); }, f = se.compile = function (e, t) { var n, v, y, m, x, r, i = [], o = [], a = N[e + " "]; if (!a) {
        t || (t = h(e)), n = t.length;
        while (n--)
            (a = Ee(t[n]))[k] ? i.push(a) : o.push(a);
        (a = N(e, (v = o, m = 0 < (y = i).length, x = 0 < v.length, r = function (e, t, n, r, i) { var o, a, s, u = 0, l = "0", c = e && [], f = [], p = w, d = e || x && b.find.TAG("*", i), h = S += null == p ? 1 : Math.random() || .1, g = d.length; for (i && (w = t === C || t || i); l !== g && null != (o = d[l]); l++) {
            if (x && o) {
                a = 0, t || o.ownerDocument === C || (T(o), n = !E);
                while (s = v[a++])
                    if (s(o, t || C, n)) {
                        r.push(o);
                        break;
                    }
                i && (S = h);
            }
            m && ((o = !s && o) && u--, e && c.push(o));
        } if (u += l, m && l !== u) {
            a = 0;
            while (s = y[a++])
                s(c, f, t, n);
            if (e) {
                if (0 < u)
                    while (l--)
                        c[l] || f[l] || (f[l] = q.call(r));
                f = Te(f);
            }
            H.apply(r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(r);
        } return i && (S = h, w = p), c; }, m ? le(r) : r))).selector = e;
    } return a; }, g = se.select = function (e, t, n, r) { var i, o, a, s, u, l = "function" == typeof e && e, c = !r && h(e = l.selector || e); if (n = n || [], 1 === c.length) {
        if (2 < (o = c[0] = c[0].slice(0)).length && "ID" === (a = o[0]).type && 9 === t.nodeType && E && b.relative[o[1].type]) {
            if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0]))
                return n;
            l && (t = t.parentNode), e = e.slice(o.shift().value.length);
        }
        i = G.needsContext.test(e) ? 0 : o.length;
        while (i--) {
            if (a = o[i], b.relative[s = a.type])
                break;
            if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {
                if (o.splice(i, 1), !(e = r.length && xe(o)))
                    return H.apply(n, r), n;
                break;
            }
        }
    } return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), n; }, d.sortStable = k.split("").sort(D).join("") === k, d.detectDuplicates = !!l, T(), d.sortDetached = ce(function (e) { return 1 & e.compareDocumentPosition(C.createElement("fieldset")); }), ce(function (e) { return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href"); }) || fe("type|href|height|width", function (e, t, n) { if (!n)
        return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2); }), d.attributes && ce(function (e) { return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value"); }) || fe("value", function (e, t, n) { if (!n && "input" === e.nodeName.toLowerCase())
        return e.defaultValue; }), ce(function (e) { return null == e.getAttribute("disabled"); }) || fe(R, function (e, t, n) { var r; if (!n)
        return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null; }), se; }(C);
    k.find = h, k.expr = h.selectors, k.expr[":"] = k.expr.pseudos, k.uniqueSort = k.unique = h.uniqueSort, k.text = h.getText, k.isXMLDoc = h.isXML, k.contains = h.contains, k.escapeSelector = h.escape;
    var T = function (e, t, n) { var r = [], i = void 0 !== n; while ((e = e[t]) && 9 !== e.nodeType)
        if (1 === e.nodeType) {
            if (i && k(e).is(n))
                break;
            r.push(e);
        } return r; }, S = function (e, t) { for (var n = []; e; e = e.nextSibling)
        1 === e.nodeType && e !== t && n.push(e); return n; }, N = k.expr.match.needsContext;
    function A(e, t) { return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase(); }
    var D = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function j(e, n, r) { return m(n) ? k.grep(e, function (e, t) { return !!n.call(e, t, e) !== r; }) : n.nodeType ? k.grep(e, function (e) { return e === n !== r; }) : "string" != typeof n ? k.grep(e, function (e) { return -1 < i.call(n, e) !== r; }) : k.filter(n, e, r); }
    k.filter = function (e, t, n) { var r = t[0]; return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? k.find.matchesSelector(r, e) ? [r] : [] : k.find.matches(e, k.grep(t, function (e) { return 1 === e.nodeType; })); }, k.fn.extend({ find: function (e) { var t, n, r = this.length, i = this; if ("string" != typeof e)
            return this.pushStack(k(e).filter(function () { for (t = 0; t < r; t++)
                if (k.contains(i[t], this))
                    return !0; })); for (n = this.pushStack([]), t = 0; t < r; t++)
            k.find(e, i[t], n); return 1 < r ? k.uniqueSort(n) : n; }, filter: function (e) { return this.pushStack(j(this, e || [], !1)); }, not: function (e) { return this.pushStack(j(this, e || [], !0)); }, is: function (e) { return !!j(this, "string" == typeof e && N.test(e) ? k(e) : e || [], !1).length; } });
    var q, L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (k.fn.init = function (e, t, n) { var r, i; if (!e)
        return this; if (n = n || q, "string" == typeof e) {
        if (!(r = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : L.exec(e)) || !r[1] && t)
            return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
        if (r[1]) {
            if (t = t instanceof k ? t[0] : t, k.merge(this, k.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), D.test(r[1]) && k.isPlainObject(t))
                for (r in t)
                    m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
            return this;
        }
        return (i = E.getElementById(r[2])) && (this[0] = i, this.length = 1), this;
    } return e.nodeType ? (this[0] = e, this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(k) : k.makeArray(e, this); }).prototype = k.fn, q = k(E);
    var H = /^(?:parents|prev(?:Until|All))/, O = { children: !0, contents: !0, next: !0, prev: !0 };
    function P(e, t) { while ((e = e[t]) && 1 !== e.nodeType)
        ; return e; }
    k.fn.extend({ has: function (e) { var t = k(e, this), n = t.length; return this.filter(function () { for (var e = 0; e < n; e++)
            if (k.contains(this, t[e]))
                return !0; }); }, closest: function (e, t) { var n, r = 0, i = this.length, o = [], a = "string" != typeof e && k(e); if (!N.test(e))
            for (; r < i; r++)
                for (n = this[r]; n && n !== t; n = n.parentNode)
                    if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && k.find.matchesSelector(n, e))) {
                        o.push(n);
                        break;
                    } return this.pushStack(1 < o.length ? k.uniqueSort(o) : o); }, index: function (e) { return e ? "string" == typeof e ? i.call(k(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1; }, add: function (e, t) { return this.pushStack(k.uniqueSort(k.merge(this.get(), k(e, t)))); }, addBack: function (e) { return this.add(null == e ? this.prevObject : this.prevObject.filter(e)); } }), k.each({ parent: function (e) { var t = e.parentNode; return t && 11 !== t.nodeType ? t : null; }, parents: function (e) { return T(e, "parentNode"); }, parentsUntil: function (e, t, n) { return T(e, "parentNode", n); }, next: function (e) { return P(e, "nextSibling"); }, prev: function (e) { return P(e, "previousSibling"); }, nextAll: function (e) { return T(e, "nextSibling"); }, prevAll: function (e) { return T(e, "previousSibling"); }, nextUntil: function (e, t, n) { return T(e, "nextSibling", n); }, prevUntil: function (e, t, n) { return T(e, "previousSibling", n); }, siblings: function (e) { return S((e.parentNode || {}).firstChild, e); }, children: function (e) { return S(e.firstChild); }, contents: function (e) { return "undefined" != typeof e.contentDocument ? e.contentDocument : (A(e, "template") && (e = e.content || e), k.merge([], e.childNodes)); } }, function (r, i) { k.fn[r] = function (e, t) { var n = k.map(this, i, e); return "Until" !== r.slice(-5) && (t = e), t && "string" == typeof t && (n = k.filter(t, n)), 1 < this.length && (O[r] || k.uniqueSort(n), H.test(r) && n.reverse()), this.pushStack(n); }; });
    var R = /[^\x20\t\r\n\f]+/g;
    function M(e) { return e; }
    function I(e) { throw e; }
    function W(e, t, n, r) { var i; try {
        e && m(i = e.promise) ? i.call(e).done(t).fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));
    }
    catch (e) {
        n.apply(void 0, [e]);
    } }
    k.Callbacks = function (r) { var e, n; r = "string" == typeof r ? (e = r, n = {}, k.each(e.match(R) || [], function (e, t) { n[t] = !0; }), n) : k.extend({}, r); var i, t, o, a, s = [], u = [], l = -1, c = function () { for (a = a || r.once, o = i = !0; u.length; l = -1) {
        t = u.shift();
        while (++l < s.length)
            !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, t = !1);
    } r.memory || (t = !1), i = !1, a && (s = t ? [] : ""); }, f = { add: function () { return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) { k.each(e, function (e, t) { m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && "string" !== w(t) && n(t); }); }(arguments), t && !i && c()), this; }, remove: function () { return k.each(arguments, function (e, t) { var n; while (-1 < (n = k.inArray(t, s, n)))
            s.splice(n, 1), n <= l && l--; }), this; }, has: function (e) { return e ? -1 < k.inArray(e, s) : 0 < s.length; }, empty: function () { return s && (s = []), this; }, disable: function () { return a = u = [], s = t = "", this; }, disabled: function () { return !s; }, lock: function () { return a = u = [], t || i || (s = t = ""), this; }, locked: function () { return !!a; }, fireWith: function (e, t) { return a || (t = [e, (t = t || []).slice ? t.slice() : t], u.push(t), i || c()), this; }, fire: function () { return f.fireWith(this, arguments), this; }, fired: function () { return !!o; } }; return f; }, k.extend({ Deferred: function (e) { var o = [["notify", "progress", k.Callbacks("memory"), k.Callbacks("memory"), 2], ["resolve", "done", k.Callbacks("once memory"), k.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", k.Callbacks("once memory"), k.Callbacks("once memory"), 1, "rejected"]], i = "pending", a = { state: function () { return i; }, always: function () { return s.done(arguments).fail(arguments), this; }, "catch": function (e) { return a.then(null, e); }, pipe: function () { var i = arguments; return k.Deferred(function (r) { k.each(o, function (e, t) { var n = m(i[t[4]]) && i[t[4]]; s[t[1]](function () { var e = n && n.apply(this, arguments); e && m(e.promise) ? e.promise().progress(r.notify).done(r.resolve).fail(r.reject) : r[t[0] + "With"](this, n ? [e] : arguments); }); }), i = null; }).promise(); }, then: function (t, n, r) { var u = 0; function l(i, o, a, s) { return function () { var n = this, r = arguments, e = function () { var e, t; if (!(i < u)) {
                if ((e = a.apply(n, r)) === o.promise())
                    throw new TypeError("Thenable self-resolution");
                t = e && ("object" == typeof e || "function" == typeof e) && e.then, m(t) ? s ? t.call(e, l(u, o, M, s), l(u, o, I, s)) : (u++, t.call(e, l(u, o, M, s), l(u, o, I, s), l(u, o, M, o.notifyWith))) : (a !== M && (n = void 0, r = [e]), (s || o.resolveWith)(n, r));
            } }, t = s ? e : function () { try {
                e();
            }
            catch (e) {
                k.Deferred.exceptionHook && k.Deferred.exceptionHook(e, t.stackTrace), u <= i + 1 && (a !== I && (n = void 0, r = [e]), o.rejectWith(n, r));
            } }; i ? t() : (k.Deferred.getStackHook && (t.stackTrace = k.Deferred.getStackHook()), C.setTimeout(t)); }; } return k.Deferred(function (e) { o[0][3].add(l(0, e, m(r) ? r : M, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : M)), o[2][3].add(l(0, e, m(n) ? n : I)); }).promise(); }, promise: function (e) { return null != e ? k.extend(e, a) : a; } }, s = {}; return k.each(o, function (e, t) { var n = t[2], r = t[5]; a[t[1]] = n.add, r && n.add(function () { i = r; }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), n.add(t[3].fire), s[t[0]] = function () { return s[t[0] + "With"](this === s ? void 0 : this, arguments), this; }, s[t[0] + "With"] = n.fireWith; }), a.promise(s), e && e.call(s, s), s; }, when: function (e) { var n = arguments.length, t = n, r = Array(t), i = s.call(arguments), o = k.Deferred(), a = function (t) { return function (e) { r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, --n || o.resolveWith(r, i); }; }; if (n <= 1 && (W(e, o.done(a(t)).resolve, o.reject, !n), "pending" === o.state() || m(i[t] && i[t].then)))
            return o.then(); while (t--)
            W(i[t], a(t), o.reject); return o.promise(); } });
    var $ = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    k.Deferred.exceptionHook = function (e, t) { C.console && C.console.warn && e && $.test(e.name) && C.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t); }, k.readyException = function (e) { C.setTimeout(function () { throw e; }); };
    var F = k.Deferred();
    function B() { E.removeEventListener("DOMContentLoaded", B), C.removeEventListener("load", B), k.ready(); }
    k.fn.ready = function (e) { return F.then(e)["catch"](function (e) { k.readyException(e); }), this; }, k.extend({ isReady: !1, readyWait: 1, ready: function (e) { (!0 === e ? --k.readyWait : k.isReady) || (k.isReady = !0) !== e && 0 < --k.readyWait || F.resolveWith(E, [k]); } }), k.ready.then = F.then, "complete" === E.readyState || "loading" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(k.ready) : (E.addEventListener("DOMContentLoaded", B), C.addEventListener("load", B));
    var _ = function (e, t, n, r, i, o, a) { var s = 0, u = e.length, l = null == n; if ("object" === w(n))
        for (s in i = !0, n)
            _(e, t, s, n[s], !0, o, a);
    else if (void 0 !== r && (i = !0, m(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function (e, t, n) { return l.call(k(e), n); })), t))
        for (; s < u; s++)
            t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n))); return i ? e : l ? t.call(e) : u ? t(e[0], n) : o; }, z = /^-ms-/, U = /-([a-z])/g;
    function X(e, t) { return t.toUpperCase(); }
    function V(e) { return e.replace(z, "ms-").replace(U, X); }
    var G = function (e) { return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType; };
    function Y() { this.expando = k.expando + Y.uid++; }
    Y.uid = 1, Y.prototype = { cache: function (e) { var t = e[this.expando]; return t || (t = {}, G(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, { value: t, configurable: !0 }))), t; }, set: function (e, t, n) { var r, i = this.cache(e); if ("string" == typeof t)
            i[V(t)] = n;
        else
            for (r in t)
                i[V(r)] = t[r]; return i; }, get: function (e, t) { return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][V(t)]; }, access: function (e, t, n) { return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t); }, remove: function (e, t) { var n, r = e[this.expando]; if (void 0 !== r) {
            if (void 0 !== t) {
                n = (t = Array.isArray(t) ? t.map(V) : (t = V(t)) in r ? [t] : t.match(R) || []).length;
                while (n--)
                    delete r[t[n]];
            }
            (void 0 === t || k.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
        } }, hasData: function (e) { var t = e[this.expando]; return void 0 !== t && !k.isEmptyObject(t); } };
    var Q = new Y, J = new Y, K = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, Z = /[A-Z]/g;
    function ee(e, t, n) { var r, i; if (void 0 === n && 1 === e.nodeType)
        if (r = "data-" + t.replace(Z, "-$&").toLowerCase(), "string" == typeof (n = e.getAttribute(r))) {
            try {
                n = "true" === (i = n) || "false" !== i && ("null" === i ? null : i === +i + "" ? +i : K.test(i) ? JSON.parse(i) : i);
            }
            catch (e) { }
            J.set(e, t, n);
        }
        else
            n = void 0; return n; }
    k.extend({ hasData: function (e) { return J.hasData(e) || Q.hasData(e); }, data: function (e, t, n) { return J.access(e, t, n); }, removeData: function (e, t) { J.remove(e, t); }, _data: function (e, t, n) { return Q.access(e, t, n); }, _removeData: function (e, t) { Q.remove(e, t); } }), k.fn.extend({ data: function (n, e) { var t, r, i, o = this[0], a = o && o.attributes; if (void 0 === n) {
            if (this.length && (i = J.get(o), 1 === o.nodeType && !Q.get(o, "hasDataAttrs"))) {
                t = a.length;
                while (t--)
                    a[t] && 0 === (r = a[t].name).indexOf("data-") && (r = V(r.slice(5)), ee(o, r, i[r]));
                Q.set(o, "hasDataAttrs", !0);
            }
            return i;
        } return "object" == typeof n ? this.each(function () { J.set(this, n); }) : _(this, function (e) { var t; if (o && void 0 === e)
            return void 0 !== (t = J.get(o, n)) ? t : void 0 !== (t = ee(o, n)) ? t : void 0; this.each(function () { J.set(this, n, e); }); }, null, e, 1 < arguments.length, null, !0); }, removeData: function (e) { return this.each(function () { J.remove(this, e); }); } }), k.extend({ queue: function (e, t, n) { var r; if (e)
            return t = (t || "fx") + "queue", r = Q.get(e, t), n && (!r || Array.isArray(n) ? r = Q.access(e, t, k.makeArray(n)) : r.push(n)), r || []; }, dequeue: function (e, t) { t = t || "fx"; var n = k.queue(e, t), r = n.length, i = n.shift(), o = k._queueHooks(e, t); "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, function () { k.dequeue(e, t); }, o)), !r && o && o.empty.fire(); }, _queueHooks: function (e, t) { var n = t + "queueHooks"; return Q.get(e, n) || Q.access(e, n, { empty: k.Callbacks("once memory").add(function () { Q.remove(e, [t + "queue", n]); }) }); } }), k.fn.extend({ queue: function (t, n) { var e = 2; return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? k.queue(this[0], t) : void 0 === n ? this : this.each(function () { var e = k.queue(this, t, n); k._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && k.dequeue(this, t); }); }, dequeue: function (e) { return this.each(function () { k.dequeue(this, e); }); }, clearQueue: function (e) { return this.queue(e || "fx", []); }, promise: function (e, t) { var n, r = 1, i = k.Deferred(), o = this, a = this.length, s = function () { --r || i.resolveWith(o, [o]); }; "string" != typeof e && (t = e, e = void 0), e = e || "fx"; while (a--)
            (n = Q.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s)); return s(), i.promise(t); } });
    var te = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, ne = new RegExp("^(?:([+-])=|)(" + te + ")([a-z%]*)$", "i"), re = ["Top", "Right", "Bottom", "Left"], ie = E.documentElement, oe = function (e) { return k.contains(e.ownerDocument, e); }, ae = { composed: !0 };
    ie.getRootNode && (oe = function (e) { return k.contains(e.ownerDocument, e) || e.getRootNode(ae) === e.ownerDocument; });
    var se = function (e, t) { return "none" === (e = t || e).style.display || "" === e.style.display && oe(e) && "none" === k.css(e, "display"); }, ue = function (e, t, n, r) { var i, o, a = {}; for (o in t)
        a[o] = e.style[o], e.style[o] = t[o]; for (o in i = n.apply(e, r || []), t)
        e.style[o] = a[o]; return i; };
    function le(e, t, n, r) { var i, o, a = 20, s = r ? function () { return r.cur(); } : function () { return k.css(e, t, ""); }, u = s(), l = n && n[3] || (k.cssNumber[t] ? "" : "px"), c = e.nodeType && (k.cssNumber[t] || "px" !== l && +u) && ne.exec(k.css(e, t)); if (c && c[3] !== l) {
        u /= 2, l = l || c[3], c = +u || 1;
        while (a--)
            k.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
        c *= 2, k.style(e, t, c + l), n = n || [];
    } return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i; }
    var ce = {};
    function fe(e, t) { for (var n, r, i, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++)
        (r = e[c]).style && (n = r.style.display, t ? ("none" === n && (l[c] = Q.get(r, "display") || null, l[c] || (r.style.display = "")), "" === r.style.display && se(r) && (l[c] = (u = a = o = void 0, a = (i = r).ownerDocument, s = i.nodeName, (u = ce[s]) || (o = a.body.appendChild(a.createElement(s)), u = k.css(o, "display"), o.parentNode.removeChild(o), "none" === u && (u = "block"), ce[s] = u)))) : "none" !== n && (l[c] = "none", Q.set(r, "display", n))); for (c = 0; c < f; c++)
        null != l[c] && (e[c].style.display = l[c]); return e; }
    k.fn.extend({ show: function () { return fe(this, !0); }, hide: function () { return fe(this); }, toggle: function (e) { return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () { se(this) ? k(this).show() : k(this).hide(); }); } });
    var pe = /^(?:checkbox|radio)$/i, de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i, he = /^$|^module$|\/(?:java|ecma)script/i, ge = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };
    function ve(e, t) { var n; return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && A(e, t) ? k.merge([e], n) : n; }
    function ye(e, t) { for (var n = 0, r = e.length; n < r; n++)
        Q.set(e[n], "globalEval", !t || Q.get(t[n], "globalEval")); }
    ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;
    var me, xe, be = /<|&#?\w+;/;
    function we(e, t, n, r, i) { for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++)
        if ((o = e[d]) || 0 === o)
            if ("object" === w(o))
                k.merge(p, o.nodeType ? [o] : o);
            else if (be.test(o)) {
                a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + k.htmlPrefilter(o) + u[2], c = u[0];
                while (c--)
                    a = a.lastChild;
                k.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
            }
            else
                p.push(t.createTextNode(o)); f.textContent = "", d = 0; while (o = p[d++])
        if (r && -1 < k.inArray(o, r))
            i && i.push(o);
        else if (l = oe(o), a = ve(f.appendChild(o), "script"), l && ye(a), n) {
            c = 0;
            while (o = a[c++])
                he.test(o.type || "") && n.push(o);
        } return f; }
    me = E.createDocumentFragment().appendChild(E.createElement("div")), (xe = E.createElement("input")).setAttribute("type", "radio"), xe.setAttribute("checked", "checked"), xe.setAttribute("name", "t"), me.appendChild(xe), y.checkClone = me.cloneNode(!0).cloneNode(!0).lastChild.checked, me.innerHTML = "<textarea>x</textarea>", y.noCloneChecked = !!me.cloneNode(!0).lastChild.defaultValue;
    var Te = /^key/, Ce = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, Ee = /^([^.]*)(?:\.(.+)|)/;
    function ke() { return !0; }
    function Se() { return !1; }
    function Ne(e, t) { return e === function () { try {
        return E.activeElement;
    }
    catch (e) { } }() == ("focus" === t); }
    function Ae(e, t, n, r, i, o) { var a, s; if ("object" == typeof t) {
        for (s in "string" != typeof n && (r = r || n, n = void 0), t)
            Ae(e, s, n, r, t[s], o);
        return e;
    } if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i)
        i = Se;
    else if (!i)
        return e; return 1 === o && (a = i, (i = function (e) { return k().off(e), a.apply(this, arguments); }).guid = a.guid || (a.guid = k.guid++)), e.each(function () { k.event.add(this, t, i, r, n); }); }
    function De(e, i, o) { o ? (Q.set(e, i, !1), k.event.add(e, i, { namespace: !1, handler: function (e) { var t, n, r = Q.get(this, i); if (1 & e.isTrigger && this[i]) {
            if (r.length)
                (k.event.special[i] || {}).delegateType && e.stopPropagation();
            else if (r = s.call(arguments), Q.set(this, i, r), t = o(this, i), this[i](), r !== (n = Q.get(this, i)) || t ? Q.set(this, i, !1) : n = {}, r !== n)
                return e.stopImmediatePropagation(), e.preventDefault(), n.value;
        }
        else
            r.length && (Q.set(this, i, { value: k.event.trigger(k.extend(r[0], k.Event.prototype), r.slice(1), this) }), e.stopImmediatePropagation()); } })) : void 0 === Q.get(e, i) && k.event.add(e, i, ke); }
    k.event = { global: {}, add: function (t, e, n, r, i) { var o, a, s, u, l, c, f, p, d, h, g, v = Q.get(t); if (v) {
            n.handler && (n = (o = n).handler, i = o.selector), i && k.find.matchesSelector(ie, i), n.guid || (n.guid = k.guid++), (u = v.events) || (u = v.events = {}), (a = v.handle) || (a = v.handle = function (e) { return "undefined" != typeof k && k.event.triggered !== e.type ? k.event.dispatch.apply(t, arguments) : void 0; }), l = (e = (e || "").match(R) || [""]).length;
            while (l--)
                d = g = (s = Ee.exec(e[l]) || [])[1], h = (s[2] || "").split(".").sort(), d && (f = k.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = k.event.special[d] || {}, c = k.extend({ type: d, origType: g, data: r, handler: n, guid: n.guid, selector: i, needsContext: i && k.expr.match.needsContext.test(i), namespace: h.join(".") }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, h, a) || t.addEventListener && t.addEventListener(d, a)), f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), k.event.global[d] = !0);
        } }, remove: function (e, t, n, r, i) { var o, a, s, u, l, c, f, p, d, h, g, v = Q.hasData(e) && Q.get(e); if (v && (u = v.events)) {
            l = (t = (t || "").match(R) || [""]).length;
            while (l--)
                if (d = g = (s = Ee.exec(t[l]) || [])[1], h = (s[2] || "").split(".").sort(), d) {
                    f = k.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;
                    while (o--)
                        c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
                    a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || k.removeEvent(e, d, v.handle), delete u[d]);
                }
                else
                    for (d in u)
                        k.event.remove(e, d + t[l], n, r, !0);
            k.isEmptyObject(u) && Q.remove(e, "handle events");
        } }, dispatch: function (e) { var t, n, r, i, o, a, s = k.event.fix(e), u = new Array(arguments.length), l = (Q.get(this, "events") || {})[s.type] || [], c = k.event.special[s.type] || {}; for (u[0] = s, t = 1; t < arguments.length; t++)
            u[t] = arguments[t]; if (s.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, s)) {
            a = k.event.handlers.call(this, s, l), t = 0;
            while ((i = a[t++]) && !s.isPropagationStopped()) {
                s.currentTarget = i.elem, n = 0;
                while ((o = i.handlers[n++]) && !s.isImmediatePropagationStopped())
                    s.rnamespace && !1 !== o.namespace && !s.rnamespace.test(o.namespace) || (s.handleObj = o, s.data = o.data, void 0 !== (r = ((k.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, u)) && !1 === (s.result = r) && (s.preventDefault(), s.stopPropagation()));
            }
            return c.postDispatch && c.postDispatch.call(this, s), s.result;
        } }, handlers: function (e, t) { var n, r, i, o, a, s = [], u = t.delegateCount, l = e.target; if (u && l.nodeType && !("click" === e.type && 1 <= e.button))
            for (; l !== this; l = l.parentNode || this)
                if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                    for (o = [], a = {}, n = 0; n < u; n++)
                        void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? -1 < k(i, this).index(l) : k.find(i, this, null, [l]).length), a[i] && o.push(r);
                    o.length && s.push({ elem: l, handlers: o });
                } return l = this, u < t.length && s.push({ elem: l, handlers: t.slice(u) }), s; }, addProp: function (t, e) { Object.defineProperty(k.Event.prototype, t, { enumerable: !0, configurable: !0, get: m(e) ? function () { if (this.originalEvent)
                return e(this.originalEvent); } : function () { if (this.originalEvent)
                return this.originalEvent[t]; }, set: function (e) { Object.defineProperty(this, t, { enumerable: !0, configurable: !0, writable: !0, value: e }); } }); }, fix: function (e) { return e[k.expando] ? e : new k.Event(e); }, special: { load: { noBubble: !0 }, click: { setup: function (e) { var t = this || e; return pe.test(t.type) && t.click && A(t, "input") && De(t, "click", ke), !1; }, trigger: function (e) { var t = this || e; return pe.test(t.type) && t.click && A(t, "input") && De(t, "click"), !0; }, _default: function (e) { var t = e.target; return pe.test(t.type) && t.click && A(t, "input") && Q.get(t, "click") || A(t, "a"); } }, beforeunload: { postDispatch: function (e) { void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result); } } } }, k.removeEvent = function (e, t, n) { e.removeEventListener && e.removeEventListener(t, n); }, k.Event = function (e, t) { if (!(this instanceof k.Event))
        return new k.Event(e, t); e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? ke : Se, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && k.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[k.expando] = !0; }, k.Event.prototype = { constructor: k.Event, isDefaultPrevented: Se, isPropagationStopped: Se, isImmediatePropagationStopped: Se, isSimulated: !1, preventDefault: function () { var e = this.originalEvent; this.isDefaultPrevented = ke, e && !this.isSimulated && e.preventDefault(); }, stopPropagation: function () { var e = this.originalEvent; this.isPropagationStopped = ke, e && !this.isSimulated && e.stopPropagation(); }, stopImmediatePropagation: function () { var e = this.originalEvent; this.isImmediatePropagationStopped = ke, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation(); } }, k.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, code: !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function (e) { var t = e.button; return null == e.which && Te.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Ce.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which; } }, k.event.addProp), k.each({ focus: "focusin", blur: "focusout" }, function (e, t) { k.event.special[e] = { setup: function () { return De(this, e, Ne), !1; }, trigger: function () { return De(this, e), !0; }, delegateType: t }; }), k.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (e, i) { k.event.special[e] = { delegateType: i, bindType: i, handle: function (e) { var t, n = e.relatedTarget, r = e.handleObj; return n && (n === this || k.contains(this, n)) || (e.type = r.origType, t = r.handler.apply(this, arguments), e.type = i), t; } }; }), k.fn.extend({ on: function (e, t, n, r) { return Ae(this, e, t, n, r); }, one: function (e, t, n, r) { return Ae(this, e, t, n, r, 1); }, off: function (e, t, n) { var r, i; if (e && e.preventDefault && e.handleObj)
            return r = e.handleObj, k(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this; if ("object" == typeof e) {
            for (i in e)
                this.off(i, t, e[i]);
            return this;
        } return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = Se), this.each(function () { k.event.remove(this, e, n, t); }); } });
    var je = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, qe = /<script|<style|<link/i, Le = /checked\s*(?:[^=]|=\s*.checked.)/i, He = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function Oe(e, t) { return A(e, "table") && A(11 !== t.nodeType ? t : t.firstChild, "tr") && k(e).children("tbody")[0] || e; }
    function Pe(e) { return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e; }
    function Re(e) { return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e; }
    function Me(e, t) { var n, r, i, o, a, s, u, l; if (1 === t.nodeType) {
        if (Q.hasData(e) && (o = Q.access(e), a = Q.set(t, o), l = o.events))
            for (i in delete a.handle, a.events = {}, l)
                for (n = 0, r = l[i].length; n < r; n++)
                    k.event.add(t, i, l[i][n]);
        J.hasData(e) && (s = J.access(e), u = k.extend({}, s), J.set(t, u));
    } }
    function Ie(n, r, i, o) { r = g.apply([], r); var e, t, a, s, u, l, c = 0, f = n.length, p = f - 1, d = r[0], h = m(d); if (h || 1 < f && "string" == typeof d && !y.checkClone && Le.test(d))
        return n.each(function (e) { var t = n.eq(e); h && (r[0] = d.call(this, e, t.html())), Ie(t, r, i, o); }); if (f && (t = (e = we(r, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), t || o)) {
        for (s = (a = k.map(ve(e, "script"), Pe)).length; c < f; c++)
            u = e, c !== p && (u = k.clone(u, !0, !0), s && k.merge(a, ve(u, "script"))), i.call(n[c], u, c);
        if (s)
            for (l = a[a.length - 1].ownerDocument, k.map(a, Re), c = 0; c < s; c++)
                u = a[c], he.test(u.type || "") && !Q.access(u, "globalEval") && k.contains(l, u) && (u.src && "module" !== (u.type || "").toLowerCase() ? k._evalUrl && !u.noModule && k._evalUrl(u.src, { nonce: u.nonce || u.getAttribute("nonce") }) : b(u.textContent.replace(He, ""), u, l));
    } return n; }
    function We(e, t, n) { for (var r, i = t ? k.filter(t, e) : e, o = 0; null != (r = i[o]); o++)
        n || 1 !== r.nodeType || k.cleanData(ve(r)), r.parentNode && (n && oe(r) && ye(ve(r, "script")), r.parentNode.removeChild(r)); return e; }
    k.extend({ htmlPrefilter: function (e) { return e.replace(je, "<$1></$2>"); }, clone: function (e, t, n) { var r, i, o, a, s, u, l, c = e.cloneNode(!0), f = oe(e); if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || k.isXMLDoc(e)))
            for (a = ve(c), r = 0, i = (o = ve(e)).length; r < i; r++)
                s = o[r], u = a[r], void 0, "input" === (l = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : "input" !== l && "textarea" !== l || (u.defaultValue = s.defaultValue); if (t)
            if (n)
                for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++)
                    Me(o[r], a[r]);
            else
                Me(e, c); return 0 < (a = ve(c, "script")).length && ye(a, !f && ve(e, "script")), c; }, cleanData: function (e) { for (var t, n, r, i = k.event.special, o = 0; void 0 !== (n = e[o]); o++)
            if (G(n)) {
                if (t = n[Q.expando]) {
                    if (t.events)
                        for (r in t.events)
                            i[r] ? k.event.remove(n, r) : k.removeEvent(n, r, t.handle);
                    n[Q.expando] = void 0;
                }
                n[J.expando] && (n[J.expando] = void 0);
            } } }), k.fn.extend({ detach: function (e) { return We(this, e, !0); }, remove: function (e) { return We(this, e); }, text: function (e) { return _(this, function (e) { return void 0 === e ? k.text(this) : this.empty().each(function () { 1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e); }); }, null, e, arguments.length); }, append: function () { return Ie(this, arguments, function (e) { 1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Oe(this, e).appendChild(e); }); }, prepend: function () { return Ie(this, arguments, function (e) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var t = Oe(this, e);
            t.insertBefore(e, t.firstChild);
        } }); }, before: function () { return Ie(this, arguments, function (e) { this.parentNode && this.parentNode.insertBefore(e, this); }); }, after: function () { return Ie(this, arguments, function (e) { this.parentNode && this.parentNode.insertBefore(e, this.nextSibling); }); }, empty: function () { for (var e, t = 0; null != (e = this[t]); t++)
            1 === e.nodeType && (k.cleanData(ve(e, !1)), e.textContent = ""); return this; }, clone: function (e, t) { return e = null != e && e, t = null == t ? e : t, this.map(function () { return k.clone(this, e, t); }); }, html: function (e) { return _(this, function (e) { var t = this[0] || {}, n = 0, r = this.length; if (void 0 === e && 1 === t.nodeType)
            return t.innerHTML; if ("string" == typeof e && !qe.test(e) && !ge[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
            e = k.htmlPrefilter(e);
            try {
                for (; n < r; n++)
                    1 === (t = this[n] || {}).nodeType && (k.cleanData(ve(t, !1)), t.innerHTML = e);
                t = 0;
            }
            catch (e) { }
        } t && this.empty().append(e); }, null, e, arguments.length); }, replaceWith: function () { var n = []; return Ie(this, arguments, function (e) { var t = this.parentNode; k.inArray(this, n) < 0 && (k.cleanData(ve(this)), t && t.replaceChild(e, this)); }, n); } }), k.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (e, a) { k.fn[e] = function (e) { for (var t, n = [], r = k(e), i = r.length - 1, o = 0; o <= i; o++)
        t = o === i ? this : this.clone(!0), k(r[o])[a](t), u.apply(n, t.get()); return this.pushStack(n); }; });
    var $e = new RegExp("^(" + te + ")(?!px)[a-z%]+$", "i"), Fe = function (e) { var t = e.ownerDocument.defaultView; return t && t.opener || (t = C), t.getComputedStyle(e); }, Be = new RegExp(re.join("|"), "i");
    function _e(e, t, n) { var r, i, o, a, s = e.style; return (n = n || Fe(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || oe(e) || (a = k.style(e, t)), !y.pixelBoxStyles() && $e.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a; }
    function ze(e, t) { return { get: function () { if (!e())
            return (this.get = t).apply(this, arguments); delete this.get; } }; }
    !function () { function e() { if (u) {
        s.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", u.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", ie.appendChild(s).appendChild(u);
        var e = C.getComputedStyle(u);
        n = "1%" !== e.top, a = 12 === t(e.marginLeft), u.style.right = "60%", o = 36 === t(e.right), r = 36 === t(e.width), u.style.position = "absolute", i = 12 === t(u.offsetWidth / 3), ie.removeChild(s), u = null;
    } } function t(e) { return Math.round(parseFloat(e)); } var n, r, i, o, a, s = E.createElement("div"), u = E.createElement("div"); u.style && (u.style.backgroundClip = "content-box", u.cloneNode(!0).style.backgroundClip = "", y.clearCloneStyle = "content-box" === u.style.backgroundClip, k.extend(y, { boxSizingReliable: function () { return e(), r; }, pixelBoxStyles: function () { return e(), o; }, pixelPosition: function () { return e(), n; }, reliableMarginLeft: function () { return e(), a; }, scrollboxSize: function () { return e(), i; } })); }();
    var Ue = ["Webkit", "Moz", "ms"], Xe = E.createElement("div").style, Ve = {};
    function Ge(e) { var t = k.cssProps[e] || Ve[e]; return t || (e in Xe ? e : Ve[e] = function (e) { var t = e[0].toUpperCase() + e.slice(1), n = Ue.length; while (n--)
        if ((e = Ue[n] + t) in Xe)
            return e; }(e) || e); }
    var Ye = /^(none|table(?!-c[ea]).+)/, Qe = /^--/, Je = { position: "absolute", visibility: "hidden", display: "block" }, Ke = { letterSpacing: "0", fontWeight: "400" };
    function Ze(e, t, n) { var r = ne.exec(t); return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t; }
    function et(e, t, n, r, i, o) { var a = "width" === t ? 1 : 0, s = 0, u = 0; if (n === (r ? "border" : "content"))
        return 0; for (; a < 4; a += 2)
        "margin" === n && (u += k.css(e, n + re[a], !0, i)), r ? ("content" === n && (u -= k.css(e, "padding" + re[a], !0, i)), "margin" !== n && (u -= k.css(e, "border" + re[a] + "Width", !0, i))) : (u += k.css(e, "padding" + re[a], !0, i), "padding" !== n ? u += k.css(e, "border" + re[a] + "Width", !0, i) : s += k.css(e, "border" + re[a] + "Width", !0, i)); return !r && 0 <= o && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), u; }
    function tt(e, t, n) { var r = Fe(e), i = (!y.boxSizingReliable() || n) && "border-box" === k.css(e, "boxSizing", !1, r), o = i, a = _e(e, t, r), s = "offset" + t[0].toUpperCase() + t.slice(1); if ($e.test(a)) {
        if (!n)
            return a;
        a = "auto";
    } return (!y.boxSizingReliable() && i || "auto" === a || !parseFloat(a) && "inline" === k.css(e, "display", !1, r)) && e.getClientRects().length && (i = "border-box" === k.css(e, "boxSizing", !1, r), (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + et(e, t, n || (i ? "border" : "content"), o, r, a) + "px"; }
    function nt(e, t, n, r, i) { return new nt.prototype.init(e, t, n, r, i); }
    k.extend({ cssHooks: { opacity: { get: function (e, t) { if (t) {
                    var n = _e(e, "opacity");
                    return "" === n ? "1" : n;
                } } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, gridArea: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnStart: !0, gridRow: !0, gridRowEnd: !0, gridRowStart: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: {}, style: function (e, t, n, r) { if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
            var i, o, a, s = V(t), u = Qe.test(t), l = e.style;
            if (u || (t = Ge(s)), a = k.cssHooks[t] || k.cssHooks[s], void 0 === n)
                return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
            "string" === (o = typeof n) && (i = ne.exec(n)) && i[1] && (n = le(e, t, i), o = "number"), null != n && n == n && ("number" !== o || u || (n += i && i[3] || (k.cssNumber[s] ? "" : "px")), y.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
        } }, css: function (e, t, n, r) { var i, o, a, s = V(t); return Qe.test(t) || (t = Ge(s)), (a = k.cssHooks[t] || k.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = _e(e, t, r)), "normal" === i && t in Ke && (i = Ke[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i; } }), k.each(["height", "width"], function (e, u) { k.cssHooks[u] = { get: function (e, t, n) { if (t)
            return !Ye.test(k.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? tt(e, u, n) : ue(e, Je, function () { return tt(e, u, n); }); }, set: function (e, t, n) { var r, i = Fe(e), o = !y.scrollboxSize() && "absolute" === i.position, a = (o || n) && "border-box" === k.css(e, "boxSizing", !1, i), s = n ? et(e, u, n, a, i) : 0; return a && o && (s -= Math.ceil(e["offset" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - et(e, u, "border", !1, i) - .5)), s && (r = ne.exec(t)) && "px" !== (r[3] || "px") && (e.style[u] = t, t = k.css(e, u)), Ze(0, t, s); } }; }), k.cssHooks.marginLeft = ze(y.reliableMarginLeft, function (e, t) { if (t)
        return (parseFloat(_e(e, "marginLeft")) || e.getBoundingClientRect().left - ue(e, { marginLeft: 0 }, function () { return e.getBoundingClientRect().left; })) + "px"; }), k.each({ margin: "", padding: "", border: "Width" }, function (i, o) { k.cssHooks[i + o] = { expand: function (e) { for (var t = 0, n = {}, r = "string" == typeof e ? e.split(" ") : [e]; t < 4; t++)
            n[i + re[t] + o] = r[t] || r[t - 2] || r[0]; return n; } }, "margin" !== i && (k.cssHooks[i + o].set = Ze); }), k.fn.extend({ css: function (e, t) { return _(this, function (e, t, n) { var r, i, o = {}, a = 0; if (Array.isArray(t)) {
            for (r = Fe(e), i = t.length; a < i; a++)
                o[t[a]] = k.css(e, t[a], !1, r);
            return o;
        } return void 0 !== n ? k.style(e, t, n) : k.css(e, t); }, e, t, 1 < arguments.length); } }), ((k.Tween = nt).prototype = { constructor: nt, init: function (e, t, n, r, i, o) { this.elem = e, this.prop = n, this.easing = i || k.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (k.cssNumber[n] ? "" : "px"); }, cur: function () { var e = nt.propHooks[this.prop]; return e && e.get ? e.get(this) : nt.propHooks._default.get(this); }, run: function (e) { var t, n = nt.propHooks[this.prop]; return this.options.duration ? this.pos = t = k.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : nt.propHooks._default.set(this), this; } }).init.prototype = nt.prototype, (nt.propHooks = { _default: { get: function (e) { var t; return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = k.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0; }, set: function (e) { k.fx.step[e.prop] ? k.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !k.cssHooks[e.prop] && null == e.elem.style[Ge(e.prop)] ? e.elem[e.prop] = e.now : k.style(e.elem, e.prop, e.now + e.unit); } } }).scrollTop = nt.propHooks.scrollLeft = { set: function (e) { e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now); } }, k.easing = { linear: function (e) { return e; }, swing: function (e) { return .5 - Math.cos(e * Math.PI) / 2; }, _default: "swing" }, k.fx = nt.prototype.init, k.fx.step = {};
    var rt, it, ot, at, st = /^(?:toggle|show|hide)$/, ut = /queueHooks$/;
    function lt() { it && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(lt) : C.setTimeout(lt, k.fx.interval), k.fx.tick()); }
    function ct() { return C.setTimeout(function () { rt = void 0; }), rt = Date.now(); }
    function ft(e, t) { var n, r = 0, i = { height: e }; for (t = t ? 1 : 0; r < 4; r += 2 - t)
        i["margin" + (n = re[r])] = i["padding" + n] = e; return t && (i.opacity = i.width = e), i; }
    function pt(e, t, n) { for (var r, i = (dt.tweeners[t] || []).concat(dt.tweeners["*"]), o = 0, a = i.length; o < a; o++)
        if (r = i[o].call(n, t, e))
            return r; }
    function dt(o, e, t) { var n, a, r = 0, i = dt.prefilters.length, s = k.Deferred().always(function () { delete u.elem; }), u = function () { if (a)
        return !1; for (var e = rt || ct(), t = Math.max(0, l.startTime + l.duration - e), n = 1 - (t / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++)
        l.tweens[r].run(n); return s.notifyWith(o, [l, n, t]), n < 1 && i ? t : (i || s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l]), !1); }, l = s.promise({ elem: o, props: k.extend({}, e), opts: k.extend(!0, { specialEasing: {}, easing: k.easing._default }, t), originalProperties: e, originalOptions: t, startTime: rt || ct(), duration: t.duration, tweens: [], createTween: function (e, t) { var n = k.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing); return l.tweens.push(n), n; }, stop: function (e) { var t = 0, n = e ? l.tweens.length : 0; if (a)
            return this; for (a = !0; t < n; t++)
            l.tweens[t].run(1); return e ? (s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l, e])) : s.rejectWith(o, [l, e]), this; } }), c = l.props; for (!function (e, t) { var n, r, i, o, a; for (n in e)
        if (i = t[r = V(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = k.cssHooks[r]) && "expand" in a)
            for (n in o = a.expand(o), delete e[r], o)
                n in e || (e[n] = o[n], t[n] = i);
        else
            t[r] = i; }(c, l.opts.specialEasing); r < i; r++)
        if (n = dt.prefilters[r].call(l, o, c, l.opts))
            return m(n.stop) && (k._queueHooks(l.elem, l.opts.queue).stop = n.stop.bind(n)), n; return k.map(c, pt, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), k.fx.timer(k.extend(u, { elem: o, anim: l, queue: l.opts.queue })), l; }
    k.Animation = k.extend(dt, { tweeners: { "*": [function (e, t) { var n = this.createTween(e, t); return le(n.elem, e, ne.exec(t), n), n; }] }, tweener: function (e, t) { m(e) ? (t = e, e = ["*"]) : e = e.match(R); for (var n, r = 0, i = e.length; r < i; r++)
            n = e[r], dt.tweeners[n] = dt.tweeners[n] || [], dt.tweeners[n].unshift(t); }, prefilters: [function (e, t, n) { var r, i, o, a, s, u, l, c, f = "width" in t || "height" in t, p = this, d = {}, h = e.style, g = e.nodeType && se(e), v = Q.get(e, "fxshow"); for (r in n.queue || (null == (a = k._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () { a.unqueued || s(); }), a.unqueued++, p.always(function () { p.always(function () { a.unqueued--, k.queue(e, "fx").length || a.empty.fire(); }); })), t)
                if (i = t[r], st.test(i)) {
                    if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
                        if ("show" !== i || !v || void 0 === v[r])
                            continue;
                        g = !0;
                    }
                    d[r] = v && v[r] || k.style(e, r);
                } if ((u = !k.isEmptyObject(t)) || !k.isEmptyObject(d))
                for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = v && v.display) && (l = Q.get(e, "display")), "none" === (c = k.css(e, "display")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = k.css(e, "display"), fe([e]))), ("inline" === c || "inline-block" === c && null != l) && "none" === k.css(e, "float") && (u || (p.done(function () { h.display = l; }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function () { h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2]; })), u = !1, d)
                    u || (v ? "hidden" in v && (g = v.hidden) : v = Q.access(e, "fxshow", { display: l }), o && (v.hidden = !g), g && fe([e], !0), p.done(function () { for (r in g || fe([e]), Q.remove(e, "fxshow"), d)
                        k.style(e, r, d[r]); })), u = pt(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, u.start = 0)); }], prefilter: function (e, t) { t ? dt.prefilters.unshift(e) : dt.prefilters.push(e); } }), k.speed = function (e, t, n) { var r = e && "object" == typeof e ? k.extend({}, e) : { complete: n || !n && t || m(e) && e, duration: e, easing: n && t || t && !m(t) && t }; return k.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in k.fx.speeds ? r.duration = k.fx.speeds[r.duration] : r.duration = k.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function () { m(r.old) && r.old.call(this), r.queue && k.dequeue(this, r.queue); }, r; }, k.fn.extend({ fadeTo: function (e, t, n, r) { return this.filter(se).css("opacity", 0).show().end().animate({ opacity: t }, e, n, r); }, animate: function (t, e, n, r) { var i = k.isEmptyObject(t), o = k.speed(e, n, r), a = function () { var e = dt(this, k.extend({}, t), o); (i || Q.get(this, "finish")) && e.stop(!0); }; return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a); }, stop: function (i, e, o) { var a = function (e) { var t = e.stop; delete e.stop, t(o); }; return "string" != typeof i && (o = e, e = i, i = void 0), e && !1 !== i && this.queue(i || "fx", []), this.each(function () { var e = !0, t = null != i && i + "queueHooks", n = k.timers, r = Q.get(this); if (t)
            r[t] && r[t].stop && a(r[t]);
        else
            for (t in r)
                r[t] && r[t].stop && ut.test(t) && a(r[t]); for (t = n.length; t--;)
            n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), e = !1, n.splice(t, 1)); !e && o || k.dequeue(this, i); }); }, finish: function (a) { return !1 !== a && (a = a || "fx"), this.each(function () { var e, t = Q.get(this), n = t[a + "queue"], r = t[a + "queueHooks"], i = k.timers, o = n ? n.length : 0; for (t.finish = !0, k.queue(this, a, []), r && r.stop && r.stop.call(this, !0), e = i.length; e--;)
            i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), i.splice(e, 1)); for (e = 0; e < o; e++)
            n[e] && n[e].finish && n[e].finish.call(this); delete t.finish; }); } }), k.each(["toggle", "show", "hide"], function (e, r) { var i = k.fn[r]; k.fn[r] = function (e, t, n) { return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(ft(r, !0), e, t, n); }; }), k.each({ slideDown: ft("show"), slideUp: ft("hide"), slideToggle: ft("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (e, r) { k.fn[e] = function (e, t, n) { return this.animate(r, e, t, n); }; }), k.timers = [], k.fx.tick = function () { var e, t = 0, n = k.timers; for (rt = Date.now(); t < n.length; t++)
        (e = n[t])() || n[t] !== e || n.splice(t--, 1); n.length || k.fx.stop(), rt = void 0; }, k.fx.timer = function (e) { k.timers.push(e), k.fx.start(); }, k.fx.interval = 13, k.fx.start = function () { it || (it = !0, lt()); }, k.fx.stop = function () { it = null; }, k.fx.speeds = { slow: 600, fast: 200, _default: 400 }, k.fn.delay = function (r, e) { return r = k.fx && k.fx.speeds[r] || r, e = e || "fx", this.queue(e, function (e, t) { var n = C.setTimeout(e, r); t.stop = function () { C.clearTimeout(n); }; }); }, ot = E.createElement("input"), at = E.createElement("select").appendChild(E.createElement("option")), ot.type = "checkbox", y.checkOn = "" !== ot.value, y.optSelected = at.selected, (ot = E.createElement("input")).value = "t", ot.type = "radio", y.radioValue = "t" === ot.value;
    var ht, gt = k.expr.attrHandle;
    k.fn.extend({ attr: function (e, t) { return _(this, k.attr, e, t, 1 < arguments.length); }, removeAttr: function (e) { return this.each(function () { k.removeAttr(this, e); }); } }), k.extend({ attr: function (e, t, n) { var r, i, o = e.nodeType; if (3 !== o && 8 !== o && 2 !== o)
            return "undefined" == typeof e.getAttribute ? k.prop(e, t, n) : (1 === o && k.isXMLDoc(e) || (i = k.attrHooks[t.toLowerCase()] || (k.expr.match.bool.test(t) ? ht : void 0)), void 0 !== n ? null === n ? void k.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = k.find.attr(e, t)) ? void 0 : r); }, attrHooks: { type: { set: function (e, t) { if (!y.radioValue && "radio" === t && A(e, "input")) {
                    var n = e.value;
                    return e.setAttribute("type", t), n && (e.value = n), t;
                } } } }, removeAttr: function (e, t) { var n, r = 0, i = t && t.match(R); if (i && 1 === e.nodeType)
            while (n = i[r++])
                e.removeAttribute(n); } }), ht = { set: function (e, t, n) { return !1 === t ? k.removeAttr(e, n) : e.setAttribute(n, n), n; } }, k.each(k.expr.match.bool.source.match(/\w+/g), function (e, t) { var a = gt[t] || k.find.attr; gt[t] = function (e, t, n) { var r, i, o = t.toLowerCase(); return n || (i = gt[o], gt[o] = r, r = null != a(e, t, n) ? o : null, gt[o] = i), r; }; });
    var vt = /^(?:input|select|textarea|button)$/i, yt = /^(?:a|area)$/i;
    function mt(e) { return (e.match(R) || []).join(" "); }
    function xt(e) { return e.getAttribute && e.getAttribute("class") || ""; }
    function bt(e) { return Array.isArray(e) ? e : "string" == typeof e && e.match(R) || []; }
    k.fn.extend({ prop: function (e, t) { return _(this, k.prop, e, t, 1 < arguments.length); }, removeProp: function (e) { return this.each(function () { delete this[k.propFix[e] || e]; }); } }), k.extend({ prop: function (e, t, n) { var r, i, o = e.nodeType; if (3 !== o && 8 !== o && 2 !== o)
            return 1 === o && k.isXMLDoc(e) || (t = k.propFix[t] || t, i = k.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t]; }, propHooks: { tabIndex: { get: function (e) { var t = k.find.attr(e, "tabindex"); return t ? parseInt(t, 10) : vt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1; } } }, propFix: { "for": "htmlFor", "class": "className" } }), y.optSelected || (k.propHooks.selected = { get: function (e) { var t = e.parentNode; return t && t.parentNode && t.parentNode.selectedIndex, null; }, set: function (e) { var t = e.parentNode; t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex); } }), k.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () { k.propFix[this.toLowerCase()] = this; }), k.fn.extend({ addClass: function (t) { var e, n, r, i, o, a, s, u = 0; if (m(t))
            return this.each(function (e) { k(this).addClass(t.call(this, e, xt(this))); }); if ((e = bt(t)).length)
            while (n = this[u++])
                if (i = xt(n), r = 1 === n.nodeType && " " + mt(i) + " ") {
                    a = 0;
                    while (o = e[a++])
                        r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                    i !== (s = mt(r)) && n.setAttribute("class", s);
                } return this; }, removeClass: function (t) { var e, n, r, i, o, a, s, u = 0; if (m(t))
            return this.each(function (e) { k(this).removeClass(t.call(this, e, xt(this))); }); if (!arguments.length)
            return this.attr("class", ""); if ((e = bt(t)).length)
            while (n = this[u++])
                if (i = xt(n), r = 1 === n.nodeType && " " + mt(i) + " ") {
                    a = 0;
                    while (o = e[a++])
                        while (-1 < r.indexOf(" " + o + " "))
                            r = r.replace(" " + o + " ", " ");
                    i !== (s = mt(r)) && n.setAttribute("class", s);
                } return this; }, toggleClass: function (i, t) { var o = typeof i, a = "string" === o || Array.isArray(i); return "boolean" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function (e) { k(this).toggleClass(i.call(this, e, xt(this), t), t); }) : this.each(function () { var e, t, n, r; if (a) {
            t = 0, n = k(this), r = bt(i);
            while (e = r[t++])
                n.hasClass(e) ? n.removeClass(e) : n.addClass(e);
        }
        else
            void 0 !== i && "boolean" !== o || ((e = xt(this)) && Q.set(this, "__className__", e), this.setAttribute && this.setAttribute("class", e || !1 === i ? "" : Q.get(this, "__className__") || "")); }); }, hasClass: function (e) { var t, n, r = 0; t = " " + e + " "; while (n = this[r++])
            if (1 === n.nodeType && -1 < (" " + mt(xt(n)) + " ").indexOf(t))
                return !0; return !1; } });
    var wt = /\r/g;
    k.fn.extend({ val: function (n) { var r, e, i, t = this[0]; return arguments.length ? (i = m(n), this.each(function (e) { var t; 1 === this.nodeType && (null == (t = i ? n.call(this, e, k(this).val()) : n) ? t = "" : "number" == typeof t ? t += "" : Array.isArray(t) && (t = k.map(t, function (e) { return null == e ? "" : e + ""; })), (r = k.valHooks[this.type] || k.valHooks[this.nodeName.toLowerCase()]) && "set" in r && void 0 !== r.set(this, t, "value") || (this.value = t)); })) : t ? (r = k.valHooks[t.type] || k.valHooks[t.nodeName.toLowerCase()]) && "get" in r && void 0 !== (e = r.get(t, "value")) ? e : "string" == typeof (e = t.value) ? e.replace(wt, "") : null == e ? "" : e : void 0; } }), k.extend({ valHooks: { option: { get: function (e) { var t = k.find.attr(e, "value"); return null != t ? t : mt(k.text(e)); } }, select: { get: function (e) { var t, n, r, i = e.options, o = e.selectedIndex, a = "select-one" === e.type, s = a ? null : [], u = a ? o + 1 : i.length; for (r = o < 0 ? u : a ? o : 0; r < u; r++)
                    if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, "optgroup"))) {
                        if (t = k(n).val(), a)
                            return t;
                        s.push(t);
                    } return s; }, set: function (e, t) { var n, r, i = e.options, o = k.makeArray(t), a = i.length; while (a--)
                    ((r = i[a]).selected = -1 < k.inArray(k.valHooks.option.get(r), o)) && (n = !0); return n || (e.selectedIndex = -1), o; } } } }), k.each(["radio", "checkbox"], function () { k.valHooks[this] = { set: function (e, t) { if (Array.isArray(t))
            return e.checked = -1 < k.inArray(k(e).val(), t); } }, y.checkOn || (k.valHooks[this].get = function (e) { return null === e.getAttribute("value") ? "on" : e.value; }); }), y.focusin = "onfocusin" in C;
    var Tt = /^(?:focusinfocus|focusoutblur)$/, Ct = function (e) { e.stopPropagation(); };
    k.extend(k.event, { trigger: function (e, t, n, r) { var i, o, a, s, u, l, c, f, p = [n || E], d = v.call(e, "type") ? e.type : e, h = v.call(e, "namespace") ? e.namespace.split(".") : []; if (o = f = a = n = n || E, 3 !== n.nodeType && 8 !== n.nodeType && !Tt.test(d + k.event.triggered) && (-1 < d.indexOf(".") && (d = (h = d.split(".")).shift(), h.sort()), u = d.indexOf(":") < 0 && "on" + d, (e = e[k.expando] ? e : new k.Event(d, "object" == typeof e && e)).isTrigger = r ? 2 : 3, e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e.result = void 0, e.target || (e.target = n), t = null == t ? [e] : k.makeArray(t, [e]), c = k.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {
            if (!r && !c.noBubble && !x(n)) {
                for (s = c.delegateType || d, Tt.test(s + d) || (o = o.parentNode); o; o = o.parentNode)
                    p.push(o), a = o;
                a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C);
            }
            i = 0;
            while ((o = p[i++]) && !e.isPropagationStopped())
                f = o, e.type = 1 < i ? s : c.bindType || d, (l = (Q.get(o, "events") || {})[e.type] && Q.get(o, "handle")) && l.apply(o, t), (l = u && o[u]) && l.apply && G(o) && (e.result = l.apply(o, t), !1 === e.result && e.preventDefault());
            return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !G(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), k.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, Ct), n[d](), e.isPropagationStopped() && f.removeEventListener(d, Ct), k.event.triggered = void 0, a && (n[u] = a)), e.result;
        } }, simulate: function (e, t, n) { var r = k.extend(new k.Event, n, { type: e, isSimulated: !0 }); k.event.trigger(r, null, t); } }), k.fn.extend({ trigger: function (e, t) { return this.each(function () { k.event.trigger(e, t, this); }); }, triggerHandler: function (e, t) { var n = this[0]; if (n)
            return k.event.trigger(e, t, n, !0); } }), y.focusin || k.each({ focus: "focusin", blur: "focusout" }, function (n, r) { var i = function (e) { k.event.simulate(r, e.target, k.event.fix(e)); }; k.event.special[r] = { setup: function () { var e = this.ownerDocument || this, t = Q.access(e, r); t || e.addEventListener(n, i, !0), Q.access(e, r, (t || 0) + 1); }, teardown: function () { var e = this.ownerDocument || this, t = Q.access(e, r) - 1; t ? Q.access(e, r, t) : (e.removeEventListener(n, i, !0), Q.remove(e, r)); } }; });
    var Et = C.location, kt = Date.now(), St = /\?/;
    k.parseXML = function (e) { var t; if (!e || "string" != typeof e)
        return null; try {
        t = (new C.DOMParser).parseFromString(e, "text/xml");
    }
    catch (e) {
        t = void 0;
    } return t && !t.getElementsByTagName("parsererror").length || k.error("Invalid XML: " + e), t; };
    var Nt = /\[\]$/, At = /\r?\n/g, Dt = /^(?:submit|button|image|reset|file)$/i, jt = /^(?:input|select|textarea|keygen)/i;
    function qt(n, e, r, i) { var t; if (Array.isArray(e))
        k.each(e, function (e, t) { r || Nt.test(n) ? i(n, t) : qt(n + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, r, i); });
    else if (r || "object" !== w(e))
        i(n, e);
    else
        for (t in e)
            qt(n + "[" + t + "]", e[t], r, i); }
    k.param = function (e, t) { var n, r = [], i = function (e, t) { var n = m(t) ? t() : t; r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n); }; if (null == e)
        return ""; if (Array.isArray(e) || e.jquery && !k.isPlainObject(e))
        k.each(e, function () { i(this.name, this.value); });
    else
        for (n in e)
            qt(n, e[n], t, i); return r.join("&"); }, k.fn.extend({ serialize: function () { return k.param(this.serializeArray()); }, serializeArray: function () { return this.map(function () { var e = k.prop(this, "elements"); return e ? k.makeArray(e) : this; }).filter(function () { var e = this.type; return this.name && !k(this).is(":disabled") && jt.test(this.nodeName) && !Dt.test(e) && (this.checked || !pe.test(e)); }).map(function (e, t) { var n = k(this).val(); return null == n ? null : Array.isArray(n) ? k.map(n, function (e) { return { name: t.name, value: e.replace(At, "\r\n") }; }) : { name: t.name, value: n.replace(At, "\r\n") }; }).get(); } });
    var Lt = /%20/g, Ht = /#.*$/, Ot = /([?&])_=[^&]*/, Pt = /^(.*?):[ \t]*([^\r\n]*)$/gm, Rt = /^(?:GET|HEAD)$/, Mt = /^\/\//, It = {}, Wt = {}, $t = "*/".concat("*"), Ft = E.createElement("a");
    function Bt(o) { return function (e, t) { "string" != typeof e && (t = e, e = "*"); var n, r = 0, i = e.toLowerCase().match(R) || []; if (m(t))
        while (n = i[r++])
            "+" === n[0] ? (n = n.slice(1) || "*", (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t); }; }
    function _t(t, i, o, a) { var s = {}, u = t === Wt; function l(e) { var r; return s[e] = !0, k.each(t[e] || [], function (e, t) { var n = t(i, o, a); return "string" != typeof n || u || s[n] ? u ? !(r = n) : void 0 : (i.dataTypes.unshift(n), l(n), !1); }), r; } return l(i.dataTypes[0]) || !s["*"] && l("*"); }
    function zt(e, t) { var n, r, i = k.ajaxSettings.flatOptions || {}; for (n in t)
        void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]); return r && k.extend(!0, e, r), e; }
    Ft.href = Et.href, k.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: Et.href, type: "GET", isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": $t, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": k.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (e, t) { return t ? zt(zt(e, k.ajaxSettings), t) : zt(k.ajaxSettings, e); }, ajaxPrefilter: Bt(It), ajaxTransport: Bt(Wt), ajax: function (e, t) { "object" == typeof e && (t = e, e = void 0), t = t || {}; var c, f, p, n, d, r, h, g, i, o, v = k.ajaxSetup({}, t), y = v.context || v, m = v.context && (y.nodeType || y.jquery) ? k(y) : k.event, x = k.Deferred(), b = k.Callbacks("once memory"), w = v.statusCode || {}, a = {}, s = {}, u = "canceled", T = { readyState: 0, getResponseHeader: function (e) { var t; if (h) {
                if (!n) {
                    n = {};
                    while (t = Pt.exec(p))
                        n[t[1].toLowerCase() + " "] = (n[t[1].toLowerCase() + " "] || []).concat(t[2]);
                }
                t = n[e.toLowerCase() + " "];
            } return null == t ? null : t.join(", "); }, getAllResponseHeaders: function () { return h ? p : null; }, setRequestHeader: function (e, t) { return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, a[e] = t), this; }, overrideMimeType: function (e) { return null == h && (v.mimeType = e), this; }, statusCode: function (e) { var t; if (e)
                if (h)
                    T.always(e[T.status]);
                else
                    for (t in e)
                        w[t] = [w[t], e[t]]; return this; }, abort: function (e) { var t = e || u; return c && c.abort(t), l(0, t), this; } }; if (x.promise(T), v.url = ((e || v.url || Et.href) + "").replace(Mt, Et.protocol + "//"), v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || "*").toLowerCase().match(R) || [""], null == v.crossDomain) {
            r = E.createElement("a");
            try {
                r.href = v.url, r.href = r.href, v.crossDomain = Ft.protocol + "//" + Ft.host != r.protocol + "//" + r.host;
            }
            catch (e) {
                v.crossDomain = !0;
            }
        } if (v.data && v.processData && "string" != typeof v.data && (v.data = k.param(v.data, v.traditional)), _t(It, v, t, T), h)
            return T; for (i in (g = k.event && v.global) && 0 == k.active++ && k.event.trigger("ajaxStart"), v.type = v.type.toUpperCase(), v.hasContent = !Rt.test(v.type), f = v.url.replace(Ht, ""), v.hasContent ? v.data && v.processData && 0 === (v.contentType || "").indexOf("application/x-www-form-urlencoded") && (v.data = v.data.replace(Lt, "+")) : (o = v.url.slice(f.length), v.data && (v.processData || "string" == typeof v.data) && (f += (St.test(f) ? "&" : "?") + v.data, delete v.data), !1 === v.cache && (f = f.replace(Ot, "$1"), o = (St.test(f) ? "&" : "?") + "_=" + kt++ + o), v.url = f + o), v.ifModified && (k.lastModified[f] && T.setRequestHeader("If-Modified-Since", k.lastModified[f]), k.etag[f] && T.setRequestHeader("If-None-Match", k.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader("Content-Type", v.contentType), T.setRequestHeader("Accept", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + ("*" !== v.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : v.accepts["*"]), v.headers)
            T.setRequestHeader(i, v.headers[i]); if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h))
            return T.abort(); if (u = "abort", b.add(v.complete), T.done(v.success), T.fail(v.error), c = _t(Wt, v, t, T)) {
            if (T.readyState = 1, g && m.trigger("ajaxSend", [T, v]), h)
                return T;
            v.async && 0 < v.timeout && (d = C.setTimeout(function () { T.abort("timeout"); }, v.timeout));
            try {
                h = !1, c.send(a, l);
            }
            catch (e) {
                if (h)
                    throw e;
                l(-1, e);
            }
        }
        else
            l(-1, "No Transport"); function l(e, t, n, r) { var i, o, a, s, u, l = t; h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || "", T.readyState = 0 < e ? 4 : 0, i = 200 <= e && e < 300 || 304 === e, n && (s = function (e, t, n) { var r, i, o, a, s = e.contents, u = e.dataTypes; while ("*" === u[0])
            u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type")); if (r)
            for (i in s)
                if (s[i] && s[i].test(r)) {
                    u.unshift(i);
                    break;
                } if (u[0] in n)
            o = u[0];
        else {
            for (i in n) {
                if (!u[0] || e.converters[i + " " + u[0]]) {
                    o = i;
                    break;
                }
                a || (a = i);
            }
            o = o || a;
        } if (o)
            return o !== u[0] && u.unshift(o), n[o]; }(v, T, n)), s = function (e, t, n, r) { var i, o, a, s, u, l = {}, c = e.dataTypes.slice(); if (c[1])
            for (a in e.converters)
                l[a.toLowerCase()] = e.converters[a]; o = c.shift(); while (o)
            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift())
                if ("*" === o)
                    o = u;
                else if ("*" !== u && u !== o) {
                    if (!(a = l[u + " " + o] || l["* " + o]))
                        for (i in l)
                            if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                                !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                                break;
                            }
                    if (!0 !== a)
                        if (a && e["throws"])
                            t = a(t);
                        else
                            try {
                                t = a(t);
                            }
                            catch (e) {
                                return { state: "parsererror", error: a ? e : "No conversion from " + u + " to " + o };
                            }
                } return { state: "success", data: t }; }(v, s, T, i), i ? (v.ifModified && ((u = T.getResponseHeader("Last-Modified")) && (k.lastModified[f] = u), (u = T.getResponseHeader("etag")) && (k.etag[f] = u)), 204 === e || "HEAD" === v.type ? l = "nocontent" : 304 === e ? l = "notmodified" : (l = s.state, o = s.data, i = !(a = s.error))) : (a = l, !e && l || (l = "error", e < 0 && (e = 0))), T.status = e, T.statusText = (t || l) + "", i ? x.resolveWith(y, [o, l, T]) : x.rejectWith(y, [T, l, a]), T.statusCode(w), w = void 0, g && m.trigger(i ? "ajaxSuccess" : "ajaxError", [T, v, i ? o : a]), b.fireWith(y, [T, l]), g && (m.trigger("ajaxComplete", [T, v]), --k.active || k.event.trigger("ajaxStop"))); } return T; }, getJSON: function (e, t, n) { return k.get(e, t, n, "json"); }, getScript: function (e, t) { return k.get(e, void 0, t, "script"); } }), k.each(["get", "post"], function (e, i) { k[i] = function (e, t, n, r) { return m(t) && (r = r || n, n = t, t = void 0), k.ajax(k.extend({ url: e, type: i, dataType: r, data: t, success: n }, k.isPlainObject(e) && e)); }; }), k._evalUrl = function (e, t) { return k.ajax({ url: e, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, converters: { "text script": function () { } }, dataFilter: function (e) { k.globalEval(e, t); } }); }, k.fn.extend({ wrapAll: function (e) { var t; return this[0] && (m(e) && (e = e.call(this[0])), t = k(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () { var e = this; while (e.firstElementChild)
            e = e.firstElementChild; return e; }).append(this)), this; }, wrapInner: function (n) { return m(n) ? this.each(function (e) { k(this).wrapInner(n.call(this, e)); }) : this.each(function () { var e = k(this), t = e.contents(); t.length ? t.wrapAll(n) : e.append(n); }); }, wrap: function (t) { var n = m(t); return this.each(function (e) { k(this).wrapAll(n ? t.call(this, e) : t); }); }, unwrap: function (e) { return this.parent(e).not("body").each(function () { k(this).replaceWith(this.childNodes); }), this; } }), k.expr.pseudos.hidden = function (e) { return !k.expr.pseudos.visible(e); }, k.expr.pseudos.visible = function (e) { return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length); }, k.ajaxSettings.xhr = function () { try {
        return new C.XMLHttpRequest;
    }
    catch (e) { } };
    var Ut = { 0: 200, 1223: 204 }, Xt = k.ajaxSettings.xhr();
    y.cors = !!Xt && "withCredentials" in Xt, y.ajax = Xt = !!Xt, k.ajaxTransport(function (i) { var o, a; if (y.cors || Xt && !i.crossDomain)
        return { send: function (e, t) { var n, r = i.xhr(); if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields)
                for (n in i.xhrFields)
                    r[n] = i.xhrFields[n]; for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), i.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), e)
                r.setRequestHeader(n, e[n]); o = function (e) { return function () { o && (o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, "abort" === e ? r.abort() : "error" === e ? "number" != typeof r.status ? t(0, "error") : t(r.status, r.statusText) : t(Ut[r.status] || r.status, r.statusText, "text" !== (r.responseType || "text") || "string" != typeof r.responseText ? { binary: r.response } : { text: r.responseText }, r.getAllResponseHeaders())); }; }, r.onload = o(), a = r.onerror = r.ontimeout = o("error"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function () { 4 === r.readyState && C.setTimeout(function () { o && a(); }); }, o = o("abort"); try {
                r.send(i.hasContent && i.data || null);
            }
            catch (e) {
                if (o)
                    throw e;
            } }, abort: function () { o && o(); } }; }), k.ajaxPrefilter(function (e) { e.crossDomain && (e.contents.script = !1); }), k.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function (e) { return k.globalEval(e), e; } } }), k.ajaxPrefilter("script", function (e) { void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET"); }), k.ajaxTransport("script", function (n) { var r, i; if (n.crossDomain || n.scriptAttrs)
        return { send: function (e, t) { r = k("<script>").attr(n.scriptAttrs || {}).prop({ charset: n.scriptCharset, src: n.url }).on("load error", i = function (e) { r.remove(), i = null, e && t("error" === e.type ? 404 : 200, e.type); }), E.head.appendChild(r[0]); }, abort: function () { i && i(); } }; });
    var Vt, Gt = [], Yt = /(=)\?(?=&|$)|\?\?/;
    k.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var e = Gt.pop() || k.expando + "_" + kt++; return this[e] = !0, e; } }), k.ajaxPrefilter("json jsonp", function (e, t, n) { var r, i, o, a = !1 !== e.jsonp && (Yt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Yt.test(e.data) && "data"); if (a || "jsonp" === e.dataTypes[0])
        return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, a ? e[a] = e[a].replace(Yt, "$1" + r) : !1 !== e.jsonp && (e.url += (St.test(e.url) ? "&" : "?") + e.jsonp + "=" + r), e.converters["script json"] = function () { return o || k.error(r + " was not called"), o[0]; }, e.dataTypes[0] = "json", i = C[r], C[r] = function () { o = arguments; }, n.always(function () { void 0 === i ? k(C).removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, Gt.push(r)), o && m(i) && i(o[0]), o = i = void 0; }), "script"; }), y.createHTMLDocument = ((Vt = E.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 2 === Vt.childNodes.length), k.parseHTML = function (e, t, n) { return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument("")).createElement("base")).href = E.location.href, t.head.appendChild(r)) : t = E), o = !n && [], (i = D.exec(e)) ? [t.createElement(i[1])] : (i = we([e], t, o), o && o.length && k(o).remove(), k.merge([], i.childNodes))); var r, i, o; }, k.fn.load = function (e, t, n) { var r, i, o, a = this, s = e.indexOf(" "); return -1 < s && (r = mt(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), 0 < a.length && k.ajax({ url: e, type: i || "GET", dataType: "html", data: t }).done(function (e) { o = arguments, a.html(r ? k("<div>").append(k.parseHTML(e)).find(r) : e); }).always(n && function (e, t) { a.each(function () { n.apply(this, o || [e.responseText, t, e]); }); }), this; }, k.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) { k.fn[t] = function (e) { return this.on(t, e); }; }), k.expr.pseudos.animated = function (t) { return k.grep(k.timers, function (e) { return t === e.elem; }).length; }, k.offset = { setOffset: function (e, t, n) { var r, i, o, a, s, u, l = k.css(e, "position"), c = k(e), f = {}; "static" === l && (e.style.position = "relative"), s = c.offset(), o = k.css(e, "top"), u = k.css(e, "left"), ("absolute" === l || "fixed" === l) && -1 < (o + u).indexOf("auto") ? (a = (r = c.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(t) && (t = t.call(e, n, k.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), "using" in t ? t.using.call(e, f) : c.css(f); } }, k.fn.extend({ offset: function (t) { if (arguments.length)
            return void 0 === t ? this : this.each(function (e) { k.offset.setOffset(this, t, e); }); var e, n, r = this[0]; return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, { top: e.top + n.pageYOffset, left: e.left + n.pageXOffset }) : { top: 0, left: 0 } : void 0; }, position: function () { if (this[0]) {
            var e, t, n, r = this[0], i = { top: 0, left: 0 };
            if ("fixed" === k.css(r, "position"))
                t = r.getBoundingClientRect();
            else {
                t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;
                while (e && (e === n.body || e === n.documentElement) && "static" === k.css(e, "position"))
                    e = e.parentNode;
                e && e !== r && 1 === e.nodeType && ((i = k(e).offset()).top += k.css(e, "borderTopWidth", !0), i.left += k.css(e, "borderLeftWidth", !0));
            }
            return { top: t.top - i.top - k.css(r, "marginTop", !0), left: t.left - i.left - k.css(r, "marginLeft", !0) };
        } }, offsetParent: function () { return this.map(function () { var e = this.offsetParent; while (e && "static" === k.css(e, "position"))
            e = e.offsetParent; return e || ie; }); } }), k.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (t, i) { var o = "pageYOffset" === i; k.fn[t] = function (e) { return _(this, function (e, t, n) { var r; if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n)
        return r ? r[i] : e[t]; r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n; }, t, e, arguments.length); }; }), k.each(["top", "left"], function (e, n) { k.cssHooks[n] = ze(y.pixelPosition, function (e, t) { if (t)
        return t = _e(e, n), $e.test(t) ? k(e).position()[n] + "px" : t; }); }), k.each({ Height: "height", Width: "width" }, function (a, s) { k.each({ padding: "inner" + a, content: s, "": "outer" + a }, function (r, o) { k.fn[o] = function (e, t) { var n = arguments.length && (r || "boolean" != typeof e), i = r || (!0 === e || !0 === t ? "margin" : "border"); return _(this, function (e, t, n) { var r; return x(e) ? 0 === o.indexOf("outer") ? e["inner" + a] : e.document.documentElement["client" + a] : 9 === e.nodeType ? (r = e.documentElement, Math.max(e.body["scroll" + a], r["scroll" + a], e.body["offset" + a], r["offset" + a], r["client" + a])) : void 0 === n ? k.css(e, t, i) : k.style(e, t, n, i); }, s, n ? e : void 0, n); }; }); }), k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (e, n) { k.fn[n] = function (e, t) { return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n); }; }), k.fn.extend({ hover: function (e, t) { return this.mouseenter(e).mouseleave(t || e); } }), k.fn.extend({ bind: function (e, t, n) { return this.on(e, null, t, n); }, unbind: function (e, t) { return this.off(e, null, t); }, delegate: function (e, t, n, r) { return this.on(t, e, n, r); }, undelegate: function (e, t, n) { return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n); } }), k.proxy = function (e, t) { var n, r, i; if ("string" == typeof t && (n = e[t], t = e, e = n), m(e))
        return r = s.call(arguments, 2), (i = function () { return e.apply(t || this, r.concat(s.call(arguments))); }).guid = e.guid = e.guid || k.guid++, i; }, k.holdReady = function (e) { e ? k.readyWait++ : k.ready(!0); }, k.isArray = Array.isArray, k.parseJSON = JSON.parse, k.nodeName = A, k.isFunction = m, k.isWindow = x, k.camelCase = V, k.type = w, k.now = Date.now, k.isNumeric = function (e) { var t = k.type(e); return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e)); }, "function" == typeof define && define.amd && define("jquery", [], function () { return k; });
    var Qt = C.jQuery, Jt = C.$;
    return k.noConflict = function (e) { return C.$ === k && (C.$ = Jt), e && C.jQuery === k && (C.jQuery = Qt), k; }, e || (C.jQuery = C.$ = k), k;
});

var F;
(function (F) {
    var Functions = (function () {
        function Functions() {
        }
        Functions.randomInt = function (from, to) {
            var randomResult = Math.floor((Math.random() * to) + from);
            return randomResult;
        };
        return Functions;
    }());
    F.Functions = Functions;
})(F || (F = {}));

jQuery(document).ready(function ($) {
    alert("Hello " + F.Functions.randomInt(1, 100));
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvanF1ZXJ5LTMuNC4xLm1pbi5qcyIsInB1YmxpYy1jb2RlL2YuZnVuY3Rpb25zLmpzIiwicHVibGljLWNvZGUvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNiQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24gKGUsIHQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUuZG9jdW1lbnQgPyB0KGUsICEwKSA6IGZ1bmN0aW9uIChlKSB7IGlmICghZS5kb2N1bWVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTsgcmV0dXJuIHQoZSk7IH0gOiB0KGUpO1xufShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAoQywgZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciB0ID0gW10sIEUgPSBDLmRvY3VtZW50LCByID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBzID0gdC5zbGljZSwgZyA9IHQuY29uY2F0LCB1ID0gdC5wdXNoLCBpID0gdC5pbmRleE9mLCBuID0ge30sIG8gPSBuLnRvU3RyaW5nLCB2ID0gbi5oYXNPd25Qcm9wZXJ0eSwgYSA9IHYudG9TdHJpbmcsIGwgPSBhLmNhbGwoT2JqZWN0KSwgeSA9IHt9LCBtID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBlLm5vZGVUeXBlOyB9LCB4ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgIT0gZSAmJiBlID09PSBlLndpbmRvdzsgfSwgYyA9IHsgdHlwZTogITAsIHNyYzogITAsIG5vbmNlOiAhMCwgbm9Nb2R1bGU6ICEwIH07XG4gICAgZnVuY3Rpb24gYihlLCB0LCBuKSB7IHZhciByLCBpLCBvID0gKG4gPSBuIHx8IEUpLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7IGlmIChvLnRleHQgPSBlLCB0KVxuICAgICAgICBmb3IgKHIgaW4gYylcbiAgICAgICAgICAgIChpID0gdFtyXSB8fCB0LmdldEF0dHJpYnV0ZSAmJiB0LmdldEF0dHJpYnV0ZShyKSkgJiYgby5zZXRBdHRyaWJ1dGUociwgaSk7IG4uaGVhZC5hcHBlbmRDaGlsZChvKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pOyB9XG4gICAgZnVuY3Rpb24gdyhlKSB7IHJldHVybiBudWxsID09IGUgPyBlICsgXCJcIiA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlID8gbltvLmNhbGwoZSldIHx8IFwib2JqZWN0XCIgOiB0eXBlb2YgZTsgfVxuICAgIHZhciBmID0gXCIzLjQuMVwiLCBrID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIG5ldyBrLmZuLmluaXQoZSwgdCk7IH0sIHAgPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG4gICAgZnVuY3Rpb24gZChlKSB7IHZhciB0ID0gISFlICYmIFwibGVuZ3RoXCIgaW4gZSAmJiBlLmxlbmd0aCwgbiA9IHcoZSk7IHJldHVybiAhbShlKSAmJiAheChlKSAmJiAoXCJhcnJheVwiID09PSBuIHx8IDAgPT09IHQgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiAwIDwgdCAmJiB0IC0gMSBpbiBlKTsgfVxuICAgIGsuZm4gPSBrLnByb3RvdHlwZSA9IHsganF1ZXJ5OiBmLCBjb25zdHJ1Y3RvcjogaywgbGVuZ3RoOiAwLCB0b0FycmF5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzLmNhbGwodGhpcyk7IH0sIGdldDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT0gZSA/IHMuY2FsbCh0aGlzKSA6IGUgPCAwID8gdGhpc1tlICsgdGhpcy5sZW5ndGhdIDogdGhpc1tlXTsgfSwgcHVzaFN0YWNrOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGsubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLCBlKTsgcmV0dXJuIHQucHJldk9iamVjdCA9IHRoaXMsIHQ7IH0sIGVhY2g6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBrLmVhY2godGhpcywgZSk7IH0sIG1hcDogZnVuY3Rpb24gKG4pIHsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKGsubWFwKHRoaXMsIGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBuLmNhbGwoZSwgdCwgZSk7IH0pKTsgfSwgc2xpY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7IH0sIGZpcnN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVxKDApOyB9LCBsYXN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVxKC0xKTsgfSwgZXE6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcy5sZW5ndGgsIG4gPSArZSArIChlIDwgMCA/IHQgOiAwKTsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKDAgPD0gbiAmJiBuIDwgdCA/IFt0aGlzW25dXSA6IFtdKTsgfSwgZW5kOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpOyB9LCBwdXNoOiB1LCBzb3J0OiB0LnNvcnQsIHNwbGljZTogdC5zcGxpY2UgfSwgay5leHRlbmQgPSBrLmZuLmV4dGVuZCA9IGZ1bmN0aW9uICgpIHsgdmFyIGUsIHQsIG4sIHIsIGksIG8sIGEgPSBhcmd1bWVudHNbMF0gfHwge30sIHMgPSAxLCB1ID0gYXJndW1lbnRzLmxlbmd0aCwgbCA9ICExOyBmb3IgKFwiYm9vbGVhblwiID09IHR5cGVvZiBhICYmIChsID0gYSwgYSA9IGFyZ3VtZW50c1tzXSB8fCB7fSwgcysrKSwgXCJvYmplY3RcIiA9PSB0eXBlb2YgYSB8fCBtKGEpIHx8IChhID0ge30pLCBzID09PSB1ICYmIChhID0gdGhpcywgcy0tKTsgcyA8IHU7IHMrKylcbiAgICAgICAgaWYgKG51bGwgIT0gKGUgPSBhcmd1bWVudHNbc10pKVxuICAgICAgICAgICAgZm9yICh0IGluIGUpXG4gICAgICAgICAgICAgICAgciA9IGVbdF0sIFwiX19wcm90b19fXCIgIT09IHQgJiYgYSAhPT0gciAmJiAobCAmJiByICYmIChrLmlzUGxhaW5PYmplY3QocikgfHwgKGkgPSBBcnJheS5pc0FycmF5KHIpKSkgPyAobiA9IGFbdF0sIG8gPSBpICYmICFBcnJheS5pc0FycmF5KG4pID8gW10gOiBpIHx8IGsuaXNQbGFpbk9iamVjdChuKSA/IG4gOiB7fSwgaSA9ICExLCBhW3RdID0gay5leHRlbmQobCwgbywgcikpIDogdm9pZCAwICE9PSByICYmIChhW3RdID0gcikpOyByZXR1cm4gYTsgfSwgay5leHRlbmQoeyBleHBhbmRvOiBcImpRdWVyeVwiICsgKGYgKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZywgXCJcIiksIGlzUmVhZHk6ICEwLCBlcnJvcjogZnVuY3Rpb24gKGUpIHsgdGhyb3cgbmV3IEVycm9yKGUpOyB9LCBub29wOiBmdW5jdGlvbiAoKSB7IH0sIGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuOyByZXR1cm4gISghZSB8fCBcIltvYmplY3QgT2JqZWN0XVwiICE9PSBvLmNhbGwoZSkpICYmICghKHQgPSByKGUpKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChuID0gdi5jYWxsKHQsIFwiY29uc3RydWN0b3JcIikgJiYgdC5jb25zdHJ1Y3RvcikgJiYgYS5jYWxsKG4pID09PSBsKTsgfSwgaXNFbXB0eU9iamVjdDogZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IGZvciAodCBpbiBlKVxuICAgICAgICAgICAgcmV0dXJuICExOyByZXR1cm4gITA7IH0sIGdsb2JhbEV2YWw6IGZ1bmN0aW9uIChlLCB0KSB7IGIoZSwgeyBub25jZTogdCAmJiB0Lm5vbmNlIH0pOyB9LCBlYWNoOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciA9IDA7IGlmIChkKGUpKSB7XG4gICAgICAgICAgICBmb3IgKG4gPSBlLmxlbmd0aDsgciA8IG47IHIrKylcbiAgICAgICAgICAgICAgICBpZiAoITEgPT09IHQuY2FsbChlW3JdLCByLCBlW3JdKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZm9yIChyIGluIGUpXG4gICAgICAgICAgICAgICAgaWYgKCExID09PSB0LmNhbGwoZVtyXSwgciwgZVtyXSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyByZXR1cm4gZTsgfSwgdHJpbTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiAoZSArIFwiXCIpLnJlcGxhY2UocCwgXCJcIik7IH0sIG1ha2VBcnJheTogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0IHx8IFtdOyByZXR1cm4gbnVsbCAhPSBlICYmIChkKE9iamVjdChlKSkgPyBrLm1lcmdlKG4sIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBbZV0gOiBlKSA6IHUuY2FsbChuLCBlKSksIG47IH0sIGluQXJyYXk6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBudWxsID09IHQgPyAtMSA6IGkuY2FsbCh0LCBlLCBuKTsgfSwgbWVyZ2U6IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSArdC5sZW5ndGgsIHIgPSAwLCBpID0gZS5sZW5ndGg7IHIgPCBuOyByKyspXG4gICAgICAgICAgICBlW2krK10gPSB0W3JdOyByZXR1cm4gZS5sZW5ndGggPSBpLCBlOyB9LCBncmVwOiBmdW5jdGlvbiAoZSwgdCwgbikgeyBmb3IgKHZhciByID0gW10sIGkgPSAwLCBvID0gZS5sZW5ndGgsIGEgPSAhbjsgaSA8IG87IGkrKylcbiAgICAgICAgICAgICF0KGVbaV0sIGkpICE9PSBhICYmIHIucHVzaChlW2ldKTsgcmV0dXJuIHI7IH0sIG1hcDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8gPSAwLCBhID0gW107IGlmIChkKGUpKVxuICAgICAgICAgICAgZm9yIChyID0gZS5sZW5ndGg7IG8gPCByOyBvKyspXG4gICAgICAgICAgICAgICAgbnVsbCAhPSAoaSA9IHQoZVtvXSwgbywgbikpICYmIGEucHVzaChpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZm9yIChvIGluIGUpXG4gICAgICAgICAgICAgICAgbnVsbCAhPSAoaSA9IHQoZVtvXSwgbywgbikpICYmIGEucHVzaChpKTsgcmV0dXJuIGcuYXBwbHkoW10sIGEpOyB9LCBndWlkOiAxLCBzdXBwb3J0OiB5IH0pLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiAoay5mbltTeW1ib2wuaXRlcmF0b3JdID0gdFtTeW1ib2wuaXRlcmF0b3JdKSwgay5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uIChlLCB0KSB7IG5bXCJbb2JqZWN0IFwiICsgdCArIFwiXVwiXSA9IHQudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgdmFyIGggPSBmdW5jdGlvbiAobikgeyB2YXIgZSwgZCwgYiwgbywgaSwgaCwgZiwgZywgdywgdSwgbCwgVCwgQywgYSwgRSwgdiwgcywgYywgeSwgayA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUsIG0gPSBuLmRvY3VtZW50LCBTID0gMCwgciA9IDAsIHAgPSB1ZSgpLCB4ID0gdWUoKSwgTiA9IHVlKCksIEEgPSB1ZSgpLCBEID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGUgPT09IHQgJiYgKGwgPSAhMCksIDA7IH0sIGogPSB7fS5oYXNPd25Qcm9wZXJ0eSwgdCA9IFtdLCBxID0gdC5wb3AsIEwgPSB0LnB1c2gsIEggPSB0LnB1c2gsIE8gPSB0LnNsaWNlLCBQID0gZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKylcbiAgICAgICAgaWYgKGVbbl0gPT09IHQpXG4gICAgICAgICAgICByZXR1cm4gbjsgcmV0dXJuIC0xOyB9LCBSID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLCBNID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLCBJID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLCBXID0gXCJcXFxcW1wiICsgTSArIFwiKihcIiArIEkgKyBcIikoPzpcIiArIE0gKyBcIiooWypeJHwhfl0/PSlcIiArIE0gKyBcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgSSArIFwiKSl8KVwiICsgTSArIFwiKlxcXFxdXCIsICQgPSBcIjooXCIgKyBJICsgXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgVyArIFwiKSopfC4qKVxcXFwpfClcIiwgRiA9IG5ldyBSZWdFeHAoTSArIFwiK1wiLCBcImdcIiksIEIgPSBuZXcgUmVnRXhwKFwiXlwiICsgTSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIE0gKyBcIiskXCIsIFwiZ1wiKSwgXyA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqLFwiICsgTSArIFwiKlwiKSwgeiA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqKFs+K35dfFwiICsgTSArIFwiKVwiICsgTSArIFwiKlwiKSwgVSA9IG5ldyBSZWdFeHAoTSArIFwifD5cIiksIFggPSBuZXcgUmVnRXhwKCQpLCBWID0gbmV3IFJlZ0V4cChcIl5cIiArIEkgKyBcIiRcIiksIEcgPSB7IElEOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBJICsgXCIpXCIpLCBDTEFTUzogbmV3IFJlZ0V4cChcIl5cXFxcLihcIiArIEkgKyBcIilcIiksIFRBRzogbmV3IFJlZ0V4cChcIl4oXCIgKyBJICsgXCJ8WypdKVwiKSwgQVRUUjogbmV3IFJlZ0V4cChcIl5cIiArIFcpLCBQU0VVRE86IG5ldyBSZWdFeHAoXCJeXCIgKyAkKSwgQ0hJTEQ6IG5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgTSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyBNICsgXCIqKD86KFsrLV18KVwiICsgTSArIFwiKihcXFxcZCspfCkpXCIgKyBNICsgXCIqXFxcXCl8KVwiLCBcImlcIiksIGJvb2w6IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBSICsgXCIpJFwiLCBcImlcIiksIG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cChcIl5cIiArIE0gKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyBNICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgTSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiKSB9LCBZID0gL0hUTUwkL2ksIFEgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLCBKID0gL15oXFxkJC9pLCBLID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LywgWiA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLCBlZSA9IC9bK35dLywgdGUgPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyBNICsgXCI/fChcIiArIE0gKyBcIil8LilcIiwgXCJpZ1wiKSwgbmUgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IFwiMHhcIiArIHQgLSA2NTUzNjsgcmV0dXJuIHIgIT0gciB8fCBuID8gdCA6IHIgPCAwID8gU3RyaW5nLmZyb21DaGFyQ29kZShyICsgNjU1MzYpIDogU3RyaW5nLmZyb21DaGFyQ29kZShyID4+IDEwIHwgNTUyOTYsIDEwMjMgJiByIHwgNTYzMjApOyB9LCByZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLCBpZSA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0ID8gXCJcXDBcIiA9PT0gZSA/IFwiXFx1ZmZmZFwiIDogZS5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGUuY2hhckNvZGVBdChlLmxlbmd0aCAtIDEpLnRvU3RyaW5nKDE2KSArIFwiIFwiIDogXCJcXFxcXCIgKyBlOyB9LCBvZSA9IGZ1bmN0aW9uICgpIHsgVCgpOyB9LCBhZSA9IGJlKGZ1bmN0aW9uIChlKSB7IHJldHVybiAhMCA9PT0gZS5kaXNhYmxlZCAmJiBcImZpZWxkc2V0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsgfSwgeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH0pOyB0cnkge1xuICAgICAgICBILmFwcGx5KHQgPSBPLmNhbGwobS5jaGlsZE5vZGVzKSwgbS5jaGlsZE5vZGVzKSwgdFttLmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgSCA9IHsgYXBwbHk6IHQubGVuZ3RoID8gZnVuY3Rpb24gKGUsIHQpIHsgTC5hcHBseShlLCBPLmNhbGwodCkpOyB9IDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBlLmxlbmd0aCwgciA9IDA7IHdoaWxlIChlW24rK10gPSB0W3IrK10pXG4gICAgICAgICAgICAgICAgOyBlLmxlbmd0aCA9IG4gLSAxOyB9IH07XG4gICAgfSBmdW5jdGlvbiBzZSh0LCBlLCBuLCByKSB7IHZhciBpLCBvLCBhLCBzLCB1LCBsLCBjLCBmID0gZSAmJiBlLm93bmVyRG9jdW1lbnQsIHAgPSBlID8gZS5ub2RlVHlwZSA6IDk7IGlmIChuID0gbiB8fCBbXSwgXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCB8fCAhdCB8fCAxICE9PSBwICYmIDkgIT09IHAgJiYgMTEgIT09IHApXG4gICAgICAgIHJldHVybiBuOyBpZiAoIXIgJiYgKChlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBtKSAhPT0gQyAmJiBUKGUpLCBlID0gZSB8fCBDLCBFKSkge1xuICAgICAgICBpZiAoMTEgIT09IHAgJiYgKHUgPSBaLmV4ZWModCkpKVxuICAgICAgICAgICAgaWYgKGkgPSB1WzFdKSB7XG4gICAgICAgICAgICAgICAgaWYgKDkgPT09IHApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYSA9IGUuZ2V0RWxlbWVudEJ5SWQoaSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgICAgIGlmIChhLmlkID09PSBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ucHVzaChhKSwgbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZiAmJiAoYSA9IGYuZ2V0RWxlbWVudEJ5SWQoaSkpICYmIHkoZSwgYSkgJiYgYS5pZCA9PT0gaSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ucHVzaChhKSwgbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh1WzJdKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSC5hcHBseShuLCBlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpKSwgbjtcbiAgICAgICAgICAgICAgICBpZiAoKGkgPSB1WzNdKSAmJiBkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSC5hcHBseShuLCBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaSkpLCBuO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoZC5xc2EgJiYgIUFbdCArIFwiIFwiXSAmJiAoIXYgfHwgIXYudGVzdCh0KSkgJiYgKDEgIT09IHAgfHwgXCJvYmplY3RcIiAhPT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKGMgPSB0LCBmID0gZSwgMSA9PT0gcCAmJiBVLnRlc3QodCkpIHtcbiAgICAgICAgICAgICAgICAocyA9IGUuZ2V0QXR0cmlidXRlKFwiaWRcIikpID8gcyA9IHMucmVwbGFjZShyZSwgaWUpIDogZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzID0gayksIG8gPSAobCA9IGgodCkpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoby0tKVxuICAgICAgICAgICAgICAgICAgICBsW29dID0gXCIjXCIgKyBzICsgXCIgXCIgKyB4ZShsW29dKTtcbiAgICAgICAgICAgICAgICBjID0gbC5qb2luKFwiLFwiKSwgZiA9IGVlLnRlc3QodCkgJiYgeWUoZS5wYXJlbnROb2RlKSB8fCBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSC5hcHBseShuLCBmLnF1ZXJ5U2VsZWN0b3JBbGwoYykpLCBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBBKHQsICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHMgPT09IGsgJiYgZS5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIGcodC5yZXBsYWNlKEIsIFwiJDFcIiksIGUsIG4sIHIpOyB9IGZ1bmN0aW9uIHVlKCkgeyB2YXIgciA9IFtdOyByZXR1cm4gZnVuY3Rpb24gZSh0LCBuKSB7IHJldHVybiByLnB1c2godCArIFwiIFwiKSA+IGIuY2FjaGVMZW5ndGggJiYgZGVsZXRlIGVbci5zaGlmdCgpXSwgZVt0ICsgXCIgXCJdID0gbjsgfTsgfSBmdW5jdGlvbiBsZShlKSB7IHJldHVybiBlW2tdID0gITAsIGU7IH0gZnVuY3Rpb24gY2UoZSkgeyB2YXIgdCA9IEMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpOyB0cnkge1xuICAgICAgICByZXR1cm4gISFlKHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLCB0ID0gbnVsbDtcbiAgICB9IH0gZnVuY3Rpb24gZmUoZSwgdCkgeyB2YXIgbiA9IGUuc3BsaXQoXCJ8XCIpLCByID0gbi5sZW5ndGg7IHdoaWxlIChyLS0pXG4gICAgICAgIGIuYXR0ckhhbmRsZVtuW3JdXSA9IHQ7IH0gZnVuY3Rpb24gcGUoZSwgdCkgeyB2YXIgbiA9IHQgJiYgZSwgciA9IG4gJiYgMSA9PT0gZS5ub2RlVHlwZSAmJiAxID09PSB0Lm5vZGVUeXBlICYmIGUuc291cmNlSW5kZXggLSB0LnNvdXJjZUluZGV4OyBpZiAocilcbiAgICAgICAgcmV0dXJuIHI7IGlmIChuKVxuICAgICAgICB3aGlsZSAobiA9IG4ubmV4dFNpYmxpbmcpXG4gICAgICAgICAgICBpZiAobiA9PT0gdClcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7IHJldHVybiBlID8gMSA6IC0xOyB9IGZ1bmN0aW9uIGRlKHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBcImlucHV0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBlLnR5cGUgPT09IHQ7IH07IH0gZnVuY3Rpb24gaGUobikgeyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7IHJldHVybiAoXCJpbnB1dFwiID09PSB0IHx8IFwiYnV0dG9uXCIgPT09IHQpICYmIGUudHlwZSA9PT0gbjsgfTsgfSBmdW5jdGlvbiBnZSh0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJmb3JtXCIgaW4gZSA/IGUucGFyZW50Tm9kZSAmJiAhMSA9PT0gZS5kaXNhYmxlZCA/IFwibGFiZWxcIiBpbiBlID8gXCJsYWJlbFwiIGluIGUucGFyZW50Tm9kZSA/IGUucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gdCA6IGUuZGlzYWJsZWQgPT09IHQgOiBlLmlzRGlzYWJsZWQgPT09IHQgfHwgZS5pc0Rpc2FibGVkICE9PSAhdCAmJiBhZShlKSA9PT0gdCA6IGUuZGlzYWJsZWQgPT09IHQgOiBcImxhYmVsXCIgaW4gZSAmJiBlLmRpc2FibGVkID09PSB0OyB9OyB9IGZ1bmN0aW9uIHZlKGEpIHsgcmV0dXJuIGxlKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvID0gK28sIGxlKGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gYShbXSwgZS5sZW5ndGgsIG8pLCBpID0gci5sZW5ndGg7IHdoaWxlIChpLS0pXG4gICAgICAgIGVbbiA9IHJbaV1dICYmIChlW25dID0gISh0W25dID0gZVtuXSkpOyB9KTsgfSk7IH0gZnVuY3Rpb24geWUoZSkgeyByZXR1cm4gZSAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmIGU7IH0gZm9yIChlIGluIGQgPSBzZS5zdXBwb3J0ID0ge30sIGkgPSBzZS5pc1hNTCA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5uYW1lc3BhY2VVUkksIG4gPSAoZS5vd25lckRvY3VtZW50IHx8IGUpLmRvY3VtZW50RWxlbWVudDsgcmV0dXJuICFZLnRlc3QodCB8fCBuICYmIG4ubm9kZU5hbWUgfHwgXCJIVE1MXCIpOyB9LCBUID0gc2Uuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciA9IGUgPyBlLm93bmVyRG9jdW1lbnQgfHwgZSA6IG07IHJldHVybiByICE9PSBDICYmIDkgPT09IHIubm9kZVR5cGUgJiYgci5kb2N1bWVudEVsZW1lbnQgJiYgKGEgPSAoQyA9IHIpLmRvY3VtZW50RWxlbWVudCwgRSA9ICFpKEMpLCBtICE9PSBDICYmIChuID0gQy5kZWZhdWx0VmlldykgJiYgbi50b3AgIT09IG4gJiYgKG4uYWRkRXZlbnRMaXN0ZW5lciA/IG4uYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLCBvZSwgITEpIDogbi5hdHRhY2hFdmVudCAmJiBuLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgb2UpKSwgZC5hdHRyaWJ1dGVzID0gY2UoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuY2xhc3NOYW1lID0gXCJpXCIsICFlLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTsgfSksIGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBjZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5hcHBlbmRDaGlsZChDLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCAhZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoOyB9KSwgZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gSy50ZXN0KEMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksIGQuZ2V0QnlJZCA9IGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBhLmFwcGVuZENoaWxkKGUpLmlkID0gaywgIUMuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIUMuZ2V0RWxlbWVudHNCeU5hbWUoaykubGVuZ3RoOyB9KSwgZC5nZXRCeUlkID8gKGIuZmlsdGVyLklEID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnJlcGxhY2UodGUsIG5lKTsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSB0OyB9OyB9LCBiLmZpbmQuSUQgPSBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50QnlJZCAmJiBFKSB7XG4gICAgICAgIHZhciBuID0gdC5nZXRFbGVtZW50QnlJZChlKTtcbiAgICAgICAgcmV0dXJuIG4gPyBbbl0gOiBbXTtcbiAgICB9IH0pIDogKGIuZmlsdGVyLklEID0gZnVuY3Rpb24gKGUpIHsgdmFyIG4gPSBlLnJlcGxhY2UodGUsIG5lKTsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5nZXRBdHRyaWJ1dGVOb2RlICYmIGUuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpOyByZXR1cm4gdCAmJiB0LnZhbHVlID09PSBuOyB9OyB9LCBiLmZpbmQuSUQgPSBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50QnlJZCAmJiBFKSB7XG4gICAgICAgIHZhciBuLCByLCBpLCBvID0gdC5nZXRFbGVtZW50QnlJZChlKTtcbiAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgIGlmICgobiA9IG8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSAmJiBuLnZhbHVlID09PSBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBbb107XG4gICAgICAgICAgICBpID0gdC5nZXRFbGVtZW50c0J5TmFtZShlKSwgciA9IDA7XG4gICAgICAgICAgICB3aGlsZSAobyA9IGlbcisrXSlcbiAgICAgICAgICAgICAgICBpZiAoKG4gPSBvLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkgJiYgbi52YWx1ZSA9PT0gZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtvXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfSB9KSwgYi5maW5kLlRBRyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSkgOiBkLnFzYSA/IHQucXVlcnlTZWxlY3RvckFsbChlKSA6IHZvaWQgMDsgfSA6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gW10sIGkgPSAwLCBvID0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTsgaWYgKFwiKlwiID09PSBlKSB7XG4gICAgICAgIHdoaWxlIChuID0gb1tpKytdKVxuICAgICAgICAgICAgMSA9PT0gbi5ub2RlVHlwZSAmJiByLnB1c2gobik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH0gcmV0dXJuIG87IH0sIGIuZmluZC5DTEFTUyA9IGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIEUpXG4gICAgICAgIHJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSk7IH0sIHMgPSBbXSwgdiA9IFtdLCAoZC5xc2EgPSBLLnRlc3QoQy5xdWVyeVNlbGVjdG9yQWxsKSkgJiYgKGNlKGZ1bmN0aW9uIChlKSB7IGEuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBrICsgXCInPjwvYT48c2VsZWN0IGlkPSdcIiArIGsgKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggJiYgdi5wdXNoKFwiWypeJF09XCIgKyBNICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCB8fCB2LnB1c2goXCJcXFxcW1wiICsgTSArIFwiKig/OnZhbHVlfFwiICsgUiArIFwiKVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGsgKyBcIi1dXCIpLmxlbmd0aCB8fCB2LnB1c2goXCJ+PVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoIHx8IHYucHVzaChcIjpjaGVja2VkXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiICsgayArIFwiKypcIikubGVuZ3RoIHx8IHYucHVzaChcIi4jLitbK35dXCIpOyB9KSwgY2UoZnVuY3Rpb24gKGUpIHsgZS5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiOyB2YXIgdCA9IEMuY3JlYXRlRWxlbWVudChcImlucHV0XCIpOyB0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJoaWRkZW5cIiksIGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcIkRcIiksIGUucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCAmJiB2LnB1c2goXCJuYW1lXCIgKyBNICsgXCIqWypeJHwhfl0/PVwiKSwgMiAhPT0gZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICYmIHYucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLCBhLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkID0gITAsIDIgIT09IGUucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggJiYgdi5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiksIGUucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIiksIHYucHVzaChcIiwuKjpcIik7IH0pKSwgKGQubWF0Y2hlc1NlbGVjdG9yID0gSy50ZXN0KGMgPSBhLm1hdGNoZXMgfHwgYS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgYS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgYS5vTWF0Y2hlc1NlbGVjdG9yIHx8IGEubXNNYXRjaGVzU2VsZWN0b3IpKSAmJiBjZShmdW5jdGlvbiAoZSkgeyBkLmRpc2Nvbm5lY3RlZE1hdGNoID0gYy5jYWxsKGUsIFwiKlwiKSwgYy5jYWxsKGUsIFwiW3MhPScnXTp4XCIpLCBzLnB1c2goXCIhPVwiLCAkKTsgfSksIHYgPSB2Lmxlbmd0aCAmJiBuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLCBzID0gcy5sZW5ndGggJiYgbmV3IFJlZ0V4cChzLmpvaW4oXCJ8XCIpKSwgdCA9IEsudGVzdChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSwgeSA9IHQgfHwgSy50ZXN0KGEuY29udGFpbnMpID8gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSA5ID09PSBlLm5vZGVUeXBlID8gZS5kb2N1bWVudEVsZW1lbnQgOiBlLCByID0gdCAmJiB0LnBhcmVudE5vZGU7IHJldHVybiBlID09PSByIHx8ICEoIXIgfHwgMSAhPT0gci5ub2RlVHlwZSB8fCAhKG4uY29udGFpbnMgPyBuLmNvbnRhaW5zKHIpIDogZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAxNiAmIGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKTsgfSA6IGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KVxuICAgICAgICB3aGlsZSAodCA9IHQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIGlmICh0ID09PSBlKVxuICAgICAgICAgICAgICAgIHJldHVybiAhMDsgcmV0dXJuICExOyB9LCBEID0gdCA/IGZ1bmN0aW9uIChlLCB0KSB7IGlmIChlID09PSB0KVxuICAgICAgICByZXR1cm4gbCA9ICEwLCAwOyB2YXIgbiA9ICFlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb247IHJldHVybiBuIHx8ICgxICYgKG4gPSAoZS5vd25lckRvY3VtZW50IHx8IGUpID09PSAodC5vd25lckRvY3VtZW50IHx8IHQpID8gZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSA6IDEpIHx8ICFkLnNvcnREZXRhY2hlZCAmJiB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpID09PSBuID8gZSA9PT0gQyB8fCBlLm93bmVyRG9jdW1lbnQgPT09IG0gJiYgeShtLCBlKSA/IC0xIDogdCA9PT0gQyB8fCB0Lm93bmVyRG9jdW1lbnQgPT09IG0gJiYgeShtLCB0KSA/IDEgOiB1ID8gUCh1LCBlKSAtIFAodSwgdCkgOiAwIDogNCAmIG4gPyAtMSA6IDEpOyB9IDogZnVuY3Rpb24gKGUsIHQpIHsgaWYgKGUgPT09IHQpXG4gICAgICAgIHJldHVybiBsID0gITAsIDA7IHZhciBuLCByID0gMCwgaSA9IGUucGFyZW50Tm9kZSwgbyA9IHQucGFyZW50Tm9kZSwgYSA9IFtlXSwgcyA9IFt0XTsgaWYgKCFpIHx8ICFvKVxuICAgICAgICByZXR1cm4gZSA9PT0gQyA/IC0xIDogdCA9PT0gQyA/IDEgOiBpID8gLTEgOiBvID8gMSA6IHUgPyBQKHUsIGUpIC0gUCh1LCB0KSA6IDA7IGlmIChpID09PSBvKVxuICAgICAgICByZXR1cm4gcGUoZSwgdCk7IG4gPSBlOyB3aGlsZSAobiA9IG4ucGFyZW50Tm9kZSlcbiAgICAgICAgYS51bnNoaWZ0KG4pOyBuID0gdDsgd2hpbGUgKG4gPSBuLnBhcmVudE5vZGUpXG4gICAgICAgIHMudW5zaGlmdChuKTsgd2hpbGUgKGFbcl0gPT09IHNbcl0pXG4gICAgICAgIHIrKzsgcmV0dXJuIHIgPyBwZShhW3JdLCBzW3JdKSA6IGFbcl0gPT09IG0gPyAtMSA6IHNbcl0gPT09IG0gPyAxIDogMDsgfSksIEM7IH0sIHNlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gc2UoZSwgbnVsbCwgbnVsbCwgdCk7IH0sIHNlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChlLCB0KSB7IGlmICgoZS5vd25lckRvY3VtZW50IHx8IGUpICE9PSBDICYmIFQoZSksIGQubWF0Y2hlc1NlbGVjdG9yICYmIEUgJiYgIUFbdCArIFwiIFwiXSAmJiAoIXMgfHwgIXMudGVzdCh0KSkgJiYgKCF2IHx8ICF2LnRlc3QodCkpKVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG4gPSBjLmNhbGwoZSwgdCk7XG4gICAgICAgICAgICBpZiAobiB8fCBkLmRpc2Nvbm5lY3RlZE1hdGNoIHx8IGUuZG9jdW1lbnQgJiYgMTEgIT09IGUuZG9jdW1lbnQubm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIEEodCwgITApO1xuICAgICAgICB9IHJldHVybiAwIDwgc2UodCwgQywgbnVsbCwgW2VdKS5sZW5ndGg7IH0sIHNlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IEMgJiYgVChlKSwgeShlLCB0KTsgfSwgc2UuYXR0ciA9IGZ1bmN0aW9uIChlLCB0KSB7IChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IEMgJiYgVChlKTsgdmFyIG4gPSBiLmF0dHJIYW5kbGVbdC50b0xvd2VyQ2FzZSgpXSwgciA9IG4gJiYgai5jYWxsKGIuYXR0ckhhbmRsZSwgdC50b0xvd2VyQ2FzZSgpKSA/IG4oZSwgdCwgIUUpIDogdm9pZCAwOyByZXR1cm4gdm9pZCAwICE9PSByID8gciA6IGQuYXR0cmlidXRlcyB8fCAhRSA/IGUuZ2V0QXR0cmlidXRlKHQpIDogKHIgPSBlLmdldEF0dHJpYnV0ZU5vZGUodCkpICYmIHIuc3BlY2lmaWVkID8gci52YWx1ZSA6IG51bGw7IH0sIHNlLmVzY2FwZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiAoZSArIFwiXCIpLnJlcGxhY2UocmUsIGllKTsgfSwgc2UuZXJyb3IgPSBmdW5jdGlvbiAoZSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIGUpOyB9LCBzZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBbXSwgciA9IDAsIGkgPSAwOyBpZiAobCA9ICFkLmRldGVjdER1cGxpY2F0ZXMsIHUgPSAhZC5zb3J0U3RhYmxlICYmIGUuc2xpY2UoMCksIGUuc29ydChEKSwgbCkge1xuICAgICAgICB3aGlsZSAodCA9IGVbaSsrXSlcbiAgICAgICAgICAgIHQgPT09IGVbaV0gJiYgKHIgPSBuLnB1c2goaSkpO1xuICAgICAgICB3aGlsZSAoci0tKVxuICAgICAgICAgICAgZS5zcGxpY2UobltyXSwgMSk7XG4gICAgfSByZXR1cm4gdSA9IG51bGwsIGU7IH0sIG8gPSBzZS5nZXRUZXh0ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBcIlwiLCByID0gMCwgaSA9IGUubm9kZVR5cGU7IGlmIChpKSB7XG4gICAgICAgIGlmICgxID09PSBpIHx8IDkgPT09IGkgfHwgMTEgPT09IGkpIHtcbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlLnRleHRDb250ZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgZm9yIChlID0gZS5maXJzdENoaWxkOyBlOyBlID0gZS5uZXh0U2libGluZylcbiAgICAgICAgICAgICAgICBuICs9IG8oZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoMyA9PT0gaSB8fCA0ID09PSBpKVxuICAgICAgICAgICAgcmV0dXJuIGUubm9kZVZhbHVlO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHdoaWxlICh0ID0gZVtyKytdKVxuICAgICAgICAgICAgbiArPSBvKHQpOyByZXR1cm4gbjsgfSwgKGIgPSBzZS5zZWxlY3RvcnMgPSB7IGNhY2hlTGVuZ3RoOiA1MCwgY3JlYXRlUHNldWRvOiBsZSwgbWF0Y2g6IEcsIGF0dHJIYW5kbGU6IHt9LCBmaW5kOiB7fSwgcmVsYXRpdmU6IHsgXCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6ICEwIH0sIFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSwgXCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogITAgfSwgXCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH0gfSwgcHJlRmlsdGVyOiB7IEFUVFI6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlWzFdID0gZVsxXS5yZXBsYWNlKHRlLCBuZSksIGVbM10gPSAoZVszXSB8fCBlWzRdIHx8IGVbNV0gfHwgXCJcIikucmVwbGFjZSh0ZSwgbmUpLCBcIn49XCIgPT09IGVbMl0gJiYgKGVbM10gPSBcIiBcIiArIGVbM10gKyBcIiBcIiksIGUuc2xpY2UoMCwgNCk7IH0sIENISUxEOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZVsxXSA9IGVbMV0udG9Mb3dlckNhc2UoKSwgXCJudGhcIiA9PT0gZVsxXS5zbGljZSgwLCAzKSA/IChlWzNdIHx8IHNlLmVycm9yKGVbMF0pLCBlWzRdID0gKyhlWzRdID8gZVs1XSArIChlWzZdIHx8IDEpIDogMiAqIChcImV2ZW5cIiA9PT0gZVszXSB8fCBcIm9kZFwiID09PSBlWzNdKSksIGVbNV0gPSArKGVbN10gKyBlWzhdIHx8IFwib2RkXCIgPT09IGVbM10pKSA6IGVbM10gJiYgc2UuZXJyb3IoZVswXSksIGU7IH0sIFBTRVVETzogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSAhZVs2XSAmJiBlWzJdOyByZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pID8gbnVsbCA6IChlWzNdID8gZVsyXSA9IGVbNF0gfHwgZVs1XSB8fCBcIlwiIDogbiAmJiBYLnRlc3QobikgJiYgKHQgPSBoKG4sICEwKSkgJiYgKHQgPSBuLmluZGV4T2YoXCIpXCIsIG4ubGVuZ3RoIC0gdCkgLSBuLmxlbmd0aCkgJiYgKGVbMF0gPSBlWzBdLnNsaWNlKDAsIHQpLCBlWzJdID0gbi5zbGljZSgwLCB0KSksIGUuc2xpY2UoMCwgMykpOyB9IH0sIGZpbHRlcjogeyBUQUc6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5yZXBsYWNlKHRlLCBuZSkudG9Mb3dlckNhc2UoKTsgcmV0dXJuIFwiKlwiID09PSBlID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gITA7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ub2RlTmFtZSAmJiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHQ7IH07IH0sIENMQVNTOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHBbZSArIFwiIFwiXTsgcmV0dXJuIHQgfHwgKHQgPSBuZXcgUmVnRXhwKFwiKF58XCIgKyBNICsgXCIpXCIgKyBlICsgXCIoXCIgKyBNICsgXCJ8JClcIikpICYmIHAoZSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHQudGVzdChcInN0cmluZ1wiID09IHR5cGVvZiBlLmNsYXNzTmFtZSAmJiBlLmNsYXNzTmFtZSB8fCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEF0dHJpYnV0ZSAmJiBlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpOyB9KTsgfSwgQVRUUjogZnVuY3Rpb24gKG4sIHIsIGkpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gc2UuYXR0cihlLCBuKTsgcmV0dXJuIG51bGwgPT0gdCA/IFwiIT1cIiA9PT0gciA6ICFyIHx8ICh0ICs9IFwiXCIsIFwiPVwiID09PSByID8gdCA9PT0gaSA6IFwiIT1cIiA9PT0gciA/IHQgIT09IGkgOiBcIl49XCIgPT09IHIgPyBpICYmIDAgPT09IHQuaW5kZXhPZihpKSA6IFwiKj1cIiA9PT0gciA/IGkgJiYgLTEgPCB0LmluZGV4T2YoaSkgOiBcIiQ9XCIgPT09IHIgPyBpICYmIHQuc2xpY2UoLWkubGVuZ3RoKSA9PT0gaSA6IFwifj1cIiA9PT0gciA/IC0xIDwgKFwiIFwiICsgdC5yZXBsYWNlKEYsIFwiIFwiKSArIFwiIFwiKS5pbmRleE9mKGkpIDogXCJ8PVwiID09PSByICYmICh0ID09PSBpIHx8IHQuc2xpY2UoMCwgaS5sZW5ndGggKyAxKSA9PT0gaSArIFwiLVwiKSk7IH07IH0sIENISUxEOiBmdW5jdGlvbiAoaCwgZSwgdCwgZywgdikgeyB2YXIgeSA9IFwibnRoXCIgIT09IGguc2xpY2UoMCwgMyksIG0gPSBcImxhc3RcIiAhPT0gaC5zbGljZSgtNCksIHggPSBcIm9mLXR5cGVcIiA9PT0gZTsgcmV0dXJuIDEgPT09IGcgJiYgMCA9PT0gdiA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiAhIWUucGFyZW50Tm9kZTsgfSA6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhLCBzLCB1LCBsID0geSAhPT0gbSA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsIGMgPSBlLnBhcmVudE5vZGUsIGYgPSB4ICYmIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgcCA9ICFuICYmICF4LCBkID0gITE7IGlmIChjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGEgPSBhW2xdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID8gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBmIDogMSA9PT0gYS5ub2RlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGwgPSBcIm9ubHlcIiA9PT0gaCAmJiAhdSAmJiBcIm5leHRTaWJsaW5nXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodSA9IFttID8gYy5maXJzdENoaWxkIDogYy5sYXN0Q2hpbGRdLCBtICYmIHApIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9IChzID0gKHIgPSAoaSA9IChvID0gKGEgPSBjKVtrXSB8fCAoYVtrXSA9IHt9KSlbYS51bmlxdWVJRF0gfHwgKG9bYS51bmlxdWVJRF0gPSB7fSkpW2hdIHx8IFtdKVswXSA9PT0gUyAmJiByWzFdKSAmJiByWzJdLCBhID0gcyAmJiBjLmNoaWxkTm9kZXNbc107XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhID0gKytzICYmIGEgJiYgYVtsXSB8fCAoZCA9IHMgPSAwKSB8fCB1LnBvcCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IGEubm9kZVR5cGUgJiYgKytkICYmIGEgPT09IGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpW2hdID0gW1MsIHMsIGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwICYmIChkID0gcyA9IChyID0gKGkgPSAobyA9IChhID0gZSlba10gfHwgKGFba10gPSB7fSkpW2EudW5pcXVlSURdIHx8IChvW2EudW5pcXVlSURdID0ge30pKVtoXSB8fCBbXSlbMF0gPT09IFMgJiYgclsxXSksICExID09PSBkKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYSA9ICsrcyAmJiBhICYmIGFbbF0gfHwgKGQgPSBzID0gMCkgfHwgdS5wb3AoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoeCA/IGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZiA6IDEgPT09IGEubm9kZVR5cGUpICYmICsrZCAmJiAocCAmJiAoKGkgPSAobyA9IGFba10gfHwgKGFba10gPSB7fSkpW2EudW5pcXVlSURdIHx8IChvW2EudW5pcXVlSURdID0ge30pKVtoXSA9IFtTLCBkXSksIGEgPT09IGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZCAtPSB2KSA9PT0gZyB8fCBkICUgZyA9PSAwICYmIDAgPD0gZCAvIGc7XG4gICAgICAgICAgICB9IH07IH0sIFBTRVVETzogZnVuY3Rpb24gKGUsIG8pIHsgdmFyIHQsIGEgPSBiLnBzZXVkb3NbZV0gfHwgYi5zZXRGaWx0ZXJzW2UudG9Mb3dlckNhc2UoKV0gfHwgc2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgZSk7IHJldHVybiBhW2tdID8gYShvKSA6IDEgPCBhLmxlbmd0aCA/ICh0ID0gW2UsIGUsIFwiXCIsIG9dLCBiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKSA/IGxlKGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gYShlLCBvKSwgaSA9IHIubGVuZ3RoOyB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIGVbbiA9IFAoZSwgcltpXSldID0gISh0W25dID0gcltpXSk7IH0pIDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGEoZSwgMCwgdCk7IH0pIDogYTsgfSB9LCBwc2V1ZG9zOiB7IG5vdDogbGUoZnVuY3Rpb24gKGUpIHsgdmFyIHIgPSBbXSwgaSA9IFtdLCBzID0gZihlLnJlcGxhY2UoQiwgXCIkMVwiKSk7IHJldHVybiBzW2tdID8gbGUoZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8gPSBzKGUsIG51bGwsIHIsIFtdKSwgYSA9IGUubGVuZ3RoOyB3aGlsZSAoYS0tKVxuICAgICAgICAgICAgICAgIChpID0gb1thXSkgJiYgKGVbYV0gPSAhKHRbYV0gPSBpKSk7IH0pIDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIHJbMF0gPSBlLCBzKHIsIG51bGwsIG4sIGkpLCByWzBdID0gbnVsbCwgIWkucG9wKCk7IH07IH0pLCBoYXM6IGxlKGZ1bmN0aW9uICh0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gMCA8IHNlKHQsIGUpLmxlbmd0aDsgfTsgfSksIGNvbnRhaW5zOiBsZShmdW5jdGlvbiAodCkgeyByZXR1cm4gdCA9IHQucmVwbGFjZSh0ZSwgbmUpLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gLTEgPCAoZS50ZXh0Q29udGVudCB8fCBvKGUpKS5pbmRleE9mKHQpOyB9OyB9KSwgbGFuZzogbGUoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIFYudGVzdChuIHx8IFwiXCIpIHx8IHNlLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBuKSwgbiA9IG4ucmVwbGFjZSh0ZSwgbmUpLnRvTG93ZXJDYXNlKCksIGZ1bmN0aW9uIChlKSB7IHZhciB0OyBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKHQgPSBFID8gZS5sYW5nIDogZS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlLmdldEF0dHJpYnV0ZShcImxhbmdcIikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodCA9IHQudG9Mb3dlckNhc2UoKSkgPT09IG4gfHwgMCA9PT0gdC5pbmRleE9mKG4gKyBcIi1cIik7XG4gICAgICAgICAgICB9IHdoaWxlICgoZSA9IGUucGFyZW50Tm9kZSkgJiYgMSA9PT0gZS5ub2RlVHlwZSk7IHJldHVybiAhMTsgfTsgfSksIHRhcmdldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBuLmxvY2F0aW9uICYmIG4ubG9jYXRpb24uaGFzaDsgcmV0dXJuIHQgJiYgdC5zbGljZSgxKSA9PT0gZS5pZDsgfSwgcm9vdDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPT09IGE7IH0sIGZvY3VzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA9PT0gQy5hY3RpdmVFbGVtZW50ICYmICghQy5oYXNGb2N1cyB8fCBDLmhhc0ZvY3VzKCkpICYmICEhKGUudHlwZSB8fCBlLmhyZWYgfHwgfmUudGFiSW5kZXgpOyB9LCBlbmFibGVkOiBnZSghMSksIGRpc2FibGVkOiBnZSghMCksIGNoZWNrZWQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOyByZXR1cm4gXCJpbnB1dFwiID09PSB0ICYmICEhZS5jaGVja2VkIHx8IFwib3B0aW9uXCIgPT09IHQgJiYgISFlLnNlbGVjdGVkOyB9LCBzZWxlY3RlZDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgITAgPT09IGUuc2VsZWN0ZWQ7IH0sIGVtcHR5OiBmdW5jdGlvbiAoZSkgeyBmb3IgKGUgPSBlLmZpcnN0Q2hpbGQ7IGU7IGUgPSBlLm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgIGlmIChlLm5vZGVUeXBlIDwgNilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExOyByZXR1cm4gITA7IH0sIHBhcmVudDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuICFiLnBzZXVkb3MuZW1wdHkoZSk7IH0sIGhlYWRlcjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEoudGVzdChlLm5vZGVOYW1lKTsgfSwgaW5wdXQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBRLnRlc3QoZS5ub2RlTmFtZSk7IH0sIGJ1dHRvbjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7IHJldHVybiBcImlucHV0XCIgPT09IHQgJiYgXCJidXR0b25cIiA9PT0gZS50eXBlIHx8IFwiYnV0dG9uXCIgPT09IHQ7IH0sIHRleHQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyByZXR1cm4gXCJpbnB1dFwiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgXCJ0ZXh0XCIgPT09IGUudHlwZSAmJiAobnVsbCA9PSAodCA9IGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgfHwgXCJ0ZXh0XCIgPT09IHQudG9Mb3dlckNhc2UoKSk7IH0sIGZpcnN0OiB2ZShmdW5jdGlvbiAoKSB7IHJldHVybiBbMF07IH0pLCBsYXN0OiB2ZShmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gW3QgLSAxXTsgfSksIGVxOiB2ZShmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gW24gPCAwID8gbiArIHQgOiBuXTsgfSksIGV2ZW46IHZlKGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdDsgbiArPSAyKVxuICAgICAgICAgICAgICAgIGUucHVzaChuKTsgcmV0dXJuIGU7IH0pLCBvZGQ6IHZlKGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSAxOyBuIDwgdDsgbiArPSAyKVxuICAgICAgICAgICAgICAgIGUucHVzaChuKTsgcmV0dXJuIGU7IH0pLCBsdDogdmUoZnVuY3Rpb24gKGUsIHQsIG4pIHsgZm9yICh2YXIgciA9IG4gPCAwID8gbiArIHQgOiB0IDwgbiA/IHQgOiBuOyAwIDw9IC0tcjspXG4gICAgICAgICAgICAgICAgZS5wdXNoKHIpOyByZXR1cm4gZTsgfSksIGd0OiB2ZShmdW5jdGlvbiAoZSwgdCwgbikgeyBmb3IgKHZhciByID0gbiA8IDAgPyBuICsgdCA6IG47ICsrciA8IHQ7KVxuICAgICAgICAgICAgICAgIGUucHVzaChyKTsgcmV0dXJuIGU7IH0pIH0gfSkucHNldWRvcy5udGggPSBiLnBzZXVkb3MuZXEsIHsgcmFkaW86ICEwLCBjaGVja2JveDogITAsIGZpbGU6ICEwLCBwYXNzd29yZDogITAsIGltYWdlOiAhMCB9KVxuICAgICAgICBiLnBzZXVkb3NbZV0gPSBkZShlKTsgZm9yIChlIGluIHsgc3VibWl0OiAhMCwgcmVzZXQ6ICEwIH0pXG4gICAgICAgIGIucHNldWRvc1tlXSA9IGhlKGUpOyBmdW5jdGlvbiBtZSgpIHsgfSBmdW5jdGlvbiB4ZShlKSB7IGZvciAodmFyIHQgPSAwLCBuID0gZS5sZW5ndGgsIHIgPSBcIlwiOyB0IDwgbjsgdCsrKVxuICAgICAgICByICs9IGVbdF0udmFsdWU7IHJldHVybiByOyB9IGZ1bmN0aW9uIGJlKHMsIGUsIHQpIHsgdmFyIHUgPSBlLmRpciwgbCA9IGUubmV4dCwgYyA9IGwgfHwgdSwgZiA9IHQgJiYgXCJwYXJlbnROb2RlXCIgPT09IGMsIHAgPSByKys7IHJldHVybiBlLmZpcnN0ID8gZnVuY3Rpb24gKGUsIHQsIG4pIHsgd2hpbGUgKGUgPSBlW3VdKVxuICAgICAgICBpZiAoMSA9PT0gZS5ub2RlVHlwZSB8fCBmKVxuICAgICAgICAgICAgcmV0dXJuIHMoZSwgdCwgbik7IHJldHVybiAhMTsgfSA6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhID0gW1MsIHBdOyBpZiAobikge1xuICAgICAgICB3aGlsZSAoZSA9IGVbdV0pXG4gICAgICAgICAgICBpZiAoKDEgPT09IGUubm9kZVR5cGUgfHwgZikgJiYgcyhlLCB0LCBuKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgd2hpbGUgKGUgPSBlW3VdKVxuICAgICAgICAgICAgaWYgKDEgPT09IGUubm9kZVR5cGUgfHwgZilcbiAgICAgICAgICAgICAgICBpZiAoaSA9IChvID0gZVtrXSB8fCAoZVtrXSA9IHt9KSlbZS51bmlxdWVJRF0gfHwgKG9bZS51bmlxdWVJRF0gPSB7fSksIGwgJiYgbCA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICBlID0gZVt1XSB8fCBlO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHIgPSBpW2NdKSAmJiByWzBdID09PSBTICYmIHJbMV0gPT09IHApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVsyXSA9IHJbMl07XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaVtjXSA9IGEpWzJdID0gcyhlLCB0LCBuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9IHJldHVybiAhMTsgfTsgfSBmdW5jdGlvbiB3ZShpKSB7IHJldHVybiAxIDwgaS5sZW5ndGggPyBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IGkubGVuZ3RoOyB3aGlsZSAoci0tKVxuICAgICAgICBpZiAoIWlbcl0oZSwgdCwgbikpXG4gICAgICAgICAgICByZXR1cm4gITE7IHJldHVybiAhMDsgfSA6IGlbMF07IH0gZnVuY3Rpb24gVGUoZSwgdCwgbiwgciwgaSkgeyBmb3IgKHZhciBvLCBhID0gW10sIHMgPSAwLCB1ID0gZS5sZW5ndGgsIGwgPSBudWxsICE9IHQ7IHMgPCB1OyBzKyspXG4gICAgICAgIChvID0gZVtzXSkgJiYgKG4gJiYgIW4obywgciwgaSkgfHwgKGEucHVzaChvKSwgbCAmJiB0LnB1c2gocykpKTsgcmV0dXJuIGE7IH0gZnVuY3Rpb24gQ2UoZCwgaCwgZywgdiwgeSwgZSkgeyByZXR1cm4gdiAmJiAhdltrXSAmJiAodiA9IENlKHYpKSwgeSAmJiAheVtrXSAmJiAoeSA9IENlKHksIGUpKSwgbGUoZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMgPSBbXSwgdSA9IFtdLCBsID0gdC5sZW5ndGgsIGMgPSBlIHx8IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGZvciAodmFyIHIgPSAwLCBpID0gdC5sZW5ndGg7IHIgPCBpOyByKyspXG4gICAgICAgIHNlKGUsIHRbcl0sIG4pOyByZXR1cm4gbjsgfShoIHx8IFwiKlwiLCBuLm5vZGVUeXBlID8gW25dIDogbiwgW10pLCBmID0gIWQgfHwgIWUgJiYgaCA/IGMgOiBUZShjLCBzLCBkLCBuLCByKSwgcCA9IGcgPyB5IHx8IChlID8gZCA6IGwgfHwgdikgPyBbXSA6IHQgOiBmOyBpZiAoZyAmJiBnKGYsIHAsIG4sIHIpLCB2KSB7XG4gICAgICAgIGkgPSBUZShwLCB1KSwgdihpLCBbXSwgbiwgciksIG8gPSBpLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKG8tLSlcbiAgICAgICAgICAgIChhID0gaVtvXSkgJiYgKHBbdVtvXV0gPSAhKGZbdVtvXV0gPSBhKSk7XG4gICAgfSBpZiAoZSkge1xuICAgICAgICBpZiAoeSB8fCBkKSB7XG4gICAgICAgICAgICBpZiAoeSkge1xuICAgICAgICAgICAgICAgIGkgPSBbXSwgbyA9IHAubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvLS0pXG4gICAgICAgICAgICAgICAgICAgIChhID0gcFtvXSkgJiYgaS5wdXNoKGZbb10gPSBhKTtcbiAgICAgICAgICAgICAgICB5KG51bGwsIHAgPSBbXSwgaSwgcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvID0gcC5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoby0tKVxuICAgICAgICAgICAgICAgIChhID0gcFtvXSkgJiYgLTEgPCAoaSA9IHkgPyBQKGUsIGEpIDogc1tvXSkgJiYgKGVbaV0gPSAhKHRbaV0gPSBhKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBwID0gVGUocCA9PT0gdCA/IHAuc3BsaWNlKGwsIHAubGVuZ3RoKSA6IHApLCB5ID8geShudWxsLCB0LCBwLCByKSA6IEguYXBwbHkodCwgcCk7IH0pOyB9IGZ1bmN0aW9uIEVlKGUpIHsgZm9yICh2YXIgaSwgdCwgbiwgciA9IGUubGVuZ3RoLCBvID0gYi5yZWxhdGl2ZVtlWzBdLnR5cGVdLCBhID0gbyB8fCBiLnJlbGF0aXZlW1wiIFwiXSwgcyA9IG8gPyAxIDogMCwgdSA9IGJlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID09PSBpOyB9LCBhLCAhMCksIGwgPSBiZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gLTEgPCBQKGksIGUpOyB9LCBhLCAhMCksIGMgPSBbZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSAhbyAmJiAobiB8fCB0ICE9PSB3KSB8fCAoKGkgPSB0KS5ub2RlVHlwZSA/IHUoZSwgdCwgbikgOiBsKGUsIHQsIG4pKTsgcmV0dXJuIGkgPSBudWxsLCByOyB9XTsgcyA8IHI7IHMrKylcbiAgICAgICAgaWYgKHQgPSBiLnJlbGF0aXZlW2Vbc10udHlwZV0pXG4gICAgICAgICAgICBjID0gW2JlKHdlKGMpLCB0KV07XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCh0ID0gYi5maWx0ZXJbZVtzXS50eXBlXS5hcHBseShudWxsLCBlW3NdLm1hdGNoZXMpKVtrXSkge1xuICAgICAgICAgICAgICAgIGZvciAobiA9ICsrczsgbiA8IHI7IG4rKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIucmVsYXRpdmVbZVtuXS50eXBlXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHJldHVybiBDZSgxIDwgcyAmJiB3ZShjKSwgMSA8IHMgJiYgeGUoZS5zbGljZSgwLCBzIC0gMSkuY29uY2F0KHsgdmFsdWU6IFwiIFwiID09PSBlW3MgLSAyXS50eXBlID8gXCIqXCIgOiBcIlwiIH0pKS5yZXBsYWNlKEIsIFwiJDFcIiksIHQsIHMgPCBuICYmIEVlKGUuc2xpY2UocywgbikpLCBuIDwgciAmJiBFZShlID0gZS5zbGljZShuKSksIG4gPCByICYmIHhlKGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMucHVzaCh0KTtcbiAgICAgICAgfSByZXR1cm4gd2UoYyk7IH0gcmV0dXJuIG1lLnByb3RvdHlwZSA9IGIuZmlsdGVycyA9IGIucHNldWRvcywgYi5zZXRGaWx0ZXJzID0gbmV3IG1lLCBoID0gc2UudG9rZW5pemUgPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciwgaSwgbywgYSwgcywgdSwgbCA9IHhbZSArIFwiIFwiXTsgaWYgKGwpXG4gICAgICAgIHJldHVybiB0ID8gMCA6IGwuc2xpY2UoMCk7IGEgPSBlLCBzID0gW10sIHUgPSBiLnByZUZpbHRlcjsgd2hpbGUgKGEpIHtcbiAgICAgICAgZm9yIChvIGluIG4gJiYgIShyID0gXy5leGVjKGEpKSB8fCAociAmJiAoYSA9IGEuc2xpY2UoclswXS5sZW5ndGgpIHx8IGEpLCBzLnB1c2goaSA9IFtdKSksIG4gPSAhMSwgKHIgPSB6LmV4ZWMoYSkpICYmIChuID0gci5zaGlmdCgpLCBpLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogclswXS5yZXBsYWNlKEIsIFwiIFwiKSB9KSwgYSA9IGEuc2xpY2Uobi5sZW5ndGgpKSwgYi5maWx0ZXIpXG4gICAgICAgICAgICAhKHIgPSBHW29dLmV4ZWMoYSkpIHx8IHVbb10gJiYgIShyID0gdVtvXShyKSkgfHwgKG4gPSByLnNoaWZ0KCksIGkucHVzaCh7IHZhbHVlOiBuLCB0eXBlOiBvLCBtYXRjaGVzOiByIH0pLCBhID0gYS5zbGljZShuLmxlbmd0aCkpO1xuICAgICAgICBpZiAoIW4pXG4gICAgICAgICAgICBicmVhaztcbiAgICB9IHJldHVybiB0ID8gYS5sZW5ndGggOiBhID8gc2UuZXJyb3IoZSkgOiB4KGUsIHMpLnNsaWNlKDApOyB9LCBmID0gc2UuY29tcGlsZSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCB2LCB5LCBtLCB4LCByLCBpID0gW10sIG8gPSBbXSwgYSA9IE5bZSArIFwiIFwiXTsgaWYgKCFhKSB7XG4gICAgICAgIHQgfHwgKHQgPSBoKGUpKSwgbiA9IHQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobi0tKVxuICAgICAgICAgICAgKGEgPSBFZSh0W25dKSlba10gPyBpLnB1c2goYSkgOiBvLnB1c2goYSk7XG4gICAgICAgIChhID0gTihlLCAodiA9IG8sIG0gPSAwIDwgKHkgPSBpKS5sZW5ndGgsIHggPSAwIDwgdi5sZW5ndGgsIHIgPSBmdW5jdGlvbiAoZSwgdCwgbiwgciwgaSkgeyB2YXIgbywgYSwgcywgdSA9IDAsIGwgPSBcIjBcIiwgYyA9IGUgJiYgW10sIGYgPSBbXSwgcCA9IHcsIGQgPSBlIHx8IHggJiYgYi5maW5kLlRBRyhcIipcIiwgaSksIGggPSBTICs9IG51bGwgPT0gcCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IC4xLCBnID0gZC5sZW5ndGg7IGZvciAoaSAmJiAodyA9IHQgPT09IEMgfHwgdCB8fCBpKTsgbCAhPT0gZyAmJiBudWxsICE9IChvID0gZFtsXSk7IGwrKykge1xuICAgICAgICAgICAgaWYgKHggJiYgbykge1xuICAgICAgICAgICAgICAgIGEgPSAwLCB0IHx8IG8ub3duZXJEb2N1bWVudCA9PT0gQyB8fCAoVChvKSwgbiA9ICFFKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocyA9IHZbYSsrXSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMobywgdCB8fCBDLCBuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpICYmIChTID0gaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtICYmICgobyA9ICFzICYmIG8pICYmIHUtLSwgZSAmJiBjLnB1c2gobykpO1xuICAgICAgICB9IGlmICh1ICs9IGwsIG0gJiYgbCAhPT0gdSkge1xuICAgICAgICAgICAgYSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAocyA9IHlbYSsrXSlcbiAgICAgICAgICAgICAgICBzKGMsIGYsIHQsIG4pO1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHUpXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pXG4gICAgICAgICAgICAgICAgICAgICAgICBjW2xdIHx8IGZbbF0gfHwgKGZbbF0gPSBxLmNhbGwocikpO1xuICAgICAgICAgICAgICAgIGYgPSBUZShmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEguYXBwbHkociwgZiksIGkgJiYgIWUgJiYgMCA8IGYubGVuZ3RoICYmIDEgPCB1ICsgeS5sZW5ndGggJiYgc2UudW5pcXVlU29ydChyKTtcbiAgICAgICAgfSByZXR1cm4gaSAmJiAoUyA9IGgsIHcgPSBwKSwgYzsgfSwgbSA/IGxlKHIpIDogcikpKS5zZWxlY3RvciA9IGU7XG4gICAgfSByZXR1cm4gYTsgfSwgZyA9IHNlLnNlbGVjdCA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhLCBzLCB1LCBsID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlICYmIGUsIGMgPSAhciAmJiBoKGUgPSBsLnNlbGVjdG9yIHx8IGUpOyBpZiAobiA9IG4gfHwgW10sIDEgPT09IGMubGVuZ3RoKSB7XG4gICAgICAgIGlmICgyIDwgKG8gPSBjWzBdID0gY1swXS5zbGljZSgwKSkubGVuZ3RoICYmIFwiSURcIiA9PT0gKGEgPSBvWzBdKS50eXBlICYmIDkgPT09IHQubm9kZVR5cGUgJiYgRSAmJiBiLnJlbGF0aXZlW29bMV0udHlwZV0pIHtcbiAgICAgICAgICAgIGlmICghKHQgPSAoYi5maW5kLklEKGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLCBuZSksIHQpIHx8IFtdKVswXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICBsICYmICh0ID0gdC5wYXJlbnROb2RlKSwgZSA9IGUuc2xpY2Uoby5zaGlmdCgpLnZhbHVlLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IEcubmVlZHNDb250ZXh0LnRlc3QoZSkgPyAwIDogby5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChhID0gb1tpXSwgYi5yZWxhdGl2ZVtzID0gYS50eXBlXSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmICgodSA9IGIuZmluZFtzXSkgJiYgKHIgPSB1KGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLCBuZSksIGVlLnRlc3Qob1swXS50eXBlKSAmJiB5ZSh0LnBhcmVudE5vZGUpIHx8IHQpKSkge1xuICAgICAgICAgICAgICAgIGlmIChvLnNwbGljZShpLCAxKSwgIShlID0gci5sZW5ndGggJiYgeGUobykpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSC5hcHBseShuLCByKSwgbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIChsIHx8IGYoZSwgYykpKHIsIHQsICFFLCBuLCAhdCB8fCBlZS50ZXN0KGUpICYmIHllKHQucGFyZW50Tm9kZSkgfHwgdCksIG47IH0sIGQuc29ydFN0YWJsZSA9IGsuc3BsaXQoXCJcIikuc29ydChEKS5qb2luKFwiXCIpID09PSBrLCBkLmRldGVjdER1cGxpY2F0ZXMgPSAhIWwsIFQoKSwgZC5zb3J0RGV0YWNoZWQgPSBjZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gMSAmIGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oQy5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikpOyB9KSwgY2UoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCIsIFwiI1wiID09PSBlLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTsgfSkgfHwgZmUoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7IGlmICghbilcbiAgICAgICAgcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsIFwidHlwZVwiID09PSB0LnRvTG93ZXJDYXNlKCkgPyAxIDogMik7IH0pLCBkLmF0dHJpYnV0ZXMgJiYgY2UoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiLCBlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJcIiksIFwiXCIgPT09IGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTsgfSkgfHwgZmUoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoZSwgdCwgbikgeyBpZiAoIW4gJiYgXCJpbnB1dFwiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIHJldHVybiBlLmRlZmF1bHRWYWx1ZTsgfSksIGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsID09IGUuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIik7IH0pIHx8IGZlKFIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByOyBpZiAoIW4pXG4gICAgICAgIHJldHVybiAhMCA9PT0gZVt0XSA/IHQudG9Mb3dlckNhc2UoKSA6IChyID0gZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSAmJiByLnNwZWNpZmllZCA/IHIudmFsdWUgOiBudWxsOyB9KSwgc2U7IH0oQyk7XG4gICAgay5maW5kID0gaCwgay5leHByID0gaC5zZWxlY3RvcnMsIGsuZXhwcltcIjpcIl0gPSBrLmV4cHIucHNldWRvcywgay51bmlxdWVTb3J0ID0gay51bmlxdWUgPSBoLnVuaXF1ZVNvcnQsIGsudGV4dCA9IGguZ2V0VGV4dCwgay5pc1hNTERvYyA9IGguaXNYTUwsIGsuY29udGFpbnMgPSBoLmNvbnRhaW5zLCBrLmVzY2FwZVNlbGVjdG9yID0gaC5lc2NhcGU7XG4gICAgdmFyIFQgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IFtdLCBpID0gdm9pZCAwICE9PSBuOyB3aGlsZSAoKGUgPSBlW3RdKSAmJiA5ICE9PSBlLm5vZGVUeXBlKVxuICAgICAgICBpZiAoMSA9PT0gZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGkgJiYgayhlKS5pcyhuKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHIucHVzaChlKTtcbiAgICAgICAgfSByZXR1cm4gcjsgfSwgUyA9IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSBbXTsgZTsgZSA9IGUubmV4dFNpYmxpbmcpXG4gICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgZSAhPT0gdCAmJiBuLnB1c2goZSk7IHJldHVybiBuOyB9LCBOID0gay5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcbiAgICBmdW5jdGlvbiBBKGUsIHQpIHsgcmV0dXJuIGUubm9kZU5hbWUgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0LnRvTG93ZXJDYXNlKCk7IH1cbiAgICB2YXIgRCA9IC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pO1xuICAgIGZ1bmN0aW9uIGooZSwgbiwgcikgeyByZXR1cm4gbShuKSA/IGsuZ3JlcChlLCBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gISFuLmNhbGwoZSwgdCwgZSkgIT09IHI7IH0pIDogbi5ub2RlVHlwZSA/IGsuZ3JlcChlLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA9PT0gbiAhPT0gcjsgfSkgOiBcInN0cmluZ1wiICE9IHR5cGVvZiBuID8gay5ncmVwKGUsIGZ1bmN0aW9uIChlKSB7IHJldHVybiAtMSA8IGkuY2FsbChuLCBlKSAhPT0gcjsgfSkgOiBrLmZpbHRlcihuLCBlLCByKTsgfVxuICAgIGsuZmlsdGVyID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSB0WzBdOyByZXR1cm4gbiAmJiAoZSA9IFwiOm5vdChcIiArIGUgKyBcIilcIiksIDEgPT09IHQubGVuZ3RoICYmIDEgPT09IHIubm9kZVR5cGUgPyBrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHIsIGUpID8gW3JdIDogW10gOiBrLmZpbmQubWF0Y2hlcyhlLCBrLmdyZXAodCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIDEgPT09IGUubm9kZVR5cGU7IH0pKTsgfSwgay5mbi5leHRlbmQoeyBmaW5kOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciA9IHRoaXMubGVuZ3RoLCBpID0gdGhpczsgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soayhlKS5maWx0ZXIoZnVuY3Rpb24gKCkgeyBmb3IgKHQgPSAwOyB0IDwgcjsgdCsrKVxuICAgICAgICAgICAgICAgIGlmIChrLmNvbnRhaW5zKGlbdF0sIHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7IH0pKTsgZm9yIChuID0gdGhpcy5wdXNoU3RhY2soW10pLCB0ID0gMDsgdCA8IHI7IHQrKylcbiAgICAgICAgICAgIGsuZmluZChlLCBpW3RdLCBuKTsgcmV0dXJuIDEgPCByID8gay51bmlxdWVTb3J0KG4pIDogbjsgfSwgZmlsdGVyOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLCBlIHx8IFtdLCAhMSkpOyB9LCBub3Q6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsIGUgfHwgW10sICEwKSk7IH0sIGlzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gISFqKHRoaXMsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgTi50ZXN0KGUpID8gayhlKSA6IGUgfHwgW10sICExKS5sZW5ndGg7IH0gfSk7XG4gICAgdmFyIHEsIEwgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLztcbiAgICAoay5mbi5pbml0ID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGk7IGlmICghZSlcbiAgICAgICAgcmV0dXJuIHRoaXM7IGlmIChuID0gbiB8fCBxLCBcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICAgIGlmICghKHIgPSBcIjxcIiA9PT0gZVswXSAmJiBcIj5cIiA9PT0gZVtlLmxlbmd0aCAtIDFdICYmIDMgPD0gZS5sZW5ndGggPyBbbnVsbCwgZSwgbnVsbF0gOiBMLmV4ZWMoZSkpIHx8ICFyWzFdICYmIHQpXG4gICAgICAgICAgICByZXR1cm4gIXQgfHwgdC5qcXVlcnkgPyAodCB8fCBuKS5maW5kKGUpIDogdGhpcy5jb25zdHJ1Y3Rvcih0KS5maW5kKGUpO1xuICAgICAgICBpZiAoclsxXSkge1xuICAgICAgICAgICAgaWYgKHQgPSB0IGluc3RhbmNlb2YgayA/IHRbMF0gOiB0LCBrLm1lcmdlKHRoaXMsIGsucGFyc2VIVE1MKHJbMV0sIHQgJiYgdC5ub2RlVHlwZSA/IHQub3duZXJEb2N1bWVudCB8fCB0IDogRSwgITApKSwgRC50ZXN0KHJbMV0pICYmIGsuaXNQbGFpbk9iamVjdCh0KSlcbiAgICAgICAgICAgICAgICBmb3IgKHIgaW4gdClcbiAgICAgICAgICAgICAgICAgICAgbSh0aGlzW3JdKSA/IHRoaXNbcl0odFtyXSkgOiB0aGlzLmF0dHIociwgdFtyXSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGkgPSBFLmdldEVsZW1lbnRCeUlkKHJbMl0pKSAmJiAodGhpc1swXSA9IGksIHRoaXMubGVuZ3RoID0gMSksIHRoaXM7XG4gICAgfSByZXR1cm4gZS5ub2RlVHlwZSA/ICh0aGlzWzBdID0gZSwgdGhpcy5sZW5ndGggPSAxLCB0aGlzKSA6IG0oZSkgPyB2b2lkIDAgIT09IG4ucmVhZHkgPyBuLnJlYWR5KGUpIDogZShrKSA6IGsubWFrZUFycmF5KGUsIHRoaXMpOyB9KS5wcm90b3R5cGUgPSBrLmZuLCBxID0gayhFKTtcbiAgICB2YXIgSCA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLCBPID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07XG4gICAgZnVuY3Rpb24gUChlLCB0KSB7IHdoaWxlICgoZSA9IGVbdF0pICYmIDEgIT09IGUubm9kZVR5cGUpXG4gICAgICAgIDsgcmV0dXJuIGU7IH1cbiAgICBrLmZuLmV4dGVuZCh7IGhhczogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBrKGUsIHRoaXMpLCBuID0gdC5sZW5ndGg7IHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoKSB7IGZvciAodmFyIGUgPSAwOyBlIDwgbjsgZSsrKVxuICAgICAgICAgICAgaWYgKGsuY29udGFpbnModGhpcywgdFtlXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuICEwOyB9KTsgfSwgY2xvc2VzdDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSAwLCBpID0gdGhpcy5sZW5ndGgsIG8gPSBbXSwgYSA9IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgayhlKTsgaWYgKCFOLnRlc3QoZSkpXG4gICAgICAgICAgICBmb3IgKDsgciA8IGk7IHIrKylcbiAgICAgICAgICAgICAgICBmb3IgKG4gPSB0aGlzW3JdOyBuICYmIG4gIT09IHQ7IG4gPSBuLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLm5vZGVUeXBlIDwgMTEgJiYgKGEgPyAtMSA8IGEuaW5kZXgobikgOiAxID09PSBuLm5vZGVUeXBlICYmIGsuZmluZC5tYXRjaGVzU2VsZWN0b3IobiwgZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSByZXR1cm4gdGhpcy5wdXNoU3RhY2soMSA8IG8ubGVuZ3RoID8gay51bmlxdWVTb3J0KG8pIDogbyk7IH0sIGluZGV4OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBpLmNhbGwoayhlKSwgdGhpc1swXSkgOiBpLmNhbGwodGhpcywgZS5qcXVlcnkgPyBlWzBdIDogZSkgOiB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7IH0sIGFkZDogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKGsudW5pcXVlU29ydChrLm1lcmdlKHRoaXMuZ2V0KCksIGsoZSwgdCkpKSk7IH0sIGFkZEJhY2s6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLmFkZChudWxsID09IGUgPyB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKTsgfSB9KSwgay5lYWNoKHsgcGFyZW50OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUucGFyZW50Tm9kZTsgcmV0dXJuIHQgJiYgMTEgIT09IHQubm9kZVR5cGUgPyB0IDogbnVsbDsgfSwgcGFyZW50czogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFQoZSwgXCJwYXJlbnROb2RlXCIpOyB9LCBwYXJlbnRzVW50aWw6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBUKGUsIFwicGFyZW50Tm9kZVwiLCBuKTsgfSwgbmV4dDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFAoZSwgXCJuZXh0U2libGluZ1wiKTsgfSwgcHJldjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFAoZSwgXCJwcmV2aW91c1NpYmxpbmdcIik7IH0sIG5leHRBbGw6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBUKGUsIFwibmV4dFNpYmxpbmdcIik7IH0sIHByZXZBbGw6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBUKGUsIFwicHJldmlvdXNTaWJsaW5nXCIpOyB9LCBuZXh0VW50aWw6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBUKGUsIFwibmV4dFNpYmxpbmdcIiwgbik7IH0sIHByZXZVbnRpbDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIFQoZSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgbik7IH0sIHNpYmxpbmdzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gUygoZS5wYXJlbnROb2RlIHx8IHt9KS5maXJzdENoaWxkLCBlKTsgfSwgY2hpbGRyZW46IGZ1bmN0aW9uIChlKSB7IHJldHVybiBTKGUuZmlyc3RDaGlsZCk7IH0sIGNvbnRlbnRzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5jb250ZW50RG9jdW1lbnQgPyBlLmNvbnRlbnREb2N1bWVudCA6IChBKGUsIFwidGVtcGxhdGVcIikgJiYgKGUgPSBlLmNvbnRlbnQgfHwgZSksIGsubWVyZ2UoW10sIGUuY2hpbGROb2RlcykpOyB9IH0sIGZ1bmN0aW9uIChyLCBpKSB7IGsuZm5bcl0gPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGsubWFwKHRoaXMsIGksIGUpOyByZXR1cm4gXCJVbnRpbFwiICE9PSByLnNsaWNlKC01KSAmJiAodCA9IGUpLCB0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSBrLmZpbHRlcih0LCBuKSksIDEgPCB0aGlzLmxlbmd0aCAmJiAoT1tyXSB8fCBrLnVuaXF1ZVNvcnQobiksIEgudGVzdChyKSAmJiBuLnJldmVyc2UoKSksIHRoaXMucHVzaFN0YWNrKG4pOyB9OyB9KTtcbiAgICB2YXIgUiA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztcbiAgICBmdW5jdGlvbiBNKGUpIHsgcmV0dXJuIGU7IH1cbiAgICBmdW5jdGlvbiBJKGUpIHsgdGhyb3cgZTsgfVxuICAgIGZ1bmN0aW9uIFcoZSwgdCwgbiwgcikgeyB2YXIgaTsgdHJ5IHtcbiAgICAgICAgZSAmJiBtKGkgPSBlLnByb21pc2UpID8gaS5jYWxsKGUpLmRvbmUodCkuZmFpbChuKSA6IGUgJiYgbShpID0gZS50aGVuKSA/IGkuY2FsbChlLCB0LCBuKSA6IHQuYXBwbHkodm9pZCAwLCBbZV0uc2xpY2UocikpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBuLmFwcGx5KHZvaWQgMCwgW2VdKTtcbiAgICB9IH1cbiAgICBrLkNhbGxiYWNrcyA9IGZ1bmN0aW9uIChyKSB7IHZhciBlLCBuOyByID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgciA/IChlID0gciwgbiA9IHt9LCBrLmVhY2goZS5tYXRjaChSKSB8fCBbXSwgZnVuY3Rpb24gKGUsIHQpIHsgblt0XSA9ICEwOyB9KSwgbikgOiBrLmV4dGVuZCh7fSwgcik7IHZhciBpLCB0LCBvLCBhLCBzID0gW10sIHUgPSBbXSwgbCA9IC0xLCBjID0gZnVuY3Rpb24gKCkgeyBmb3IgKGEgPSBhIHx8IHIub25jZSwgbyA9IGkgPSAhMDsgdS5sZW5ndGg7IGwgPSAtMSkge1xuICAgICAgICB0ID0gdS5zaGlmdCgpO1xuICAgICAgICB3aGlsZSAoKytsIDwgcy5sZW5ndGgpXG4gICAgICAgICAgICAhMSA9PT0gc1tsXS5hcHBseSh0WzBdLCB0WzFdKSAmJiByLnN0b3BPbkZhbHNlICYmIChsID0gcy5sZW5ndGgsIHQgPSAhMSk7XG4gICAgfSByLm1lbW9yeSB8fCAodCA9ICExKSwgaSA9ICExLCBhICYmIChzID0gdCA/IFtdIDogXCJcIik7IH0sIGYgPSB7IGFkZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcyAmJiAodCAmJiAhaSAmJiAobCA9IHMubGVuZ3RoIC0gMSwgdS5wdXNoKHQpKSwgZnVuY3Rpb24gbihlKSB7IGsuZWFjaChlLCBmdW5jdGlvbiAoZSwgdCkgeyBtKHQpID8gci51bmlxdWUgJiYgZi5oYXModCkgfHwgcy5wdXNoKHQpIDogdCAmJiB0Lmxlbmd0aCAmJiBcInN0cmluZ1wiICE9PSB3KHQpICYmIG4odCk7IH0pOyB9KGFyZ3VtZW50cyksIHQgJiYgIWkgJiYgYygpKSwgdGhpczsgfSwgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBrLmVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbjsgd2hpbGUgKC0xIDwgKG4gPSBrLmluQXJyYXkodCwgcywgbikpKVxuICAgICAgICAgICAgcy5zcGxpY2UobiwgMSksIG4gPD0gbCAmJiBsLS07IH0pLCB0aGlzOyB9LCBoYXM6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID8gLTEgPCBrLmluQXJyYXkoZSwgcykgOiAwIDwgcy5sZW5ndGg7IH0sIGVtcHR5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzICYmIChzID0gW10pLCB0aGlzOyB9LCBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBhID0gdSA9IFtdLCBzID0gdCA9IFwiXCIsIHRoaXM7IH0sIGRpc2FibGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiAhczsgfSwgbG9jazogZnVuY3Rpb24gKCkgeyByZXR1cm4gYSA9IHUgPSBbXSwgdCB8fCBpIHx8IChzID0gdCA9IFwiXCIpLCB0aGlzOyB9LCBsb2NrZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhYTsgfSwgZmlyZVdpdGg6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBhIHx8ICh0ID0gW2UsICh0ID0gdCB8fCBbXSkuc2xpY2UgPyB0LnNsaWNlKCkgOiB0XSwgdS5wdXNoKHQpLCBpIHx8IGMoKSksIHRoaXM7IH0sIGZpcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGYuZmlyZVdpdGgodGhpcywgYXJndW1lbnRzKSwgdGhpczsgfSwgZmlyZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhbzsgfSB9OyByZXR1cm4gZjsgfSwgay5leHRlbmQoeyBEZWZlcnJlZDogZnVuY3Rpb24gKGUpIHsgdmFyIG8gPSBbW1wibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgay5DYWxsYmFja3MoXCJtZW1vcnlcIiksIGsuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLCAyXSwgW1wicmVzb2x2ZVwiLCBcImRvbmVcIiwgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMCwgXCJyZXNvbHZlZFwiXSwgW1wicmVqZWN0XCIsIFwiZmFpbFwiLCBrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAxLCBcInJlamVjdGVkXCJdXSwgaSA9IFwicGVuZGluZ1wiLCBhID0geyBzdGF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gaTsgfSwgYWx3YXlzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksIHRoaXM7IH0sIFwiY2F0Y2hcIjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGEudGhlbihudWxsLCBlKTsgfSwgcGlwZTogZnVuY3Rpb24gKCkgeyB2YXIgaSA9IGFyZ3VtZW50czsgcmV0dXJuIGsuRGVmZXJyZWQoZnVuY3Rpb24gKHIpIHsgay5lYWNoKG8sIGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gbShpW3RbNF1dKSAmJiBpW3RbNF1dOyBzW3RbMV1dKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBuICYmIG4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgZSAmJiBtKGUucHJvbWlzZSkgPyBlLnByb21pc2UoKS5wcm9ncmVzcyhyLm5vdGlmeSkuZG9uZShyLnJlc29sdmUpLmZhaWwoci5yZWplY3QpIDogclt0WzBdICsgXCJXaXRoXCJdKHRoaXMsIG4gPyBbZV0gOiBhcmd1bWVudHMpOyB9KTsgfSksIGkgPSBudWxsOyB9KS5wcm9taXNlKCk7IH0sIHRoZW46IGZ1bmN0aW9uICh0LCBuLCByKSB7IHZhciB1ID0gMDsgZnVuY3Rpb24gbChpLCBvLCBhLCBzKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBuID0gdGhpcywgciA9IGFyZ3VtZW50cywgZSA9IGZ1bmN0aW9uICgpIHsgdmFyIGUsIHQ7IGlmICghKGkgPCB1KSkge1xuICAgICAgICAgICAgICAgIGlmICgoZSA9IGEuYXBwbHkobiwgcikpID09PSBvLnByb21pc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTtcbiAgICAgICAgICAgICAgICB0ID0gZSAmJiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpICYmIGUudGhlbiwgbSh0KSA/IHMgPyB0LmNhbGwoZSwgbCh1LCBvLCBNLCBzKSwgbCh1LCBvLCBJLCBzKSkgOiAodSsrLCB0LmNhbGwoZSwgbCh1LCBvLCBNLCBzKSwgbCh1LCBvLCBJLCBzKSwgbCh1LCBvLCBNLCBvLm5vdGlmeVdpdGgpKSkgOiAoYSAhPT0gTSAmJiAobiA9IHZvaWQgMCwgciA9IFtlXSksIChzIHx8IG8ucmVzb2x2ZVdpdGgpKG4sIHIpKTtcbiAgICAgICAgICAgIH0gfSwgdCA9IHMgPyBlIDogZnVuY3Rpb24gKCkgeyB0cnkge1xuICAgICAgICAgICAgICAgIGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgay5EZWZlcnJlZC5leGNlcHRpb25Ib29rICYmIGsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLCB0LnN0YWNrVHJhY2UpLCB1IDw9IGkgKyAxICYmIChhICE9PSBJICYmIChuID0gdm9pZCAwLCByID0gW2VdKSwgby5yZWplY3RXaXRoKG4sIHIpKTtcbiAgICAgICAgICAgIH0gfTsgaSA/IHQoKSA6IChrLkRlZmVycmVkLmdldFN0YWNrSG9vayAmJiAodC5zdGFja1RyYWNlID0gay5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksIEMuc2V0VGltZW91dCh0KSk7IH07IH0gcmV0dXJuIGsuRGVmZXJyZWQoZnVuY3Rpb24gKGUpIHsgb1swXVszXS5hZGQobCgwLCBlLCBtKHIpID8gciA6IE0sIGUubm90aWZ5V2l0aCkpLCBvWzFdWzNdLmFkZChsKDAsIGUsIG0odCkgPyB0IDogTSkpLCBvWzJdWzNdLmFkZChsKDAsIGUsIG0obikgPyBuIDogSSkpOyB9KS5wcm9taXNlKCk7IH0sIHByb21pc2U6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsICE9IGUgPyBrLmV4dGVuZChlLCBhKSA6IGE7IH0gfSwgcyA9IHt9OyByZXR1cm4gay5lYWNoKG8sIGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdFsyXSwgciA9IHRbNV07IGFbdFsxXV0gPSBuLmFkZCwgciAmJiBuLmFkZChmdW5jdGlvbiAoKSB7IGkgPSByOyB9LCBvWzMgLSBlXVsyXS5kaXNhYmxlLCBvWzMgLSBlXVszXS5kaXNhYmxlLCBvWzBdWzJdLmxvY2ssIG9bMF1bM10ubG9jayksIG4uYWRkKHRbM10uZmlyZSksIHNbdFswXV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzW3RbMF0gKyBcIldpdGhcIl0odGhpcyA9PT0gcyA/IHZvaWQgMCA6IHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7IH0sIHNbdFswXSArIFwiV2l0aFwiXSA9IG4uZmlyZVdpdGg7IH0pLCBhLnByb21pc2UocyksIGUgJiYgZS5jYWxsKHMsIHMpLCBzOyB9LCB3aGVuOiBmdW5jdGlvbiAoZSkgeyB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHQgPSBuLCByID0gQXJyYXkodCksIGkgPSBzLmNhbGwoYXJndW1lbnRzKSwgbyA9IGsuRGVmZXJyZWQoKSwgYSA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyByW3RdID0gdGhpcywgaVt0XSA9IDEgPCBhcmd1bWVudHMubGVuZ3RoID8gcy5jYWxsKGFyZ3VtZW50cykgOiBlLCAtLW4gfHwgby5yZXNvbHZlV2l0aChyLCBpKTsgfTsgfTsgaWYgKG4gPD0gMSAmJiAoVyhlLCBvLmRvbmUoYSh0KSkucmVzb2x2ZSwgby5yZWplY3QsICFuKSwgXCJwZW5kaW5nXCIgPT09IG8uc3RhdGUoKSB8fCBtKGlbdF0gJiYgaVt0XS50aGVuKSkpXG4gICAgICAgICAgICByZXR1cm4gby50aGVuKCk7IHdoaWxlICh0LS0pXG4gICAgICAgICAgICBXKGlbdF0sIGEodCksIG8ucmVqZWN0KTsgcmV0dXJuIG8ucHJvbWlzZSgpOyB9IH0pO1xuICAgIHZhciAkID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG4gICAgay5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24gKGUsIHQpIHsgQy5jb25zb2xlICYmIEMuY29uc29sZS53YXJuICYmIGUgJiYgJC50ZXN0KGUubmFtZSkgJiYgQy5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGUubWVzc2FnZSwgZS5zdGFjaywgdCk7IH0sIGsucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAoZSkgeyBDLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTsgfTtcbiAgICB2YXIgRiA9IGsuRGVmZXJyZWQoKTtcbiAgICBmdW5jdGlvbiBCKCkgeyBFLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIEIpLCBDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIEIpLCBrLnJlYWR5KCk7IH1cbiAgICBrLmZuLnJlYWR5ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEYudGhlbihlKVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7IGsucmVhZHlFeGNlcHRpb24oZSk7IH0pLCB0aGlzOyB9LCBrLmV4dGVuZCh7IGlzUmVhZHk6ICExLCByZWFkeVdhaXQ6IDEsIHJlYWR5OiBmdW5jdGlvbiAoZSkgeyAoITAgPT09IGUgPyAtLWsucmVhZHlXYWl0IDogay5pc1JlYWR5KSB8fCAoay5pc1JlYWR5ID0gITApICE9PSBlICYmIDAgPCAtLWsucmVhZHlXYWl0IHx8IEYucmVzb2x2ZVdpdGgoRSwgW2tdKTsgfSB9KSwgay5yZWFkeS50aGVuID0gRi50aGVuLCBcImNvbXBsZXRlXCIgPT09IEUucmVhZHlTdGF0ZSB8fCBcImxvYWRpbmdcIiAhPT0gRS5yZWFkeVN0YXRlICYmICFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCA/IEMuc2V0VGltZW91dChrLnJlYWR5KSA6IChFLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIEIpLCBDLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIEIpKTtcbiAgICB2YXIgXyA9IGZ1bmN0aW9uIChlLCB0LCBuLCByLCBpLCBvLCBhKSB7IHZhciBzID0gMCwgdSA9IGUubGVuZ3RoLCBsID0gbnVsbCA9PSBuOyBpZiAoXCJvYmplY3RcIiA9PT0gdyhuKSlcbiAgICAgICAgZm9yIChzIGluIGkgPSAhMCwgbilcbiAgICAgICAgICAgIF8oZSwgdCwgcywgbltzXSwgITAsIG8sIGEpO1xuICAgIGVsc2UgaWYgKHZvaWQgMCAhPT0gciAmJiAoaSA9ICEwLCBtKHIpIHx8IChhID0gITApLCBsICYmIChhID8gKHQuY2FsbChlLCByKSwgdCA9IG51bGwpIDogKGwgPSB0LCB0ID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIGwuY2FsbChrKGUpLCBuKTsgfSkpLCB0KSlcbiAgICAgICAgZm9yICg7IHMgPCB1OyBzKyspXG4gICAgICAgICAgICB0KGVbc10sIG4sIGEgPyByIDogci5jYWxsKGVbc10sIHMsIHQoZVtzXSwgbikpKTsgcmV0dXJuIGkgPyBlIDogbCA/IHQuY2FsbChlKSA6IHUgPyB0KGVbMF0sIG4pIDogbzsgfSwgeiA9IC9eLW1zLS8sIFUgPSAvLShbYS16XSkvZztcbiAgICBmdW5jdGlvbiBYKGUsIHQpIHsgcmV0dXJuIHQudG9VcHBlckNhc2UoKTsgfVxuICAgIGZ1bmN0aW9uIFYoZSkgeyByZXR1cm4gZS5yZXBsYWNlKHosIFwibXMtXCIpLnJlcGxhY2UoVSwgWCk7IH1cbiAgICB2YXIgRyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiAxID09PSBlLm5vZGVUeXBlIHx8IDkgPT09IGUubm9kZVR5cGUgfHwgIStlLm5vZGVUeXBlOyB9O1xuICAgIGZ1bmN0aW9uIFkoKSB7IHRoaXMuZXhwYW5kbyA9IGsuZXhwYW5kbyArIFkudWlkKys7IH1cbiAgICBZLnVpZCA9IDEsIFkucHJvdG90eXBlID0geyBjYWNoZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlW3RoaXMuZXhwYW5kb107IHJldHVybiB0IHx8ICh0ID0ge30sIEcoZSkgJiYgKGUubm9kZVR5cGUgPyBlW3RoaXMuZXhwYW5kb10gPSB0IDogT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHRoaXMuZXhwYW5kbywgeyB2YWx1ZTogdCwgY29uZmlndXJhYmxlOiAhMCB9KSkpLCB0OyB9LCBzZXQ6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpID0gdGhpcy5jYWNoZShlKTsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpXG4gICAgICAgICAgICBpW1YodCldID0gbjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZm9yIChyIGluIHQpXG4gICAgICAgICAgICAgICAgaVtWKHIpXSA9IHRbcl07IHJldHVybiBpOyB9LCBnZXQ6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB2b2lkIDAgPT09IHQgPyB0aGlzLmNhY2hlKGUpIDogZVt0aGlzLmV4cGFuZG9dICYmIGVbdGhpcy5leHBhbmRvXVtWKHQpXTsgfSwgYWNjZXNzOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gdm9pZCAwID09PSB0IHx8IHQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiB2b2lkIDAgPT09IG4gPyB0aGlzLmdldChlLCB0KSA6ICh0aGlzLnNldChlLCB0LCBuKSwgdm9pZCAwICE9PSBuID8gbiA6IHQpOyB9LCByZW1vdmU6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gZVt0aGlzLmV4cGFuZG9dOyBpZiAodm9pZCAwICE9PSByKSB7XG4gICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0KSB7XG4gICAgICAgICAgICAgICAgbiA9ICh0ID0gQXJyYXkuaXNBcnJheSh0KSA/IHQubWFwKFYpIDogKHQgPSBWKHQpKSBpbiByID8gW3RdIDogdC5tYXRjaChSKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChuLS0pXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByW3Rbbl1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHZvaWQgMCA9PT0gdCB8fCBrLmlzRW1wdHlPYmplY3QocikpICYmIChlLm5vZGVUeXBlID8gZVt0aGlzLmV4cGFuZG9dID0gdm9pZCAwIDogZGVsZXRlIGVbdGhpcy5leHBhbmRvXSk7XG4gICAgICAgIH0gfSwgaGFzRGF0YTogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlW3RoaXMuZXhwYW5kb107IHJldHVybiB2b2lkIDAgIT09IHQgJiYgIWsuaXNFbXB0eU9iamVjdCh0KTsgfSB9O1xuICAgIHZhciBRID0gbmV3IFksIEogPSBuZXcgWSwgSyA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLywgWiA9IC9bQS1aXS9nO1xuICAgIGZ1bmN0aW9uIGVlKGUsIHQsIG4pIHsgdmFyIHIsIGk7IGlmICh2b2lkIDAgPT09IG4gJiYgMSA9PT0gZS5ub2RlVHlwZSlcbiAgICAgICAgaWYgKHIgPSBcImRhdGEtXCIgKyB0LnJlcGxhY2UoWiwgXCItJCZcIikudG9Mb3dlckNhc2UoKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG4gPSBlLmdldEF0dHJpYnV0ZShyKSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbiA9IFwidHJ1ZVwiID09PSAoaSA9IG4pIHx8IFwiZmFsc2VcIiAhPT0gaSAmJiAoXCJudWxsXCIgPT09IGkgPyBudWxsIDogaSA9PT0gK2kgKyBcIlwiID8gK2kgOiBLLnRlc3QoaSkgPyBKU09OLnBhcnNlKGkpIDogaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICBKLnNldChlLCB0LCBuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuID0gdm9pZCAwOyByZXR1cm4gbjsgfVxuICAgIGsuZXh0ZW5kKHsgaGFzRGF0YTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEouaGFzRGF0YShlKSB8fCBRLmhhc0RhdGEoZSk7IH0sIGRhdGE6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBKLmFjY2VzcyhlLCB0LCBuKTsgfSwgcmVtb3ZlRGF0YTogZnVuY3Rpb24gKGUsIHQpIHsgSi5yZW1vdmUoZSwgdCk7IH0sIF9kYXRhOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gUS5hY2Nlc3MoZSwgdCwgbik7IH0sIF9yZW1vdmVEYXRhOiBmdW5jdGlvbiAoZSwgdCkgeyBRLnJlbW92ZShlLCB0KTsgfSB9KSwgay5mbi5leHRlbmQoeyBkYXRhOiBmdW5jdGlvbiAobiwgZSkgeyB2YXIgdCwgciwgaSwgbyA9IHRoaXNbMF0sIGEgPSBvICYmIG8uYXR0cmlidXRlczsgaWYgKHZvaWQgMCA9PT0gbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIChpID0gSi5nZXQobyksIDEgPT09IG8ubm9kZVR5cGUgJiYgIVEuZ2V0KG8sIFwiaGFzRGF0YUF0dHJzXCIpKSkge1xuICAgICAgICAgICAgICAgIHQgPSBhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAodC0tKVxuICAgICAgICAgICAgICAgICAgICBhW3RdICYmIDAgPT09IChyID0gYVt0XS5uYW1lKS5pbmRleE9mKFwiZGF0YS1cIikgJiYgKHIgPSBWKHIuc2xpY2UoNSkpLCBlZShvLCByLCBpW3JdKSk7XG4gICAgICAgICAgICAgICAgUS5zZXQobywgXCJoYXNEYXRhQXR0cnNcIiwgITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIG4gPyB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBKLnNldCh0aGlzLCBuKTsgfSkgOiBfKHRoaXMsIGZ1bmN0aW9uIChlKSB7IHZhciB0OyBpZiAobyAmJiB2b2lkIDAgPT09IGUpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSAodCA9IEouZ2V0KG8sIG4pKSA/IHQgOiB2b2lkIDAgIT09ICh0ID0gZWUobywgbikpID8gdCA6IHZvaWQgMDsgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgSi5zZXQodGhpcywgbiwgZSk7IH0pOyB9LCBudWxsLCBlLCAxIDwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCwgITApOyB9LCByZW1vdmVEYXRhOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgSi5yZW1vdmUodGhpcywgZSk7IH0pOyB9IH0pLCBrLmV4dGVuZCh7IHF1ZXVlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgcjsgaWYgKGUpXG4gICAgICAgICAgICByZXR1cm4gdCA9ICh0IHx8IFwiZnhcIikgKyBcInF1ZXVlXCIsIHIgPSBRLmdldChlLCB0KSwgbiAmJiAoIXIgfHwgQXJyYXkuaXNBcnJheShuKSA/IHIgPSBRLmFjY2VzcyhlLCB0LCBrLm1ha2VBcnJheShuKSkgOiByLnB1c2gobikpLCByIHx8IFtdOyB9LCBkZXF1ZXVlOiBmdW5jdGlvbiAoZSwgdCkgeyB0ID0gdCB8fCBcImZ4XCI7IHZhciBuID0gay5xdWV1ZShlLCB0KSwgciA9IG4ubGVuZ3RoLCBpID0gbi5zaGlmdCgpLCBvID0gay5fcXVldWVIb29rcyhlLCB0KTsgXCJpbnByb2dyZXNzXCIgPT09IGkgJiYgKGkgPSBuLnNoaWZ0KCksIHItLSksIGkgJiYgKFwiZnhcIiA9PT0gdCAmJiBuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLCBkZWxldGUgby5zdG9wLCBpLmNhbGwoZSwgZnVuY3Rpb24gKCkgeyBrLmRlcXVldWUoZSwgdCk7IH0sIG8pKSwgIXIgJiYgbyAmJiBvLmVtcHR5LmZpcmUoKTsgfSwgX3F1ZXVlSG9va3M6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdCArIFwicXVldWVIb29rc1wiOyByZXR1cm4gUS5nZXQoZSwgbikgfHwgUS5hY2Nlc3MoZSwgbiwgeyBlbXB0eTogay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24gKCkgeyBRLnJlbW92ZShlLCBbdCArIFwicXVldWVcIiwgbl0pOyB9KSB9KTsgfSB9KSwgay5mbi5leHRlbmQoeyBxdWV1ZTogZnVuY3Rpb24gKHQsIG4pIHsgdmFyIGUgPSAyOyByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCAmJiAobiA9IHQsIHQgPSBcImZ4XCIsIGUtLSksIGFyZ3VtZW50cy5sZW5ndGggPCBlID8gay5xdWV1ZSh0aGlzWzBdLCB0KSA6IHZvaWQgMCA9PT0gbiA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyB2YXIgZSA9IGsucXVldWUodGhpcywgdCwgbik7IGsuX3F1ZXVlSG9va3ModGhpcywgdCksIFwiZnhcIiA9PT0gdCAmJiBcImlucHJvZ3Jlc3NcIiAhPT0gZVswXSAmJiBrLmRlcXVldWUodGhpcywgdCk7IH0pOyB9LCBkZXF1ZXVlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgay5kZXF1ZXVlKHRoaXMsIGUpOyB9KTsgfSwgY2xlYXJRdWV1ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMucXVldWUoZSB8fCBcImZ4XCIsIFtdKTsgfSwgcHJvbWlzZTogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSAxLCBpID0gay5EZWZlcnJlZCgpLCBvID0gdGhpcywgYSA9IHRoaXMubGVuZ3RoLCBzID0gZnVuY3Rpb24gKCkgeyAtLXIgfHwgaS5yZXNvbHZlV2l0aChvLCBbb10pOyB9OyBcInN0cmluZ1wiICE9IHR5cGVvZiBlICYmICh0ID0gZSwgZSA9IHZvaWQgMCksIGUgPSBlIHx8IFwiZnhcIjsgd2hpbGUgKGEtLSlcbiAgICAgICAgICAgIChuID0gUS5nZXQob1thXSwgZSArIFwicXVldWVIb29rc1wiKSkgJiYgbi5lbXB0eSAmJiAocisrLCBuLmVtcHR5LmFkZChzKSk7IHJldHVybiBzKCksIGkucHJvbWlzZSh0KTsgfSB9KTtcbiAgICB2YXIgdGUgPSAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsIG5lID0gbmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIgKyB0ZSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIpLCByZSA9IFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXSwgaWUgPSBFLmRvY3VtZW50RWxlbWVudCwgb2UgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gay5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsIGUpOyB9LCBhZSA9IHsgY29tcG9zZWQ6ICEwIH07XG4gICAgaWUuZ2V0Um9vdE5vZGUgJiYgKG9lID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LCBlKSB8fCBlLmdldFJvb3ROb2RlKGFlKSA9PT0gZS5vd25lckRvY3VtZW50OyB9KTtcbiAgICB2YXIgc2UgPSBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gXCJub25lXCIgPT09IChlID0gdCB8fCBlKS5zdHlsZS5kaXNwbGF5IHx8IFwiXCIgPT09IGUuc3R5bGUuZGlzcGxheSAmJiBvZShlKSAmJiBcIm5vbmVcIiA9PT0gay5jc3MoZSwgXCJkaXNwbGF5XCIpOyB9LCB1ZSA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhID0ge307IGZvciAobyBpbiB0KVxuICAgICAgICBhW29dID0gZS5zdHlsZVtvXSwgZS5zdHlsZVtvXSA9IHRbb107IGZvciAobyBpbiBpID0gbi5hcHBseShlLCByIHx8IFtdKSwgdClcbiAgICAgICAgZS5zdHlsZVtvXSA9IGFbb107IHJldHVybiBpOyB9O1xuICAgIGZ1bmN0aW9uIGxlKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEgPSAyMCwgcyA9IHIgPyBmdW5jdGlvbiAoKSB7IHJldHVybiByLmN1cigpOyB9IDogZnVuY3Rpb24gKCkgeyByZXR1cm4gay5jc3MoZSwgdCwgXCJcIik7IH0sIHUgPSBzKCksIGwgPSBuICYmIG5bM10gfHwgKGsuY3NzTnVtYmVyW3RdID8gXCJcIiA6IFwicHhcIiksIGMgPSBlLm5vZGVUeXBlICYmIChrLmNzc051bWJlclt0XSB8fCBcInB4XCIgIT09IGwgJiYgK3UpICYmIG5lLmV4ZWMoay5jc3MoZSwgdCkpOyBpZiAoYyAmJiBjWzNdICE9PSBsKSB7XG4gICAgICAgIHUgLz0gMiwgbCA9IGwgfHwgY1szXSwgYyA9ICt1IHx8IDE7XG4gICAgICAgIHdoaWxlIChhLS0pXG4gICAgICAgICAgICBrLnN0eWxlKGUsIHQsIGMgKyBsKSwgKDEgLSBvKSAqICgxIC0gKG8gPSBzKCkgLyB1IHx8IC41KSkgPD0gMCAmJiAoYSA9IDApLCBjIC89IG87XG4gICAgICAgIGMgKj0gMiwgay5zdHlsZShlLCB0LCBjICsgbCksIG4gPSBuIHx8IFtdO1xuICAgIH0gcmV0dXJuIG4gJiYgKGMgPSArYyB8fCArdSB8fCAwLCBpID0gblsxXSA/IGMgKyAoblsxXSArIDEpICogblsyXSA6ICtuWzJdLCByICYmIChyLnVuaXQgPSBsLCByLnN0YXJ0ID0gYywgci5lbmQgPSBpKSksIGk7IH1cbiAgICB2YXIgY2UgPSB7fTtcbiAgICBmdW5jdGlvbiBmZShlLCB0KSB7IGZvciAodmFyIG4sIHIsIGksIG8sIGEsIHMsIHUsIGwgPSBbXSwgYyA9IDAsIGYgPSBlLmxlbmd0aDsgYyA8IGY7IGMrKylcbiAgICAgICAgKHIgPSBlW2NdKS5zdHlsZSAmJiAobiA9IHIuc3R5bGUuZGlzcGxheSwgdCA/IChcIm5vbmVcIiA9PT0gbiAmJiAobFtjXSA9IFEuZ2V0KHIsIFwiZGlzcGxheVwiKSB8fCBudWxsLCBsW2NdIHx8IChyLnN0eWxlLmRpc3BsYXkgPSBcIlwiKSksIFwiXCIgPT09IHIuc3R5bGUuZGlzcGxheSAmJiBzZShyKSAmJiAobFtjXSA9ICh1ID0gYSA9IG8gPSB2b2lkIDAsIGEgPSAoaSA9IHIpLm93bmVyRG9jdW1lbnQsIHMgPSBpLm5vZGVOYW1lLCAodSA9IGNlW3NdKSB8fCAobyA9IGEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLCB1ID0gay5jc3MobywgXCJkaXNwbGF5XCIpLCBvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyksIFwibm9uZVwiID09PSB1ICYmICh1ID0gXCJibG9ja1wiKSwgY2Vbc10gPSB1KSkpKSA6IFwibm9uZVwiICE9PSBuICYmIChsW2NdID0gXCJub25lXCIsIFEuc2V0KHIsIFwiZGlzcGxheVwiLCBuKSkpOyBmb3IgKGMgPSAwOyBjIDwgZjsgYysrKVxuICAgICAgICBudWxsICE9IGxbY10gJiYgKGVbY10uc3R5bGUuZGlzcGxheSA9IGxbY10pOyByZXR1cm4gZTsgfVxuICAgIGsuZm4uZXh0ZW5kKHsgc2hvdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmUodGhpcywgITApOyB9LCBoaWRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZSh0aGlzKTsgfSwgdG9nZ2xlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJib29sZWFuXCIgPT0gdHlwZW9mIGUgPyBlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IHNlKHRoaXMpID8gayh0aGlzKS5zaG93KCkgOiBrKHRoaXMpLmhpZGUoKTsgfSk7IH0gfSk7XG4gICAgdmFyIHBlID0gL14oPzpjaGVja2JveHxyYWRpbykkL2ksIGRlID0gLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pLCBoZSA9IC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksIGdlID0geyBvcHRpb246IFsxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIl0sIHRoZWFkOiBbMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIl0sIGNvbDogWzIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLCB0cjogWzIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCJdLCB0ZDogWzMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLCBfZGVmYXVsdDogWzAsIFwiXCIsIFwiXCJdIH07XG4gICAgZnVuY3Rpb24gdmUoZSwgdCkgeyB2YXIgbjsgcmV0dXJuIG4gPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0IHx8IFwiKlwiKSA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbCA/IGUucXVlcnlTZWxlY3RvckFsbCh0IHx8IFwiKlwiKSA6IFtdLCB2b2lkIDAgPT09IHQgfHwgdCAmJiBBKGUsIHQpID8gay5tZXJnZShbZV0sIG4pIDogbjsgfVxuICAgIGZ1bmN0aW9uIHllKGUsIHQpIHsgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKylcbiAgICAgICAgUS5zZXQoZVtuXSwgXCJnbG9iYWxFdmFsXCIsICF0IHx8IFEuZ2V0KHRbbl0sIFwiZ2xvYmFsRXZhbFwiKSk7IH1cbiAgICBnZS5vcHRncm91cCA9IGdlLm9wdGlvbiwgZ2UudGJvZHkgPSBnZS50Zm9vdCA9IGdlLmNvbGdyb3VwID0gZ2UuY2FwdGlvbiA9IGdlLnRoZWFkLCBnZS50aCA9IGdlLnRkO1xuICAgIHZhciBtZSwgeGUsIGJlID0gLzx8JiM/XFx3KzsvO1xuICAgIGZ1bmN0aW9uIHdlKGUsIHQsIG4sIHIsIGkpIHsgZm9yICh2YXIgbywgYSwgcywgdSwgbCwgYywgZiA9IHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBwID0gW10sIGQgPSAwLCBoID0gZS5sZW5ndGg7IGQgPCBoOyBkKyspXG4gICAgICAgIGlmICgobyA9IGVbZF0pIHx8IDAgPT09IG8pXG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdyhvKSlcbiAgICAgICAgICAgICAgICBrLm1lcmdlKHAsIG8ubm9kZVR5cGUgPyBbb10gOiBvKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGJlLnRlc3QobykpIHtcbiAgICAgICAgICAgICAgICBhID0gYSB8fCBmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksIHMgPSAoZGUuZXhlYyhvKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksIHUgPSBnZVtzXSB8fCBnZS5fZGVmYXVsdCwgYS5pbm5lckhUTUwgPSB1WzFdICsgay5odG1sUHJlZmlsdGVyKG8pICsgdVsyXSwgYyA9IHVbMF07XG4gICAgICAgICAgICAgICAgd2hpbGUgKGMtLSlcbiAgICAgICAgICAgICAgICAgICAgYSA9IGEubGFzdENoaWxkO1xuICAgICAgICAgICAgICAgIGsubWVyZ2UocCwgYS5jaGlsZE5vZGVzKSwgKGEgPSBmLmZpcnN0Q2hpbGQpLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7IGYudGV4dENvbnRlbnQgPSBcIlwiLCBkID0gMDsgd2hpbGUgKG8gPSBwW2QrK10pXG4gICAgICAgIGlmIChyICYmIC0xIDwgay5pbkFycmF5KG8sIHIpKVxuICAgICAgICAgICAgaSAmJiBpLnB1c2gobyk7XG4gICAgICAgIGVsc2UgaWYgKGwgPSBvZShvKSwgYSA9IHZlKGYuYXBwZW5kQ2hpbGQobyksIFwic2NyaXB0XCIpLCBsICYmIHllKGEpLCBuKSB7XG4gICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChvID0gYVtjKytdKVxuICAgICAgICAgICAgICAgIGhlLnRlc3Qoby50eXBlIHx8IFwiXCIpICYmIG4ucHVzaChvKTtcbiAgICAgICAgfSByZXR1cm4gZjsgfVxuICAgIG1lID0gRS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSwgKHhlID0gRS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYWRpb1wiKSwgeGUuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiksIHhlLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0XCIpLCBtZS5hcHBlbmRDaGlsZCh4ZSksIHkuY2hlY2tDbG9uZSA9IG1lLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCwgbWUuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsIHkubm9DbG9uZUNoZWNrZWQgPSAhIW1lLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbiAgICB2YXIgVGUgPSAvXmtleS8sIENlID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLCBFZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG4gICAgZnVuY3Rpb24ga2UoKSB7IHJldHVybiAhMDsgfVxuICAgIGZ1bmN0aW9uIFNlKCkgeyByZXR1cm4gITE7IH1cbiAgICBmdW5jdGlvbiBOZShlLCB0KSB7IHJldHVybiBlID09PSBmdW5jdGlvbiAoKSB7IHRyeSB7XG4gICAgICAgIHJldHVybiBFLmFjdGl2ZUVsZW1lbnQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH0gfSgpID09IChcImZvY3VzXCIgPT09IHQpOyB9XG4gICAgZnVuY3Rpb24gQWUoZSwgdCwgbiwgciwgaSwgbykgeyB2YXIgYSwgczsgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgZm9yIChzIGluIFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gJiYgKHIgPSByIHx8IG4sIG4gPSB2b2lkIDApLCB0KVxuICAgICAgICAgICAgQWUoZSwgcywgbiwgciwgdFtzXSwgbyk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0gaWYgKG51bGwgPT0gciAmJiBudWxsID09IGkgPyAoaSA9IG4sIHIgPSBuID0gdm9pZCAwKSA6IG51bGwgPT0gaSAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgbiA/IChpID0gciwgciA9IHZvaWQgMCkgOiAoaSA9IHIsIHIgPSBuLCBuID0gdm9pZCAwKSksICExID09PSBpKVxuICAgICAgICBpID0gU2U7XG4gICAgZWxzZSBpZiAoIWkpXG4gICAgICAgIHJldHVybiBlOyByZXR1cm4gMSA9PT0gbyAmJiAoYSA9IGksIChpID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGsoKS5vZmYoZSksIGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSkuZ3VpZCA9IGEuZ3VpZCB8fCAoYS5ndWlkID0gay5ndWlkKyspKSwgZS5lYWNoKGZ1bmN0aW9uICgpIHsgay5ldmVudC5hZGQodGhpcywgdCwgaSwgciwgbik7IH0pOyB9XG4gICAgZnVuY3Rpb24gRGUoZSwgaSwgbykgeyBvID8gKFEuc2V0KGUsIGksICExKSwgay5ldmVudC5hZGQoZSwgaSwgeyBuYW1lc3BhY2U6ICExLCBoYW5kbGVyOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciA9IFEuZ2V0KHRoaXMsIGkpOyBpZiAoMSAmIGUuaXNUcmlnZ2VyICYmIHRoaXNbaV0pIHtcbiAgICAgICAgICAgIGlmIChyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAoay5ldmVudC5zcGVjaWFsW2ldIHx8IHt9KS5kZWxlZ2F0ZVR5cGUgJiYgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHIgPSBzLmNhbGwoYXJndW1lbnRzKSwgUS5zZXQodGhpcywgaSwgciksIHQgPSBvKHRoaXMsIGkpLCB0aGlzW2ldKCksIHIgIT09IChuID0gUS5nZXQodGhpcywgaSkpIHx8IHQgPyBRLnNldCh0aGlzLCBpLCAhMSkgOiBuID0ge30sIHIgIT09IG4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIGUucHJldmVudERlZmF1bHQoKSwgbi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByLmxlbmd0aCAmJiAoUS5zZXQodGhpcywgaSwgeyB2YWx1ZTogay5ldmVudC50cmlnZ2VyKGsuZXh0ZW5kKHJbMF0sIGsuRXZlbnQucHJvdG90eXBlKSwgci5zbGljZSgxKSwgdGhpcykgfSksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpOyB9IH0pKSA6IHZvaWQgMCA9PT0gUS5nZXQoZSwgaSkgJiYgay5ldmVudC5hZGQoZSwgaSwga2UpOyB9XG4gICAgay5ldmVudCA9IHsgZ2xvYmFsOiB7fSwgYWRkOiBmdW5jdGlvbiAodCwgZSwgbiwgciwgaSkgeyB2YXIgbywgYSwgcywgdSwgbCwgYywgZiwgcCwgZCwgaCwgZywgdiA9IFEuZ2V0KHQpOyBpZiAodikge1xuICAgICAgICAgICAgbi5oYW5kbGVyICYmIChuID0gKG8gPSBuKS5oYW5kbGVyLCBpID0gby5zZWxlY3RvciksIGkgJiYgay5maW5kLm1hdGNoZXNTZWxlY3RvcihpZSwgaSksIG4uZ3VpZCB8fCAobi5ndWlkID0gay5ndWlkKyspLCAodSA9IHYuZXZlbnRzKSB8fCAodSA9IHYuZXZlbnRzID0ge30pLCAoYSA9IHYuaGFuZGxlKSB8fCAoYSA9IHYuaGFuZGxlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGsgJiYgay5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IGsuZXZlbnQuZGlzcGF0Y2guYXBwbHkodCwgYXJndW1lbnRzKSA6IHZvaWQgMDsgfSksIGwgPSAoZSA9IChlIHx8IFwiXCIpLm1hdGNoKFIpIHx8IFtcIlwiXSkubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGwtLSlcbiAgICAgICAgICAgICAgICBkID0gZyA9IChzID0gRWUuZXhlYyhlW2xdKSB8fCBbXSlbMV0sIGggPSAoc1syXSB8fCBcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLCBkICYmIChmID0gay5ldmVudC5zcGVjaWFsW2RdIHx8IHt9LCBkID0gKGkgPyBmLmRlbGVnYXRlVHlwZSA6IGYuYmluZFR5cGUpIHx8IGQsIGYgPSBrLmV2ZW50LnNwZWNpYWxbZF0gfHwge30sIGMgPSBrLmV4dGVuZCh7IHR5cGU6IGQsIG9yaWdUeXBlOiBnLCBkYXRhOiByLCBoYW5kbGVyOiBuLCBndWlkOiBuLmd1aWQsIHNlbGVjdG9yOiBpLCBuZWVkc0NvbnRleHQ6IGkgJiYgay5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGkpLCBuYW1lc3BhY2U6IGguam9pbihcIi5cIikgfSwgbyksIChwID0gdVtkXSkgfHwgKChwID0gdVtkXSA9IFtdKS5kZWxlZ2F0ZUNvdW50ID0gMCwgZi5zZXR1cCAmJiAhMSAhPT0gZi5zZXR1cC5jYWxsKHQsIHIsIGgsIGEpIHx8IHQuYWRkRXZlbnRMaXN0ZW5lciAmJiB0LmFkZEV2ZW50TGlzdGVuZXIoZCwgYSkpLCBmLmFkZCAmJiAoZi5hZGQuY2FsbCh0LCBjKSwgYy5oYW5kbGVyLmd1aWQgfHwgKGMuaGFuZGxlci5ndWlkID0gbi5ndWlkKSksIGkgPyBwLnNwbGljZShwLmRlbGVnYXRlQ291bnQrKywgMCwgYykgOiBwLnB1c2goYyksIGsuZXZlbnQuZ2xvYmFsW2RdID0gITApO1xuICAgICAgICB9IH0sIHJlbW92ZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIsIGkpIHsgdmFyIG8sIGEsIHMsIHUsIGwsIGMsIGYsIHAsIGQsIGgsIGcsIHYgPSBRLmhhc0RhdGEoZSkgJiYgUS5nZXQoZSk7IGlmICh2ICYmICh1ID0gdi5ldmVudHMpKSB7XG4gICAgICAgICAgICBsID0gKHQgPSAodCB8fCBcIlwiKS5tYXRjaChSKSB8fCBbXCJcIl0pLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChsLS0pXG4gICAgICAgICAgICAgICAgaWYgKGQgPSBnID0gKHMgPSBFZS5leGVjKHRbbF0pIHx8IFtdKVsxXSwgaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZiA9IGsuZXZlbnQuc3BlY2lhbFtkXSB8fCB7fSwgcCA9IHVbZCA9IChyID8gZi5kZWxlZ2F0ZVR5cGUgOiBmLmJpbmRUeXBlKSB8fCBkXSB8fCBbXSwgcyA9IHNbMl0gJiYgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgaC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSwgYSA9IG8gPSBwLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG8tLSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBwW29dLCAhaSAmJiBnICE9PSBjLm9yaWdUeXBlIHx8IG4gJiYgbi5ndWlkICE9PSBjLmd1aWQgfHwgcyAmJiAhcy50ZXN0KGMubmFtZXNwYWNlKSB8fCByICYmIHIgIT09IGMuc2VsZWN0b3IgJiYgKFwiKipcIiAhPT0gciB8fCAhYy5zZWxlY3RvcikgfHwgKHAuc3BsaWNlKG8sIDEpLCBjLnNlbGVjdG9yICYmIHAuZGVsZWdhdGVDb3VudC0tLCBmLnJlbW92ZSAmJiBmLnJlbW92ZS5jYWxsKGUsIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgYSAmJiAhcC5sZW5ndGggJiYgKGYudGVhcmRvd24gJiYgITEgIT09IGYudGVhcmRvd24uY2FsbChlLCBoLCB2LmhhbmRsZSkgfHwgay5yZW1vdmVFdmVudChlLCBkLCB2LmhhbmRsZSksIGRlbGV0ZSB1W2RdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGQgaW4gdSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGsuZXZlbnQucmVtb3ZlKGUsIGQgKyB0W2xdLCBuLCByLCAhMCk7XG4gICAgICAgICAgICBrLmlzRW1wdHlPYmplY3QodSkgJiYgUS5yZW1vdmUoZSwgXCJoYW5kbGUgZXZlbnRzXCIpO1xuICAgICAgICB9IH0sIGRpc3BhdGNoOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciwgaSwgbywgYSwgcyA9IGsuZXZlbnQuZml4KGUpLCB1ID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLCBsID0gKFEuZ2V0KHRoaXMsIFwiZXZlbnRzXCIpIHx8IHt9KVtzLnR5cGVdIHx8IFtdLCBjID0gay5ldmVudC5zcGVjaWFsW3MudHlwZV0gfHwge307IGZvciAodVswXSA9IHMsIHQgPSAxOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKVxuICAgICAgICAgICAgdVt0XSA9IGFyZ3VtZW50c1t0XTsgaWYgKHMuZGVsZWdhdGVUYXJnZXQgPSB0aGlzLCAhYy5wcmVEaXNwYXRjaCB8fCAhMSAhPT0gYy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsIHMpKSB7XG4gICAgICAgICAgICBhID0gay5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsIHMsIGwpLCB0ID0gMDtcbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGFbdCsrXSkgJiYgIXMuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgICAgIHMuY3VycmVudFRhcmdldCA9IGkuZWxlbSwgbiA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChvID0gaS5oYW5kbGVyc1tuKytdKSAmJiAhcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgICAgICAgICBzLnJuYW1lc3BhY2UgJiYgITEgIT09IG8ubmFtZXNwYWNlICYmICFzLnJuYW1lc3BhY2UudGVzdChvLm5hbWVzcGFjZSkgfHwgKHMuaGFuZGxlT2JqID0gbywgcy5kYXRhID0gby5kYXRhLCB2b2lkIDAgIT09IChyID0gKChrLmV2ZW50LnNwZWNpYWxbby5vcmlnVHlwZV0gfHwge30pLmhhbmRsZSB8fCBvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSwgdSkpICYmICExID09PSAocy5yZXN1bHQgPSByKSAmJiAocy5wcmV2ZW50RGVmYXVsdCgpLCBzLnN0b3BQcm9wYWdhdGlvbigpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYy5wb3N0RGlzcGF0Y2ggJiYgYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLCBzKSwgcy5yZXN1bHQ7XG4gICAgICAgIH0gfSwgaGFuZGxlcnM6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByLCBpLCBvLCBhLCBzID0gW10sIHUgPSB0LmRlbGVnYXRlQ291bnQsIGwgPSBlLnRhcmdldDsgaWYgKHUgJiYgbC5ub2RlVHlwZSAmJiAhKFwiY2xpY2tcIiA9PT0gZS50eXBlICYmIDEgPD0gZS5idXR0b24pKVxuICAgICAgICAgICAgZm9yICg7IGwgIT09IHRoaXM7IGwgPSBsLnBhcmVudE5vZGUgfHwgdGhpcylcbiAgICAgICAgICAgICAgICBpZiAoMSA9PT0gbC5ub2RlVHlwZSAmJiAoXCJjbGlja1wiICE9PSBlLnR5cGUgfHwgITAgIT09IGwuZGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobyA9IFtdLCBhID0ge30sIG4gPSAwOyBuIDwgdTsgbisrKVxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBhW2kgPSAociA9IHRbbl0pLnNlbGVjdG9yICsgXCIgXCJdICYmIChhW2ldID0gci5uZWVkc0NvbnRleHQgPyAtMSA8IGsoaSwgdGhpcykuaW5kZXgobCkgOiBrLmZpbmQoaSwgdGhpcywgbnVsbCwgW2xdKS5sZW5ndGgpLCBhW2ldICYmIG8ucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgby5sZW5ndGggJiYgcy5wdXNoKHsgZWxlbTogbCwgaGFuZGxlcnM6IG8gfSk7XG4gICAgICAgICAgICAgICAgfSByZXR1cm4gbCA9IHRoaXMsIHUgPCB0Lmxlbmd0aCAmJiBzLnB1c2goeyBlbGVtOiBsLCBoYW5kbGVyczogdC5zbGljZSh1KSB9KSwgczsgfSwgYWRkUHJvcDogZnVuY3Rpb24gKHQsIGUpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGsuRXZlbnQucHJvdG90eXBlLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCBnZXQ6IG0oZSkgPyBmdW5jdGlvbiAoKSB7IGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KTsgfSA6IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMub3JpZ2luYWxFdmVudClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W3RdOyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiBlIH0pOyB9IH0pOyB9LCBmaXg6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlW2suZXhwYW5kb10gPyBlIDogbmV3IGsuRXZlbnQoZSk7IH0sIHNwZWNpYWw6IHsgbG9hZDogeyBub0J1YmJsZTogITAgfSwgY2xpY2s6IHsgc2V0dXA6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcyB8fCBlOyByZXR1cm4gcGUudGVzdCh0LnR5cGUpICYmIHQuY2xpY2sgJiYgQSh0LCBcImlucHV0XCIpICYmIERlKHQsIFwiY2xpY2tcIiwga2UpLCAhMTsgfSwgdHJpZ2dlcjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSB0aGlzIHx8IGU7IHJldHVybiBwZS50ZXN0KHQudHlwZSkgJiYgdC5jbGljayAmJiBBKHQsIFwiaW5wdXRcIikgJiYgRGUodCwgXCJjbGlja1wiKSwgITA7IH0sIF9kZWZhdWx0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUudGFyZ2V0OyByZXR1cm4gcGUudGVzdCh0LnR5cGUpICYmIHQuY2xpY2sgJiYgQSh0LCBcImlucHV0XCIpICYmIFEuZ2V0KHQsIFwiY2xpY2tcIikgfHwgQSh0LCBcImFcIik7IH0gfSwgYmVmb3JldW5sb2FkOiB7IHBvc3REaXNwYXRjaDogZnVuY3Rpb24gKGUpIHsgdm9pZCAwICE9PSBlLnJlc3VsdCAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgKGUub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGUucmVzdWx0KTsgfSB9IH0gfSwgay5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGUucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCwgbik7IH0sIGsuRXZlbnQgPSBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoISh0aGlzIGluc3RhbmNlb2Ygay5FdmVudCkpXG4gICAgICAgIHJldHVybiBuZXcgay5FdmVudChlLCB0KTsgZSAmJiBlLnR5cGUgPyAodGhpcy5vcmlnaW5hbEV2ZW50ID0gZSwgdGhpcy50eXBlID0gZS50eXBlLCB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGUuZGVmYXVsdFByZXZlbnRlZCB8fCB2b2lkIDAgPT09IGUuZGVmYXVsdFByZXZlbnRlZCAmJiAhMSA9PT0gZS5yZXR1cm5WYWx1ZSA/IGtlIDogU2UsIHRoaXMudGFyZ2V0ID0gZS50YXJnZXQgJiYgMyA9PT0gZS50YXJnZXQubm9kZVR5cGUgPyBlLnRhcmdldC5wYXJlbnROb2RlIDogZS50YXJnZXQsIHRoaXMuY3VycmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldCwgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gZS5yZWxhdGVkVGFyZ2V0KSA6IHRoaXMudHlwZSA9IGUsIHQgJiYgay5leHRlbmQodGhpcywgdCksIHRoaXMudGltZVN0YW1wID0gZSAmJiBlLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpLCB0aGlzW2suZXhwYW5kb10gPSAhMDsgfSwgay5FdmVudC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBrLkV2ZW50LCBpc0RlZmF1bHRQcmV2ZW50ZWQ6IFNlLCBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogU2UsIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBTZSwgaXNTaW11bGF0ZWQ6ICExLCBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBrZSwgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnByZXZlbnREZWZhdWx0KCk7IH0sIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGtlLCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICYmIGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0sIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsgdGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGtlLCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7IH0gfSwgay5lYWNoKHsgYWx0S2V5OiAhMCwgYnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwLCBjaGFuZ2VkVG91Y2hlczogITAsIGN0cmxLZXk6ICEwLCBkZXRhaWw6ICEwLCBldmVudFBoYXNlOiAhMCwgbWV0YUtleTogITAsIHBhZ2VYOiAhMCwgcGFnZVk6ICEwLCBzaGlmdEtleTogITAsIHZpZXc6ICEwLCBcImNoYXJcIjogITAsIGNvZGU6ICEwLCBjaGFyQ29kZTogITAsIGtleTogITAsIGtleUNvZGU6ICEwLCBidXR0b246ICEwLCBidXR0b25zOiAhMCwgY2xpZW50WDogITAsIGNsaWVudFk6ICEwLCBvZmZzZXRYOiAhMCwgb2Zmc2V0WTogITAsIHBvaW50ZXJJZDogITAsIHBvaW50ZXJUeXBlOiAhMCwgc2NyZWVuWDogITAsIHNjcmVlblk6ICEwLCB0YXJnZXRUb3VjaGVzOiAhMCwgdG9FbGVtZW50OiAhMCwgdG91Y2hlczogITAsIHdoaWNoOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuYnV0dG9uOyByZXR1cm4gbnVsbCA9PSBlLndoaWNoICYmIFRlLnRlc3QoZS50eXBlKSA/IG51bGwgIT0gZS5jaGFyQ29kZSA/IGUuY2hhckNvZGUgOiBlLmtleUNvZGUgOiAhZS53aGljaCAmJiB2b2lkIDAgIT09IHQgJiYgQ2UudGVzdChlLnR5cGUpID8gMSAmIHQgPyAxIDogMiAmIHQgPyAzIDogNCAmIHQgPyAyIDogMCA6IGUud2hpY2g7IH0gfSwgay5ldmVudC5hZGRQcm9wKSwgay5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24gKGUsIHQpIHsgay5ldmVudC5zcGVjaWFsW2VdID0geyBzZXR1cDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGUodGhpcywgZSwgTmUpLCAhMTsgfSwgdHJpZ2dlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGUodGhpcywgZSksICEwOyB9LCBkZWxlZ2F0ZVR5cGU6IHQgfTsgfSksIGsuZWFjaCh7IG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIiwgcG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsIHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCIgfSwgZnVuY3Rpb24gKGUsIGkpIHsgay5ldmVudC5zcGVjaWFsW2VdID0geyBkZWxlZ2F0ZVR5cGU6IGksIGJpbmRUeXBlOiBpLCBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuID0gZS5yZWxhdGVkVGFyZ2V0LCByID0gZS5oYW5kbGVPYmo7IHJldHVybiBuICYmIChuID09PSB0aGlzIHx8IGsuY29udGFpbnModGhpcywgbikpIHx8IChlLnR5cGUgPSByLm9yaWdUeXBlLCB0ID0gci5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIGUudHlwZSA9IGkpLCB0OyB9IH07IH0pLCBrLmZuLmV4dGVuZCh7IG9uOiBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyByZXR1cm4gQWUodGhpcywgZSwgdCwgbiwgcik7IH0sIG9uZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgcmV0dXJuIEFlKHRoaXMsIGUsIHQsIG4sIHIsIDEpOyB9LCBvZmY6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpOyBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0ICYmIGUuaGFuZGxlT2JqKVxuICAgICAgICAgICAgcmV0dXJuIHIgPSBlLmhhbmRsZU9iaiwgayhlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoci5uYW1lc3BhY2UgPyByLm9yaWdUeXBlICsgXCIuXCIgKyByLm5hbWVzcGFjZSA6IHIub3JpZ1R5cGUsIHIuc2VsZWN0b3IsIHIuaGFuZGxlciksIHRoaXM7IGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlKSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gZSlcbiAgICAgICAgICAgICAgICB0aGlzLm9mZihpLCB0LCBlW2ldKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IHJldHVybiAhMSAhPT0gdCAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQgfHwgKG4gPSB0LCB0ID0gdm9pZCAwKSwgITEgPT09IG4gJiYgKG4gPSBTZSksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IGsuZXZlbnQucmVtb3ZlKHRoaXMsIGUsIG4sIHQpOyB9KTsgfSB9KTtcbiAgICB2YXIgamUgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSwgcWUgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSwgTGUgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLCBIZSA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcbiAgICBmdW5jdGlvbiBPZShlLCB0KSB7IHJldHVybiBBKGUsIFwidGFibGVcIikgJiYgQSgxMSAhPT0gdC5ub2RlVHlwZSA/IHQgOiB0LmZpcnN0Q2hpbGQsIFwidHJcIikgJiYgayhlKS5jaGlsZHJlbihcInRib2R5XCIpWzBdIHx8IGU7IH1cbiAgICBmdW5jdGlvbiBQZShlKSB7IHJldHVybiBlLnR5cGUgPSAobnVsbCAhPT0gZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSArIFwiL1wiICsgZS50eXBlLCBlOyB9XG4gICAgZnVuY3Rpb24gUmUoZSkgeyByZXR1cm4gXCJ0cnVlL1wiID09PSAoZS50eXBlIHx8IFwiXCIpLnNsaWNlKDAsIDUpID8gZS50eXBlID0gZS50eXBlLnNsaWNlKDUpIDogZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLCBlOyB9XG4gICAgZnVuY3Rpb24gTWUoZSwgdCkgeyB2YXIgbiwgciwgaSwgbywgYSwgcywgdSwgbDsgaWYgKDEgPT09IHQubm9kZVR5cGUpIHtcbiAgICAgICAgaWYgKFEuaGFzRGF0YShlKSAmJiAobyA9IFEuYWNjZXNzKGUpLCBhID0gUS5zZXQodCwgbyksIGwgPSBvLmV2ZW50cykpXG4gICAgICAgICAgICBmb3IgKGkgaW4gZGVsZXRlIGEuaGFuZGxlLCBhLmV2ZW50cyA9IHt9LCBsKVxuICAgICAgICAgICAgICAgIGZvciAobiA9IDAsIHIgPSBsW2ldLmxlbmd0aDsgbiA8IHI7IG4rKylcbiAgICAgICAgICAgICAgICAgICAgay5ldmVudC5hZGQodCwgaSwgbFtpXVtuXSk7XG4gICAgICAgIEouaGFzRGF0YShlKSAmJiAocyA9IEouYWNjZXNzKGUpLCB1ID0gay5leHRlbmQoe30sIHMpLCBKLnNldCh0LCB1KSk7XG4gICAgfSB9XG4gICAgZnVuY3Rpb24gSWUobiwgciwgaSwgbykgeyByID0gZy5hcHBseShbXSwgcik7IHZhciBlLCB0LCBhLCBzLCB1LCBsLCBjID0gMCwgZiA9IG4ubGVuZ3RoLCBwID0gZiAtIDEsIGQgPSByWzBdLCBoID0gbShkKTsgaWYgKGggfHwgMSA8IGYgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZCAmJiAheS5jaGVja0Nsb25lICYmIExlLnRlc3QoZCkpXG4gICAgICAgIHJldHVybiBuLmVhY2goZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBuLmVxKGUpOyBoICYmIChyWzBdID0gZC5jYWxsKHRoaXMsIGUsIHQuaHRtbCgpKSksIEllKHQsIHIsIGksIG8pOyB9KTsgaWYgKGYgJiYgKHQgPSAoZSA9IHdlKHIsIG5bMF0ub3duZXJEb2N1bWVudCwgITEsIG4sIG8pKS5maXJzdENoaWxkLCAxID09PSBlLmNoaWxkTm9kZXMubGVuZ3RoICYmIChlID0gdCksIHQgfHwgbykpIHtcbiAgICAgICAgZm9yIChzID0gKGEgPSBrLm1hcCh2ZShlLCBcInNjcmlwdFwiKSwgUGUpKS5sZW5ndGg7IGMgPCBmOyBjKyspXG4gICAgICAgICAgICB1ID0gZSwgYyAhPT0gcCAmJiAodSA9IGsuY2xvbmUodSwgITAsICEwKSwgcyAmJiBrLm1lcmdlKGEsIHZlKHUsIFwic2NyaXB0XCIpKSksIGkuY2FsbChuW2NdLCB1LCBjKTtcbiAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICBmb3IgKGwgPSBhW2EubGVuZ3RoIC0gMV0ub3duZXJEb2N1bWVudCwgay5tYXAoYSwgUmUpLCBjID0gMDsgYyA8IHM7IGMrKylcbiAgICAgICAgICAgICAgICB1ID0gYVtjXSwgaGUudGVzdCh1LnR5cGUgfHwgXCJcIikgJiYgIVEuYWNjZXNzKHUsIFwiZ2xvYmFsRXZhbFwiKSAmJiBrLmNvbnRhaW5zKGwsIHUpICYmICh1LnNyYyAmJiBcIm1vZHVsZVwiICE9PSAodS50eXBlIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkgPyBrLl9ldmFsVXJsICYmICF1Lm5vTW9kdWxlICYmIGsuX2V2YWxVcmwodS5zcmMsIHsgbm9uY2U6IHUubm9uY2UgfHwgdS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKSB9KSA6IGIodS50ZXh0Q29udGVudC5yZXBsYWNlKEhlLCBcIlwiKSwgdSwgbCkpO1xuICAgIH0gcmV0dXJuIG47IH1cbiAgICBmdW5jdGlvbiBXZShlLCB0LCBuKSB7IGZvciAodmFyIHIsIGkgPSB0ID8gay5maWx0ZXIodCwgZSkgOiBlLCBvID0gMDsgbnVsbCAhPSAociA9IGlbb10pOyBvKyspXG4gICAgICAgIG4gfHwgMSAhPT0gci5ub2RlVHlwZSB8fCBrLmNsZWFuRGF0YSh2ZShyKSksIHIucGFyZW50Tm9kZSAmJiAobiAmJiBvZShyKSAmJiB5ZSh2ZShyLCBcInNjcmlwdFwiKSksIHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7IHJldHVybiBlOyB9XG4gICAgay5leHRlbmQoeyBodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5yZXBsYWNlKGplLCBcIjwkMT48LyQyPlwiKTsgfSwgY2xvbmU6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhLCBzLCB1LCBsLCBjID0gZS5jbG9uZU5vZGUoITApLCBmID0gb2UoZSk7IGlmICghKHkubm9DbG9uZUNoZWNrZWQgfHwgMSAhPT0gZS5ub2RlVHlwZSAmJiAxMSAhPT0gZS5ub2RlVHlwZSB8fCBrLmlzWE1MRG9jKGUpKSlcbiAgICAgICAgICAgIGZvciAoYSA9IHZlKGMpLCByID0gMCwgaSA9IChvID0gdmUoZSkpLmxlbmd0aDsgciA8IGk7IHIrKylcbiAgICAgICAgICAgICAgICBzID0gb1tyXSwgdSA9IGFbcl0sIHZvaWQgMCwgXCJpbnB1dFwiID09PSAobCA9IHUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgJiYgcGUudGVzdChzLnR5cGUpID8gdS5jaGVja2VkID0gcy5jaGVja2VkIDogXCJpbnB1dFwiICE9PSBsICYmIFwidGV4dGFyZWFcIiAhPT0gbCB8fCAodS5kZWZhdWx0VmFsdWUgPSBzLmRlZmF1bHRWYWx1ZSk7IGlmICh0KVxuICAgICAgICAgICAgaWYgKG4pXG4gICAgICAgICAgICAgICAgZm9yIChvID0gbyB8fCB2ZShlKSwgYSA9IGEgfHwgdmUoYyksIHIgPSAwLCBpID0gby5sZW5ndGg7IHIgPCBpOyByKyspXG4gICAgICAgICAgICAgICAgICAgIE1lKG9bcl0sIGFbcl0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIE1lKGUsIGMpOyByZXR1cm4gMCA8IChhID0gdmUoYywgXCJzY3JpcHRcIikpLmxlbmd0aCAmJiB5ZShhLCAhZiAmJiB2ZShlLCBcInNjcmlwdFwiKSksIGM7IH0sIGNsZWFuRGF0YTogZnVuY3Rpb24gKGUpIHsgZm9yICh2YXIgdCwgbiwgciwgaSA9IGsuZXZlbnQuc3BlY2lhbCwgbyA9IDA7IHZvaWQgMCAhPT0gKG4gPSBlW29dKTsgbysrKVxuICAgICAgICAgICAgaWYgKEcobikpIHtcbiAgICAgICAgICAgICAgICBpZiAodCA9IG5bUS5leHBhbmRvXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodC5ldmVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHIgaW4gdC5ldmVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVtyXSA/IGsuZXZlbnQucmVtb3ZlKG4sIHIpIDogay5yZW1vdmVFdmVudChuLCByLCB0LmhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIG5bUS5leHBhbmRvXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbltKLmV4cGFuZG9dICYmIChuW0ouZXhwYW5kb10gPSB2b2lkIDApO1xuICAgICAgICAgICAgfSB9IH0pLCBrLmZuLmV4dGVuZCh7IGRldGFjaDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFdlKHRoaXMsIGUsICEwKTsgfSwgcmVtb3ZlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gV2UodGhpcywgZSk7IH0sIHRleHQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBfKHRoaXMsIGZ1bmN0aW9uIChlKSB7IHJldHVybiB2b2lkIDAgPT09IGUgPyBrLnRleHQodGhpcykgOiB0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbiAoKSB7IDEgIT09IHRoaXMubm9kZVR5cGUgJiYgMTEgIT09IHRoaXMubm9kZVR5cGUgJiYgOSAhPT0gdGhpcy5ub2RlVHlwZSB8fCAodGhpcy50ZXh0Q29udGVudCA9IGUpOyB9KTsgfSwgbnVsbCwgZSwgYXJndW1lbnRzLmxlbmd0aCk7IH0sIGFwcGVuZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSWUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZSkgeyAxICE9PSB0aGlzLm5vZGVUeXBlICYmIDExICE9PSB0aGlzLm5vZGVUeXBlICYmIDkgIT09IHRoaXMubm9kZVR5cGUgfHwgT2UodGhpcywgZSkuYXBwZW5kQ2hpbGQoZSk7IH0pOyB9LCBwcmVwZW5kOiBmdW5jdGlvbiAoKSB7IHJldHVybiBJZSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7IGlmICgxID09PSB0aGlzLm5vZGVUeXBlIHx8IDExID09PSB0aGlzLm5vZGVUeXBlIHx8IDkgPT09IHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2UodGhpcywgZSk7XG4gICAgICAgICAgICB0Lmluc2VydEJlZm9yZShlLCB0LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IH0pOyB9LCBiZWZvcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgdGhpcyk7IH0pOyB9LCBhZnRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gSWUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZSkgeyB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCB0aGlzLm5leHRTaWJsaW5nKTsgfSk7IH0sIGVtcHR5OiBmdW5jdGlvbiAoKSB7IGZvciAodmFyIGUsIHQgPSAwOyBudWxsICE9IChlID0gdGhpc1t0XSk7IHQrKylcbiAgICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgKGsuY2xlYW5EYXRhKHZlKGUsICExKSksIGUudGV4dENvbnRlbnQgPSBcIlwiKTsgcmV0dXJuIHRoaXM7IH0sIGNsb25lOiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZSA9IG51bGwgIT0gZSAmJiBlLCB0ID0gbnVsbCA9PSB0ID8gZSA6IHQsIHRoaXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGsuY2xvbmUodGhpcywgZSwgdCk7IH0pOyB9LCBodG1sOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXyh0aGlzLCBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHRoaXNbMF0gfHwge30sIG4gPSAwLCByID0gdGhpcy5sZW5ndGg7IGlmICh2b2lkIDAgPT09IGUgJiYgMSA9PT0gdC5ub2RlVHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0LmlubmVySFRNTDsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgIXFlLnRlc3QoZSkgJiYgIWdlWyhkZS5leGVjKGUpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICAgIGUgPSBrLmh0bWxQcmVmaWx0ZXIoZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAoOyBuIDwgcjsgbisrKVxuICAgICAgICAgICAgICAgICAgICAxID09PSAodCA9IHRoaXNbbl0gfHwge30pLm5vZGVUeXBlICYmIChrLmNsZWFuRGF0YSh2ZSh0LCAhMSkpLCB0LmlubmVySFRNTCA9IGUpO1xuICAgICAgICAgICAgICAgIHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9IHQgJiYgdGhpcy5lbXB0eSgpLmFwcGVuZChlKTsgfSwgbnVsbCwgZSwgYXJndW1lbnRzLmxlbmd0aCk7IH0sIHJlcGxhY2VXaXRoOiBmdW5jdGlvbiAoKSB7IHZhciBuID0gW107IHJldHVybiBJZSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcy5wYXJlbnROb2RlOyBrLmluQXJyYXkodGhpcywgbikgPCAwICYmIChrLmNsZWFuRGF0YSh2ZSh0aGlzKSksIHQgJiYgdC5yZXBsYWNlQ2hpbGQoZSwgdGhpcykpOyB9LCBuKTsgfSB9KSwgay5lYWNoKHsgYXBwZW5kVG86IFwiYXBwZW5kXCIsIHByZXBlbmRUbzogXCJwcmVwZW5kXCIsIGluc2VydEJlZm9yZTogXCJiZWZvcmVcIiwgaW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIiwgcmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiIH0sIGZ1bmN0aW9uIChlLCBhKSB7IGsuZm5bZV0gPSBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0LCBuID0gW10sIHIgPSBrKGUpLCBpID0gci5sZW5ndGggLSAxLCBvID0gMDsgbyA8PSBpOyBvKyspXG4gICAgICAgIHQgPSBvID09PSBpID8gdGhpcyA6IHRoaXMuY2xvbmUoITApLCBrKHJbb10pW2FdKHQpLCB1LmFwcGx5KG4sIHQuZ2V0KCkpOyByZXR1cm4gdGhpcy5wdXNoU3RhY2sobik7IH07IH0pO1xuICAgIHZhciAkZSA9IG5ldyBSZWdFeHAoXCJeKFwiICsgdGUgKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiksIEZlID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7IHJldHVybiB0ICYmIHQub3BlbmVyIHx8ICh0ID0gQyksIHQuZ2V0Q29tcHV0ZWRTdHlsZShlKTsgfSwgQmUgPSBuZXcgUmVnRXhwKHJlLmpvaW4oXCJ8XCIpLCBcImlcIik7XG4gICAgZnVuY3Rpb24gX2UoZSwgdCwgbikgeyB2YXIgciwgaSwgbywgYSwgcyA9IGUuc3R5bGU7IHJldHVybiAobiA9IG4gfHwgRmUoZSkpICYmIChcIlwiICE9PSAoYSA9IG4uZ2V0UHJvcGVydHlWYWx1ZSh0KSB8fCBuW3RdKSB8fCBvZShlKSB8fCAoYSA9IGsuc3R5bGUoZSwgdCkpLCAheS5waXhlbEJveFN0eWxlcygpICYmICRlLnRlc3QoYSkgJiYgQmUudGVzdCh0KSAmJiAociA9IHMud2lkdGgsIGkgPSBzLm1pbldpZHRoLCBvID0gcy5tYXhXaWR0aCwgcy5taW5XaWR0aCA9IHMubWF4V2lkdGggPSBzLndpZHRoID0gYSwgYSA9IG4ud2lkdGgsIHMud2lkdGggPSByLCBzLm1pbldpZHRoID0gaSwgcy5tYXhXaWR0aCA9IG8pKSwgdm9pZCAwICE9PSBhID8gYSArIFwiXCIgOiBhOyB9XG4gICAgZnVuY3Rpb24gemUoZSwgdCkgeyByZXR1cm4geyBnZXQ6IGZ1bmN0aW9uICgpIHsgaWYgKCFlKCkpXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZ2V0ID0gdCkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgZGVsZXRlIHRoaXMuZ2V0OyB9IH07IH1cbiAgICAhZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBlKCkgeyBpZiAodSkge1xuICAgICAgICBzLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDttYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIiwgdS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo2MCU7dG9wOjElXCIsIGllLmFwcGVuZENoaWxkKHMpLmFwcGVuZENoaWxkKHUpO1xuICAgICAgICB2YXIgZSA9IEMuZ2V0Q29tcHV0ZWRTdHlsZSh1KTtcbiAgICAgICAgbiA9IFwiMSVcIiAhPT0gZS50b3AsIGEgPSAxMiA9PT0gdChlLm1hcmdpbkxlZnQpLCB1LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIiwgbyA9IDM2ID09PSB0KGUucmlnaHQpLCByID0gMzYgPT09IHQoZS53aWR0aCksIHUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGkgPSAxMiA9PT0gdCh1Lm9mZnNldFdpZHRoIC8gMyksIGllLnJlbW92ZUNoaWxkKHMpLCB1ID0gbnVsbDtcbiAgICB9IH0gZnVuY3Rpb24gdChlKSB7IHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpOyB9IHZhciBuLCByLCBpLCBvLCBhLCBzID0gRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCB1ID0gRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOyB1LnN0eWxlICYmICh1LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiLCB1LmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiLCB5LmNsZWFyQ2xvbmVTdHlsZSA9IFwiY29udGVudC1ib3hcIiA9PT0gdS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCwgay5leHRlbmQoeSwgeyBib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZSgpLCByOyB9LCBwaXhlbEJveFN0eWxlczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZSgpLCBvOyB9LCBwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBlKCksIG47IH0sIHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZSgpLCBhOyB9LCBzY3JvbGxib3hTaXplOiBmdW5jdGlvbiAoKSB7IHJldHVybiBlKCksIGk7IH0gfSkpOyB9KCk7XG4gICAgdmFyIFVlID0gW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFhlID0gRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLCBWZSA9IHt9O1xuICAgIGZ1bmN0aW9uIEdlKGUpIHsgdmFyIHQgPSBrLmNzc1Byb3BzW2VdIHx8IFZlW2VdOyByZXR1cm4gdCB8fCAoZSBpbiBYZSA/IGUgOiBWZVtlXSA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZVswXS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKSwgbiA9IFVlLmxlbmd0aDsgd2hpbGUgKG4tLSlcbiAgICAgICAgaWYgKChlID0gVWVbbl0gKyB0KSBpbiBYZSlcbiAgICAgICAgICAgIHJldHVybiBlOyB9KGUpIHx8IGUpOyB9XG4gICAgdmFyIFllID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLCBRZSA9IC9eLS0vLCBKZSA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sIEtlID0geyBsZXR0ZXJTcGFjaW5nOiBcIjBcIiwgZm9udFdlaWdodDogXCI0MDBcIiB9O1xuICAgIGZ1bmN0aW9uIFplKGUsIHQsIG4pIHsgdmFyIHIgPSBuZS5leGVjKHQpOyByZXR1cm4gciA/IE1hdGgubWF4KDAsIHJbMl0gLSAobiB8fCAwKSkgKyAoclszXSB8fCBcInB4XCIpIDogdDsgfVxuICAgIGZ1bmN0aW9uIGV0KGUsIHQsIG4sIHIsIGksIG8pIHsgdmFyIGEgPSBcIndpZHRoXCIgPT09IHQgPyAxIDogMCwgcyA9IDAsIHUgPSAwOyBpZiAobiA9PT0gKHIgPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpKVxuICAgICAgICByZXR1cm4gMDsgZm9yICg7IGEgPCA0OyBhICs9IDIpXG4gICAgICAgIFwibWFyZ2luXCIgPT09IG4gJiYgKHUgKz0gay5jc3MoZSwgbiArIHJlW2FdLCAhMCwgaSkpLCByID8gKFwiY29udGVudFwiID09PSBuICYmICh1IC09IGsuY3NzKGUsIFwicGFkZGluZ1wiICsgcmVbYV0sICEwLCBpKSksIFwibWFyZ2luXCIgIT09IG4gJiYgKHUgLT0gay5jc3MoZSwgXCJib3JkZXJcIiArIHJlW2FdICsgXCJXaWR0aFwiLCAhMCwgaSkpKSA6ICh1ICs9IGsuY3NzKGUsIFwicGFkZGluZ1wiICsgcmVbYV0sICEwLCBpKSwgXCJwYWRkaW5nXCIgIT09IG4gPyB1ICs9IGsuY3NzKGUsIFwiYm9yZGVyXCIgKyByZVthXSArIFwiV2lkdGhcIiwgITAsIGkpIDogcyArPSBrLmNzcyhlLCBcImJvcmRlclwiICsgcmVbYV0gKyBcIldpZHRoXCIsICEwLCBpKSk7IHJldHVybiAhciAmJiAwIDw9IG8gJiYgKHUgKz0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKGVbXCJvZmZzZXRcIiArIHRbMF0udG9VcHBlckNhc2UoKSArIHQuc2xpY2UoMSldIC0gbyAtIHUgLSBzIC0gLjUpKSB8fCAwKSwgdTsgfVxuICAgIGZ1bmN0aW9uIHR0KGUsIHQsIG4pIHsgdmFyIHIgPSBGZShlKSwgaSA9ICgheS5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IG4pICYmIFwiYm9yZGVyLWJveFwiID09PSBrLmNzcyhlLCBcImJveFNpemluZ1wiLCAhMSwgciksIG8gPSBpLCBhID0gX2UoZSwgdCwgciksIHMgPSBcIm9mZnNldFwiICsgdFswXS50b1VwcGVyQ2FzZSgpICsgdC5zbGljZSgxKTsgaWYgKCRlLnRlc3QoYSkpIHtcbiAgICAgICAgaWYgKCFuKVxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIGEgPSBcImF1dG9cIjtcbiAgICB9IHJldHVybiAoIXkuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpIHx8IFwiYXV0b1wiID09PSBhIHx8ICFwYXJzZUZsb2F0KGEpICYmIFwiaW5saW5lXCIgPT09IGsuY3NzKGUsIFwiZGlzcGxheVwiLCAhMSwgcikpICYmIGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgKGkgPSBcImJvcmRlci1ib3hcIiA9PT0gay5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIHIpLCAobyA9IHMgaW4gZSkgJiYgKGEgPSBlW3NdKSksIChhID0gcGFyc2VGbG9hdChhKSB8fCAwKSArIGV0KGUsIHQsIG4gfHwgKGkgPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpLCBvLCByLCBhKSArIFwicHhcIjsgfVxuICAgIGZ1bmN0aW9uIG50KGUsIHQsIG4sIHIsIGkpIHsgcmV0dXJuIG5ldyBudC5wcm90b3R5cGUuaW5pdChlLCB0LCBuLCByLCBpKTsgfVxuICAgIGsuZXh0ZW5kKHsgY3NzSG9va3M6IHsgb3BhY2l0eTogeyBnZXQ6IGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gX2UoZSwgXCJvcGFjaXR5XCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIiA9PT0gbiA/IFwiMVwiIDogbjtcbiAgICAgICAgICAgICAgICB9IH0gfSB9LCBjc3NOdW1iZXI6IHsgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICEwLCBjb2x1bW5Db3VudDogITAsIGZpbGxPcGFjaXR5OiAhMCwgZmxleEdyb3c6ICEwLCBmbGV4U2hyaW5rOiAhMCwgZm9udFdlaWdodDogITAsIGdyaWRBcmVhOiAhMCwgZ3JpZENvbHVtbjogITAsIGdyaWRDb2x1bW5FbmQ6ICEwLCBncmlkQ29sdW1uU3RhcnQ6ICEwLCBncmlkUm93OiAhMCwgZ3JpZFJvd0VuZDogITAsIGdyaWRSb3dTdGFydDogITAsIGxpbmVIZWlnaHQ6ICEwLCBvcGFjaXR5OiAhMCwgb3JkZXI6ICEwLCBvcnBoYW5zOiAhMCwgd2lkb3dzOiAhMCwgekluZGV4OiAhMCwgem9vbTogITAgfSwgY3NzUHJvcHM6IHt9LCBzdHlsZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgaWYgKGUgJiYgMyAhPT0gZS5ub2RlVHlwZSAmJiA4ICE9PSBlLm5vZGVUeXBlICYmIGUuc3R5bGUpIHtcbiAgICAgICAgICAgIHZhciBpLCBvLCBhLCBzID0gVih0KSwgdSA9IFFlLnRlc3QodCksIGwgPSBlLnN0eWxlO1xuICAgICAgICAgICAgaWYgKHUgfHwgKHQgPSBHZShzKSksIGEgPSBrLmNzc0hvb2tzW3RdIHx8IGsuY3NzSG9va3Nbc10sIHZvaWQgMCA9PT0gbilcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBcImdldFwiIGluIGEgJiYgdm9pZCAwICE9PSAoaSA9IGEuZ2V0KGUsICExLCByKSkgPyBpIDogbFt0XTtcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IChvID0gdHlwZW9mIG4pICYmIChpID0gbmUuZXhlYyhuKSkgJiYgaVsxXSAmJiAobiA9IGxlKGUsIHQsIGkpLCBvID0gXCJudW1iZXJcIiksIG51bGwgIT0gbiAmJiBuID09IG4gJiYgKFwibnVtYmVyXCIgIT09IG8gfHwgdSB8fCAobiArPSBpICYmIGlbM10gfHwgKGsuY3NzTnVtYmVyW3NdID8gXCJcIiA6IFwicHhcIikpLCB5LmNsZWFyQ2xvbmVTdHlsZSB8fCBcIlwiICE9PSBuIHx8IDAgIT09IHQuaW5kZXhPZihcImJhY2tncm91bmRcIikgfHwgKGxbdF0gPSBcImluaGVyaXRcIiksIGEgJiYgXCJzZXRcIiBpbiBhICYmIHZvaWQgMCA9PT0gKG4gPSBhLnNldChlLCBuLCByKSkgfHwgKHUgPyBsLnNldFByb3BlcnR5KHQsIG4pIDogbFt0XSA9IG4pKTtcbiAgICAgICAgfSB9LCBjc3M6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhLCBzID0gVih0KTsgcmV0dXJuIFFlLnRlc3QodCkgfHwgKHQgPSBHZShzKSksIChhID0gay5jc3NIb29rc1t0XSB8fCBrLmNzc0hvb2tzW3NdKSAmJiBcImdldFwiIGluIGEgJiYgKGkgPSBhLmdldChlLCAhMCwgbikpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSBfZShlLCB0LCByKSksIFwibm9ybWFsXCIgPT09IGkgJiYgdCBpbiBLZSAmJiAoaSA9IEtlW3RdKSwgXCJcIiA9PT0gbiB8fCBuID8gKG8gPSBwYXJzZUZsb2F0KGkpLCAhMCA9PT0gbiB8fCBpc0Zpbml0ZShvKSA/IG8gfHwgMCA6IGkpIDogaTsgfSB9KSwgay5lYWNoKFtcImhlaWdodFwiLCBcIndpZHRoXCJdLCBmdW5jdGlvbiAoZSwgdSkgeyBrLmNzc0hvb2tzW3VdID0geyBnZXQ6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGlmICh0KVxuICAgICAgICAgICAgcmV0dXJuICFZZS50ZXN0KGsuY3NzKGUsIFwiZGlzcGxheVwiKSkgfHwgZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCAmJiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID8gdHQoZSwgdSwgbikgOiB1ZShlLCBKZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHQoZSwgdSwgbik7IH0pOyB9LCBzZXQ6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpID0gRmUoZSksIG8gPSAheS5zY3JvbGxib3hTaXplKCkgJiYgXCJhYnNvbHV0ZVwiID09PSBpLnBvc2l0aW9uLCBhID0gKG8gfHwgbikgJiYgXCJib3JkZXItYm94XCIgPT09IGsuY3NzKGUsIFwiYm94U2l6aW5nXCIsICExLCBpKSwgcyA9IG4gPyBldChlLCB1LCBuLCBhLCBpKSA6IDA7IHJldHVybiBhICYmIG8gJiYgKHMgLT0gTWF0aC5jZWlsKGVbXCJvZmZzZXRcIiArIHVbMF0udG9VcHBlckNhc2UoKSArIHUuc2xpY2UoMSldIC0gcGFyc2VGbG9hdChpW3VdKSAtIGV0KGUsIHUsIFwiYm9yZGVyXCIsICExLCBpKSAtIC41KSksIHMgJiYgKHIgPSBuZS5leGVjKHQpKSAmJiBcInB4XCIgIT09IChyWzNdIHx8IFwicHhcIikgJiYgKGUuc3R5bGVbdV0gPSB0LCB0ID0gay5jc3MoZSwgdSkpLCBaZSgwLCB0LCBzKTsgfSB9OyB9KSwgay5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gemUoeS5yZWxpYWJsZU1hcmdpbkxlZnQsIGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KVxuICAgICAgICByZXR1cm4gKHBhcnNlRmxvYXQoX2UoZSwgXCJtYXJnaW5MZWZ0XCIpKSB8fCBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB1ZShlLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0OyB9KSkgKyBcInB4XCI7IH0pLCBrLmVhY2goeyBtYXJnaW46IFwiXCIsIHBhZGRpbmc6IFwiXCIsIGJvcmRlcjogXCJXaWR0aFwiIH0sIGZ1bmN0aW9uIChpLCBvKSB7IGsuY3NzSG9va3NbaSArIG9dID0geyBleHBhbmQ6IGZ1bmN0aW9uIChlKSB7IGZvciAodmFyIHQgPSAwLCBuID0ge30sIHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gZS5zcGxpdChcIiBcIikgOiBbZV07IHQgPCA0OyB0KyspXG4gICAgICAgICAgICBuW2kgKyByZVt0XSArIG9dID0gclt0XSB8fCByW3QgLSAyXSB8fCByWzBdOyByZXR1cm4gbjsgfSB9LCBcIm1hcmdpblwiICE9PSBpICYmIChrLmNzc0hvb2tzW2kgKyBvXS5zZXQgPSBaZSk7IH0pLCBrLmZuLmV4dGVuZCh7IGNzczogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIF8odGhpcywgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8gPSB7fSwgYSA9IDA7IGlmIChBcnJheS5pc0FycmF5KHQpKSB7XG4gICAgICAgICAgICBmb3IgKHIgPSBGZShlKSwgaSA9IHQubGVuZ3RoOyBhIDwgaTsgYSsrKVxuICAgICAgICAgICAgICAgIG9bdFthXV0gPSBrLmNzcyhlLCB0W2FdLCAhMSwgcik7XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfSByZXR1cm4gdm9pZCAwICE9PSBuID8gay5zdHlsZShlLCB0LCBuKSA6IGsuY3NzKGUsIHQpOyB9LCBlLCB0LCAxIDwgYXJndW1lbnRzLmxlbmd0aCk7IH0gfSksICgoay5Ud2VlbiA9IG50KS5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBudCwgaW5pdDogZnVuY3Rpb24gKGUsIHQsIG4sIHIsIGksIG8pIHsgdGhpcy5lbGVtID0gZSwgdGhpcy5wcm9wID0gbiwgdGhpcy5lYXNpbmcgPSBpIHx8IGsuZWFzaW5nLl9kZWZhdWx0LCB0aGlzLm9wdGlvbnMgPSB0LCB0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpLCB0aGlzLmVuZCA9IHIsIHRoaXMudW5pdCA9IG8gfHwgKGsuY3NzTnVtYmVyW25dID8gXCJcIiA6IFwicHhcIik7IH0sIGN1cjogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IG50LnByb3BIb29rc1t0aGlzLnByb3BdOyByZXR1cm4gZSAmJiBlLmdldCA/IGUuZ2V0KHRoaXMpIDogbnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKTsgfSwgcnVuOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiA9IG50LnByb3BIb29rc1t0aGlzLnByb3BdOyByZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uID8gdGhpcy5wb3MgPSB0ID0gay5lYXNpbmdbdGhpcy5lYXNpbmddKGUsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIGUsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvbikgOiB0aGlzLnBvcyA9IHQgPSBlLCB0aGlzLm5vdyA9ICh0aGlzLmVuZCAtIHRoaXMuc3RhcnQpICogdCArIHRoaXMuc3RhcnQsIHRoaXMub3B0aW9ucy5zdGVwICYmIHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyksIG4gJiYgbi5zZXQgPyBuLnNldCh0aGlzKSA6IG50LnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksIHRoaXM7IH0gfSkuaW5pdC5wcm90b3R5cGUgPSBudC5wcm90b3R5cGUsIChudC5wcm9wSG9va3MgPSB7IF9kZWZhdWx0OiB7IGdldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IHJldHVybiAxICE9PSBlLmVsZW0ubm9kZVR5cGUgfHwgbnVsbCAhPSBlLmVsZW1bZS5wcm9wXSAmJiBudWxsID09IGUuZWxlbS5zdHlsZVtlLnByb3BdID8gZS5lbGVtW2UucHJvcF0gOiAodCA9IGsuY3NzKGUuZWxlbSwgZS5wcm9wLCBcIlwiKSkgJiYgXCJhdXRvXCIgIT09IHQgPyB0IDogMDsgfSwgc2V0OiBmdW5jdGlvbiAoZSkgeyBrLmZ4LnN0ZXBbZS5wcm9wXSA/IGsuZnguc3RlcFtlLnByb3BdKGUpIDogMSAhPT0gZS5lbGVtLm5vZGVUeXBlIHx8ICFrLmNzc0hvb2tzW2UucHJvcF0gJiYgbnVsbCA9PSBlLmVsZW0uc3R5bGVbR2UoZS5wcm9wKV0gPyBlLmVsZW1bZS5wcm9wXSA9IGUubm93IDogay5zdHlsZShlLmVsZW0sIGUucHJvcCwgZS5ub3cgKyBlLnVuaXQpOyB9IH0gfSkuc2Nyb2xsVG9wID0gbnQucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7IHNldDogZnVuY3Rpb24gKGUpIHsgZS5lbGVtLm5vZGVUeXBlICYmIGUuZWxlbS5wYXJlbnROb2RlICYmIChlLmVsZW1bZS5wcm9wXSA9IGUubm93KTsgfSB9LCBrLmVhc2luZyA9IHsgbGluZWFyOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZTsgfSwgc3dpbmc6IGZ1bmN0aW9uIChlKSB7IHJldHVybiAuNSAtIE1hdGguY29zKGUgKiBNYXRoLlBJKSAvIDI7IH0sIF9kZWZhdWx0OiBcInN3aW5nXCIgfSwgay5meCA9IG50LnByb3RvdHlwZS5pbml0LCBrLmZ4LnN0ZXAgPSB7fTtcbiAgICB2YXIgcnQsIGl0LCBvdCwgYXQsIHN0ID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLCB1dCA9IC9xdWV1ZUhvb2tzJC87XG4gICAgZnVuY3Rpb24gbHQoKSB7IGl0ICYmICghMSA9PT0gRS5oaWRkZW4gJiYgQy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyBDLnJlcXVlc3RBbmltYXRpb25GcmFtZShsdCkgOiBDLnNldFRpbWVvdXQobHQsIGsuZnguaW50ZXJ2YWwpLCBrLmZ4LnRpY2soKSk7IH1cbiAgICBmdW5jdGlvbiBjdCgpIHsgcmV0dXJuIEMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJ0ID0gdm9pZCAwOyB9KSwgcnQgPSBEYXRlLm5vdygpOyB9XG4gICAgZnVuY3Rpb24gZnQoZSwgdCkgeyB2YXIgbiwgciA9IDAsIGkgPSB7IGhlaWdodDogZSB9OyBmb3IgKHQgPSB0ID8gMSA6IDA7IHIgPCA0OyByICs9IDIgLSB0KVxuICAgICAgICBpW1wibWFyZ2luXCIgKyAobiA9IHJlW3JdKV0gPSBpW1wicGFkZGluZ1wiICsgbl0gPSBlOyByZXR1cm4gdCAmJiAoaS5vcGFjaXR5ID0gaS53aWR0aCA9IGUpLCBpOyB9XG4gICAgZnVuY3Rpb24gcHQoZSwgdCwgbikgeyBmb3IgKHZhciByLCBpID0gKGR0LnR3ZWVuZXJzW3RdIHx8IFtdKS5jb25jYXQoZHQudHdlZW5lcnNbXCIqXCJdKSwgbyA9IDAsIGEgPSBpLmxlbmd0aDsgbyA8IGE7IG8rKylcbiAgICAgICAgaWYgKHIgPSBpW29dLmNhbGwobiwgdCwgZSkpXG4gICAgICAgICAgICByZXR1cm4gcjsgfVxuICAgIGZ1bmN0aW9uIGR0KG8sIGUsIHQpIHsgdmFyIG4sIGEsIHIgPSAwLCBpID0gZHQucHJlZmlsdGVycy5sZW5ndGgsIHMgPSBrLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHsgZGVsZXRlIHUuZWxlbTsgfSksIHUgPSBmdW5jdGlvbiAoKSB7IGlmIChhKVxuICAgICAgICByZXR1cm4gITE7IGZvciAodmFyIGUgPSBydCB8fCBjdCgpLCB0ID0gTWF0aC5tYXgoMCwgbC5zdGFydFRpbWUgKyBsLmR1cmF0aW9uIC0gZSksIG4gPSAxIC0gKHQgLyBsLmR1cmF0aW9uIHx8IDApLCByID0gMCwgaSA9IGwudHdlZW5zLmxlbmd0aDsgciA8IGk7IHIrKylcbiAgICAgICAgbC50d2VlbnNbcl0ucnVuKG4pOyByZXR1cm4gcy5ub3RpZnlXaXRoKG8sIFtsLCBuLCB0XSksIG4gPCAxICYmIGkgPyB0IDogKGkgfHwgcy5ub3RpZnlXaXRoKG8sIFtsLCAxLCAwXSksIHMucmVzb2x2ZVdpdGgobywgW2xdKSwgITEpOyB9LCBsID0gcy5wcm9taXNlKHsgZWxlbTogbywgcHJvcHM6IGsuZXh0ZW5kKHt9LCBlKSwgb3B0czogay5leHRlbmQoITAsIHsgc3BlY2lhbEVhc2luZzoge30sIGVhc2luZzogay5lYXNpbmcuX2RlZmF1bHQgfSwgdCksIG9yaWdpbmFsUHJvcGVydGllczogZSwgb3JpZ2luYWxPcHRpb25zOiB0LCBzdGFydFRpbWU6IHJ0IHx8IGN0KCksIGR1cmF0aW9uOiB0LmR1cmF0aW9uLCB0d2VlbnM6IFtdLCBjcmVhdGVUd2VlbjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBrLlR3ZWVuKG8sIGwub3B0cywgZSwgdCwgbC5vcHRzLnNwZWNpYWxFYXNpbmdbZV0gfHwgbC5vcHRzLmVhc2luZyk7IHJldHVybiBsLnR3ZWVucy5wdXNoKG4pLCBuOyB9LCBzdG9wOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IDAsIG4gPSBlID8gbC50d2VlbnMubGVuZ3RoIDogMDsgaWYgKGEpXG4gICAgICAgICAgICByZXR1cm4gdGhpczsgZm9yIChhID0gITA7IHQgPCBuOyB0KyspXG4gICAgICAgICAgICBsLnR3ZWVuc1t0XS5ydW4oMSk7IHJldHVybiBlID8gKHMubm90aWZ5V2l0aChvLCBbbCwgMSwgMF0pLCBzLnJlc29sdmVXaXRoKG8sIFtsLCBlXSkpIDogcy5yZWplY3RXaXRoKG8sIFtsLCBlXSksIHRoaXM7IH0gfSksIGMgPSBsLnByb3BzOyBmb3IgKCFmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciwgaSwgbywgYTsgZm9yIChuIGluIGUpXG4gICAgICAgIGlmIChpID0gdFtyID0gVihuKV0sIG8gPSBlW25dLCBBcnJheS5pc0FycmF5KG8pICYmIChpID0gb1sxXSwgbyA9IGVbbl0gPSBvWzBdKSwgbiAhPT0gciAmJiAoZVtyXSA9IG8sIGRlbGV0ZSBlW25dKSwgKGEgPSBrLmNzc0hvb2tzW3JdKSAmJiBcImV4cGFuZFwiIGluIGEpXG4gICAgICAgICAgICBmb3IgKG4gaW4gbyA9IGEuZXhwYW5kKG8pLCBkZWxldGUgZVtyXSwgbylcbiAgICAgICAgICAgICAgICBuIGluIGUgfHwgKGVbbl0gPSBvW25dLCB0W25dID0gaSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRbcl0gPSBpOyB9KGMsIGwub3B0cy5zcGVjaWFsRWFzaW5nKTsgciA8IGk7IHIrKylcbiAgICAgICAgaWYgKG4gPSBkdC5wcmVmaWx0ZXJzW3JdLmNhbGwobCwgbywgYywgbC5vcHRzKSlcbiAgICAgICAgICAgIHJldHVybiBtKG4uc3RvcCkgJiYgKGsuX3F1ZXVlSG9va3MobC5lbGVtLCBsLm9wdHMucXVldWUpLnN0b3AgPSBuLnN0b3AuYmluZChuKSksIG47IHJldHVybiBrLm1hcChjLCBwdCwgbCksIG0obC5vcHRzLnN0YXJ0KSAmJiBsLm9wdHMuc3RhcnQuY2FsbChvLCBsKSwgbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsIGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpLCBrLmZ4LnRpbWVyKGsuZXh0ZW5kKHUsIHsgZWxlbTogbywgYW5pbTogbCwgcXVldWU6IGwub3B0cy5xdWV1ZSB9KSksIGw7IH1cbiAgICBrLkFuaW1hdGlvbiA9IGsuZXh0ZW5kKGR0LCB7IHR3ZWVuZXJzOiB7IFwiKlwiOiBbZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0aGlzLmNyZWF0ZVR3ZWVuKGUsIHQpOyByZXR1cm4gbGUobi5lbGVtLCBlLCBuZS5leGVjKHQpLCBuKSwgbjsgfV0gfSwgdHdlZW5lcjogZnVuY3Rpb24gKGUsIHQpIHsgbShlKSA/ICh0ID0gZSwgZSA9IFtcIipcIl0pIDogZSA9IGUubWF0Y2goUik7IGZvciAodmFyIG4sIHIgPSAwLCBpID0gZS5sZW5ndGg7IHIgPCBpOyByKyspXG4gICAgICAgICAgICBuID0gZVtyXSwgZHQudHdlZW5lcnNbbl0gPSBkdC50d2VlbmVyc1tuXSB8fCBbXSwgZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KTsgfSwgcHJlZmlsdGVyczogW2Z1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhLCBzLCB1LCBsLCBjLCBmID0gXCJ3aWR0aFwiIGluIHQgfHwgXCJoZWlnaHRcIiBpbiB0LCBwID0gdGhpcywgZCA9IHt9LCBoID0gZS5zdHlsZSwgZyA9IGUubm9kZVR5cGUgJiYgc2UoZSksIHYgPSBRLmdldChlLCBcImZ4c2hvd1wiKTsgZm9yIChyIGluIG4ucXVldWUgfHwgKG51bGwgPT0gKGEgPSBrLl9xdWV1ZUhvb2tzKGUsIFwiZnhcIikpLnVucXVldWVkICYmIChhLnVucXVldWVkID0gMCwgcyA9IGEuZW1wdHkuZmlyZSwgYS5lbXB0eS5maXJlID0gZnVuY3Rpb24gKCkgeyBhLnVucXVldWVkIHx8IHMoKTsgfSksIGEudW5xdWV1ZWQrKywgcC5hbHdheXMoZnVuY3Rpb24gKCkgeyBwLmFsd2F5cyhmdW5jdGlvbiAoKSB7IGEudW5xdWV1ZWQtLSwgay5xdWV1ZShlLCBcImZ4XCIpLmxlbmd0aCB8fCBhLmVtcHR5LmZpcmUoKTsgfSk7IH0pKSwgdClcbiAgICAgICAgICAgICAgICBpZiAoaSA9IHRbcl0sIHN0LnRlc3QoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZSB0W3JdLCBvID0gbyB8fCBcInRvZ2dsZVwiID09PSBpLCBpID09PSAoZyA/IFwiaGlkZVwiIDogXCJzaG93XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzaG93XCIgIT09IGkgfHwgIXYgfHwgdm9pZCAwID09PSB2W3JdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9ICEwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRbcl0gPSB2ICYmIHZbcl0gfHwgay5zdHlsZShlLCByKTtcbiAgICAgICAgICAgICAgICB9IGlmICgodSA9ICFrLmlzRW1wdHlPYmplY3QodCkpIHx8ICFrLmlzRW1wdHlPYmplY3QoZCkpXG4gICAgICAgICAgICAgICAgZm9yIChyIGluIGYgJiYgMSA9PT0gZS5ub2RlVHlwZSAmJiAobi5vdmVyZmxvdyA9IFtoLm92ZXJmbG93LCBoLm92ZXJmbG93WCwgaC5vdmVyZmxvd1ldLCBudWxsID09IChsID0gdiAmJiB2LmRpc3BsYXkpICYmIChsID0gUS5nZXQoZSwgXCJkaXNwbGF5XCIpKSwgXCJub25lXCIgPT09IChjID0gay5jc3MoZSwgXCJkaXNwbGF5XCIpKSAmJiAobCA/IGMgPSBsIDogKGZlKFtlXSwgITApLCBsID0gZS5zdHlsZS5kaXNwbGF5IHx8IGwsIGMgPSBrLmNzcyhlLCBcImRpc3BsYXlcIiksIGZlKFtlXSkpKSwgKFwiaW5saW5lXCIgPT09IGMgfHwgXCJpbmxpbmUtYmxvY2tcIiA9PT0gYyAmJiBudWxsICE9IGwpICYmIFwibm9uZVwiID09PSBrLmNzcyhlLCBcImZsb2F0XCIpICYmICh1IHx8IChwLmRvbmUoZnVuY3Rpb24gKCkgeyBoLmRpc3BsYXkgPSBsOyB9KSwgbnVsbCA9PSBsICYmIChjID0gaC5kaXNwbGF5LCBsID0gXCJub25lXCIgPT09IGMgPyBcIlwiIDogYykpLCBoLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKSksIG4ub3ZlcmZsb3cgJiYgKGgub3ZlcmZsb3cgPSBcImhpZGRlblwiLCBwLmFsd2F5cyhmdW5jdGlvbiAoKSB7IGgub3ZlcmZsb3cgPSBuLm92ZXJmbG93WzBdLCBoLm92ZXJmbG93WCA9IG4ub3ZlcmZsb3dbMV0sIGgub3ZlcmZsb3dZID0gbi5vdmVyZmxvd1syXTsgfSkpLCB1ID0gITEsIGQpXG4gICAgICAgICAgICAgICAgICAgIHUgfHwgKHYgPyBcImhpZGRlblwiIGluIHYgJiYgKGcgPSB2LmhpZGRlbikgOiB2ID0gUS5hY2Nlc3MoZSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiBsIH0pLCBvICYmICh2LmhpZGRlbiA9ICFnKSwgZyAmJiBmZShbZV0sICEwKSwgcC5kb25lKGZ1bmN0aW9uICgpIHsgZm9yIChyIGluIGcgfHwgZmUoW2VdKSwgUS5yZW1vdmUoZSwgXCJmeHNob3dcIiksIGQpXG4gICAgICAgICAgICAgICAgICAgICAgICBrLnN0eWxlKGUsIHIsIGRbcl0pOyB9KSksIHUgPSBwdChnID8gdltyXSA6IDAsIHIsIHApLCByIGluIHYgfHwgKHZbcl0gPSB1LnN0YXJ0LCBnICYmICh1LmVuZCA9IHUuc3RhcnQsIHUuc3RhcnQgPSAwKSk7IH1dLCBwcmVmaWx0ZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHQgPyBkdC5wcmVmaWx0ZXJzLnVuc2hpZnQoZSkgOiBkdC5wcmVmaWx0ZXJzLnB1c2goZSk7IH0gfSksIGsuc3BlZWQgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IGUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSA/IGsuZXh0ZW5kKHt9LCBlKSA6IHsgY29tcGxldGU6IG4gfHwgIW4gJiYgdCB8fCBtKGUpICYmIGUsIGR1cmF0aW9uOiBlLCBlYXNpbmc6IG4gJiYgdCB8fCB0ICYmICFtKHQpICYmIHQgfTsgcmV0dXJuIGsuZngub2ZmID8gci5kdXJhdGlvbiA9IDAgOiBcIm51bWJlclwiICE9IHR5cGVvZiByLmR1cmF0aW9uICYmIChyLmR1cmF0aW9uIGluIGsuZnguc3BlZWRzID8gci5kdXJhdGlvbiA9IGsuZnguc3BlZWRzW3IuZHVyYXRpb25dIDogci5kdXJhdGlvbiA9IGsuZnguc3BlZWRzLl9kZWZhdWx0KSwgbnVsbCAhPSByLnF1ZXVlICYmICEwICE9PSByLnF1ZXVlIHx8IChyLnF1ZXVlID0gXCJmeFwiKSwgci5vbGQgPSByLmNvbXBsZXRlLCByLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyBtKHIub2xkKSAmJiByLm9sZC5jYWxsKHRoaXMpLCByLnF1ZXVlICYmIGsuZGVxdWV1ZSh0aGlzLCByLnF1ZXVlKTsgfSwgcjsgfSwgay5mbi5leHRlbmQoeyBmYWRlVG86IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHJldHVybiB0aGlzLmZpbHRlcihzZSkuY3NzKFwib3BhY2l0eVwiLCAwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHQgfSwgZSwgbiwgcik7IH0sIGFuaW1hdGU6IGZ1bmN0aW9uICh0LCBlLCBuLCByKSB7IHZhciBpID0gay5pc0VtcHR5T2JqZWN0KHQpLCBvID0gay5zcGVlZChlLCBuLCByKSwgYSA9IGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBkdCh0aGlzLCBrLmV4dGVuZCh7fSwgdCksIG8pOyAoaSB8fCBRLmdldCh0aGlzLCBcImZpbmlzaFwiKSkgJiYgZS5zdG9wKCEwKTsgfTsgcmV0dXJuIGEuZmluaXNoID0gYSwgaSB8fCAhMSA9PT0gby5xdWV1ZSA/IHRoaXMuZWFjaChhKSA6IHRoaXMucXVldWUoby5xdWV1ZSwgYSk7IH0sIHN0b3A6IGZ1bmN0aW9uIChpLCBlLCBvKSB7IHZhciBhID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnN0b3A7IGRlbGV0ZSBlLnN0b3AsIHQobyk7IH07IHJldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiBpICYmIChvID0gZSwgZSA9IGksIGkgPSB2b2lkIDApLCBlICYmICExICE9PSBpICYmIHRoaXMucXVldWUoaSB8fCBcImZ4XCIsIFtdKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSAhMCwgdCA9IG51bGwgIT0gaSAmJiBpICsgXCJxdWV1ZUhvb2tzXCIsIG4gPSBrLnRpbWVycywgciA9IFEuZ2V0KHRoaXMpOyBpZiAodClcbiAgICAgICAgICAgIHJbdF0gJiYgclt0XS5zdG9wICYmIGEoclt0XSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZvciAodCBpbiByKVxuICAgICAgICAgICAgICAgIHJbdF0gJiYgclt0XS5zdG9wICYmIHV0LnRlc3QodCkgJiYgYShyW3RdKTsgZm9yICh0ID0gbi5sZW5ndGg7IHQtLTspXG4gICAgICAgICAgICBuW3RdLmVsZW0gIT09IHRoaXMgfHwgbnVsbCAhPSBpICYmIG5bdF0ucXVldWUgIT09IGkgfHwgKG5bdF0uYW5pbS5zdG9wKG8pLCBlID0gITEsIG4uc3BsaWNlKHQsIDEpKTsgIWUgJiYgbyB8fCBrLmRlcXVldWUodGhpcywgaSk7IH0pOyB9LCBmaW5pc2g6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAhMSAhPT0gYSAmJiAoYSA9IGEgfHwgXCJmeFwiKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGUsIHQgPSBRLmdldCh0aGlzKSwgbiA9IHRbYSArIFwicXVldWVcIl0sIHIgPSB0W2EgKyBcInF1ZXVlSG9va3NcIl0sIGkgPSBrLnRpbWVycywgbyA9IG4gPyBuLmxlbmd0aCA6IDA7IGZvciAodC5maW5pc2ggPSAhMCwgay5xdWV1ZSh0aGlzLCBhLCBbXSksIHIgJiYgci5zdG9wICYmIHIuc3RvcC5jYWxsKHRoaXMsICEwKSwgZSA9IGkubGVuZ3RoOyBlLS07KVxuICAgICAgICAgICAgaVtlXS5lbGVtID09PSB0aGlzICYmIGlbZV0ucXVldWUgPT09IGEgJiYgKGlbZV0uYW5pbS5zdG9wKCEwKSwgaS5zcGxpY2UoZSwgMSkpOyBmb3IgKGUgPSAwOyBlIDwgbzsgZSsrKVxuICAgICAgICAgICAgbltlXSAmJiBuW2VdLmZpbmlzaCAmJiBuW2VdLmZpbmlzaC5jYWxsKHRoaXMpOyBkZWxldGUgdC5maW5pc2g7IH0pOyB9IH0pLCBrLmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uIChlLCByKSB7IHZhciBpID0gay5mbltyXTsgay5mbltyXSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBudWxsID09IGUgfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIGUgPyBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0aGlzLmFuaW1hdGUoZnQociwgITApLCBlLCB0LCBuKTsgfTsgfSksIGsuZWFjaCh7IHNsaWRlRG93bjogZnQoXCJzaG93XCIpLCBzbGlkZVVwOiBmdChcImhpZGVcIiksIHNsaWRlVG9nZ2xlOiBmdChcInRvZ2dsZVwiKSwgZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sIGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSwgZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH0gfSwgZnVuY3Rpb24gKGUsIHIpIHsgay5mbltlXSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiB0aGlzLmFuaW1hdGUociwgZSwgdCwgbik7IH07IH0pLCBrLnRpbWVycyA9IFtdLCBrLmZ4LnRpY2sgPSBmdW5jdGlvbiAoKSB7IHZhciBlLCB0ID0gMCwgbiA9IGsudGltZXJzOyBmb3IgKHJ0ID0gRGF0ZS5ub3coKTsgdCA8IG4ubGVuZ3RoOyB0KyspXG4gICAgICAgIChlID0gblt0XSkoKSB8fCBuW3RdICE9PSBlIHx8IG4uc3BsaWNlKHQtLSwgMSk7IG4ubGVuZ3RoIHx8IGsuZnguc3RvcCgpLCBydCA9IHZvaWQgMDsgfSwgay5meC50aW1lciA9IGZ1bmN0aW9uIChlKSB7IGsudGltZXJzLnB1c2goZSksIGsuZnguc3RhcnQoKTsgfSwgay5meC5pbnRlcnZhbCA9IDEzLCBrLmZ4LnN0YXJ0ID0gZnVuY3Rpb24gKCkgeyBpdCB8fCAoaXQgPSAhMCwgbHQoKSk7IH0sIGsuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHsgaXQgPSBudWxsOyB9LCBrLmZ4LnNwZWVkcyA9IHsgc2xvdzogNjAwLCBmYXN0OiAyMDAsIF9kZWZhdWx0OiA0MDAgfSwgay5mbi5kZWxheSA9IGZ1bmN0aW9uIChyLCBlKSB7IHJldHVybiByID0gay5meCAmJiBrLmZ4LnNwZWVkc1tyXSB8fCByLCBlID0gZSB8fCBcImZ4XCIsIHRoaXMucXVldWUoZSwgZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBDLnNldFRpbWVvdXQoZSwgcik7IHQuc3RvcCA9IGZ1bmN0aW9uICgpIHsgQy5jbGVhclRpbWVvdXQobik7IH07IH0pOyB9LCBvdCA9IEUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBhdCA9IEUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLCBvdC50eXBlID0gXCJjaGVja2JveFwiLCB5LmNoZWNrT24gPSBcIlwiICE9PSBvdC52YWx1ZSwgeS5vcHRTZWxlY3RlZCA9IGF0LnNlbGVjdGVkLCAob3QgPSBFLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkudmFsdWUgPSBcInRcIiwgb3QudHlwZSA9IFwicmFkaW9cIiwgeS5yYWRpb1ZhbHVlID0gXCJ0XCIgPT09IG90LnZhbHVlO1xuICAgIHZhciBodCwgZ3QgPSBrLmV4cHIuYXR0ckhhbmRsZTtcbiAgICBrLmZuLmV4dGVuZCh7IGF0dHI6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBfKHRoaXMsIGsuYXR0ciwgZSwgdCwgMSA8IGFyZ3VtZW50cy5sZW5ndGgpOyB9LCByZW1vdmVBdHRyOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgay5yZW1vdmVBdHRyKHRoaXMsIGUpOyB9KTsgfSB9KSwgay5leHRlbmQoeyBhdHRyOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbyA9IGUubm9kZVR5cGU7IGlmICgzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbylcbiAgICAgICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBlLmdldEF0dHJpYnV0ZSA/IGsucHJvcChlLCB0LCBuKSA6ICgxID09PSBvICYmIGsuaXNYTUxEb2MoZSkgfHwgKGkgPSBrLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldIHx8IChrLmV4cHIubWF0Y2guYm9vbC50ZXN0KHQpID8gaHQgOiB2b2lkIDApKSwgdm9pZCAwICE9PSBuID8gbnVsbCA9PT0gbiA/IHZvaWQgay5yZW1vdmVBdHRyKGUsIHQpIDogaSAmJiBcInNldFwiIGluIGkgJiYgdm9pZCAwICE9PSAociA9IGkuc2V0KGUsIG4sIHQpKSA/IHIgOiAoZS5zZXRBdHRyaWJ1dGUodCwgbiArIFwiXCIpLCBuKSA6IGkgJiYgXCJnZXRcIiBpbiBpICYmIG51bGwgIT09IChyID0gaS5nZXQoZSwgdCkpID8gciA6IG51bGwgPT0gKHIgPSBrLmZpbmQuYXR0cihlLCB0KSkgPyB2b2lkIDAgOiByKTsgfSwgYXR0ckhvb2tzOiB7IHR5cGU6IHsgc2V0OiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIXkucmFkaW9WYWx1ZSAmJiBcInJhZGlvXCIgPT09IHQgJiYgQShlLCBcImlucHV0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCB0KSwgbiAmJiAoZS52YWx1ZSA9IG4pLCB0O1xuICAgICAgICAgICAgICAgIH0gfSB9IH0sIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gMCwgaSA9IHQgJiYgdC5tYXRjaChSKTsgaWYgKGkgJiYgMSA9PT0gZS5ub2RlVHlwZSlcbiAgICAgICAgICAgIHdoaWxlIChuID0gaVtyKytdKVxuICAgICAgICAgICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKG4pOyB9IH0pLCBodCA9IHsgc2V0OiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gITEgPT09IHQgPyBrLnJlbW92ZUF0dHIoZSwgbikgOiBlLnNldEF0dHJpYnV0ZShuLCBuKSwgbjsgfSB9LCBrLmVhY2goay5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgYSA9IGd0W3RdIHx8IGsuZmluZC5hdHRyOyBndFt0XSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvID0gdC50b0xvd2VyQ2FzZSgpOyByZXR1cm4gbiB8fCAoaSA9IGd0W29dLCBndFtvXSA9IHIsIHIgPSBudWxsICE9IGEoZSwgdCwgbikgPyBvIDogbnVsbCwgZ3Rbb10gPSBpKSwgcjsgfTsgfSk7XG4gICAgdmFyIHZ0ID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSwgeXQgPSAvXig/OmF8YXJlYSkkL2k7XG4gICAgZnVuY3Rpb24gbXQoZSkgeyByZXR1cm4gKGUubWF0Y2goUikgfHwgW10pLmpvaW4oXCIgXCIpOyB9XG4gICAgZnVuY3Rpb24geHQoZSkgeyByZXR1cm4gZS5nZXRBdHRyaWJ1dGUgJiYgZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiOyB9XG4gICAgZnVuY3Rpb24gYnQoZSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShlKSA/IGUgOiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUubWF0Y2goUikgfHwgW107IH1cbiAgICBrLmZuLmV4dGVuZCh7IHByb3A6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBfKHRoaXMsIGsucHJvcCwgZSwgdCwgMSA8IGFyZ3VtZW50cy5sZW5ndGgpOyB9LCByZW1vdmVQcm9wOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgZGVsZXRlIHRoaXNbay5wcm9wRml4W2VdIHx8IGVdOyB9KTsgfSB9KSwgay5leHRlbmQoeyBwcm9wOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbyA9IGUubm9kZVR5cGU7IGlmICgzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbylcbiAgICAgICAgICAgIHJldHVybiAxID09PSBvICYmIGsuaXNYTUxEb2MoZSkgfHwgKHQgPSBrLnByb3BGaXhbdF0gfHwgdCwgaSA9IGsucHJvcEhvb2tzW3RdKSwgdm9pZCAwICE9PSBuID8gaSAmJiBcInNldFwiIGluIGkgJiYgdm9pZCAwICE9PSAociA9IGkuc2V0KGUsIG4sIHQpKSA/IHIgOiBlW3RdID0gbiA6IGkgJiYgXCJnZXRcIiBpbiBpICYmIG51bGwgIT09IChyID0gaS5nZXQoZSwgdCkpID8gciA6IGVbdF07IH0sIHByb3BIb29rczogeyB0YWJJbmRleDogeyBnZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gay5maW5kLmF0dHIoZSwgXCJ0YWJpbmRleFwiKTsgcmV0dXJuIHQgPyBwYXJzZUludCh0LCAxMCkgOiB2dC50ZXN0KGUubm9kZU5hbWUpIHx8IHl0LnRlc3QoZS5ub2RlTmFtZSkgJiYgZS5ocmVmID8gMCA6IC0xOyB9IH0gfSwgcHJvcEZpeDogeyBcImZvclwiOiBcImh0bWxGb3JcIiwgXCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiIH0gfSksIHkub3B0U2VsZWN0ZWQgfHwgKGsucHJvcEhvb2tzLnNlbGVjdGVkID0geyBnZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5wYXJlbnROb2RlOyByZXR1cm4gdCAmJiB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsIG51bGw7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnBhcmVudE5vZGU7IHQgJiYgKHQuc2VsZWN0ZWRJbmRleCwgdC5wYXJlbnROb2RlICYmIHQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KTsgfSB9KSwgay5lYWNoKFtcInRhYkluZGV4XCIsIFwicmVhZE9ubHlcIiwgXCJtYXhMZW5ndGhcIiwgXCJjZWxsU3BhY2luZ1wiLCBcImNlbGxQYWRkaW5nXCIsIFwicm93U3BhblwiLCBcImNvbFNwYW5cIiwgXCJ1c2VNYXBcIiwgXCJmcmFtZUJvcmRlclwiLCBcImNvbnRlbnRFZGl0YWJsZVwiXSwgZnVuY3Rpb24gKCkgeyBrLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXSA9IHRoaXM7IH0pLCBrLmZuLmV4dGVuZCh7IGFkZENsYXNzOiBmdW5jdGlvbiAodCkgeyB2YXIgZSwgbiwgciwgaSwgbywgYSwgcywgdSA9IDA7IGlmIChtKHQpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZSkgeyBrKHRoaXMpLmFkZENsYXNzKHQuY2FsbCh0aGlzLCBlLCB4dCh0aGlzKSkpOyB9KTsgaWYgKChlID0gYnQodCkpLmxlbmd0aClcbiAgICAgICAgICAgIHdoaWxlIChuID0gdGhpc1t1KytdKVxuICAgICAgICAgICAgICAgIGlmIChpID0geHQobiksIHIgPSAxID09PSBuLm5vZGVUeXBlICYmIFwiIFwiICsgbXQoaSkgKyBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICBhID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG8gPSBlW2ErK10pXG4gICAgICAgICAgICAgICAgICAgICAgICByLmluZGV4T2YoXCIgXCIgKyBvICsgXCIgXCIpIDwgMCAmJiAociArPSBvICsgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICBpICE9PSAocyA9IG10KHIpKSAmJiBuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHMpO1xuICAgICAgICAgICAgICAgIH0gcmV0dXJuIHRoaXM7IH0sIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAodCkgeyB2YXIgZSwgbiwgciwgaSwgbywgYSwgcywgdSA9IDA7IGlmIChtKHQpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZSkgeyBrKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLCBlLCB4dCh0aGlzKSkpOyB9KTsgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsIFwiXCIpOyBpZiAoKGUgPSBidCh0KSkubGVuZ3RoKVxuICAgICAgICAgICAgd2hpbGUgKG4gPSB0aGlzW3UrK10pXG4gICAgICAgICAgICAgICAgaWYgKGkgPSB4dChuKSwgciA9IDEgPT09IG4ubm9kZVR5cGUgJiYgXCIgXCIgKyBtdChpKSArIFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobyA9IGVbYSsrXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgtMSA8IHIuaW5kZXhPZihcIiBcIiArIG8gKyBcIiBcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHIucmVwbGFjZShcIiBcIiArIG8gKyBcIiBcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICBpICE9PSAocyA9IG10KHIpKSAmJiBuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHMpO1xuICAgICAgICAgICAgICAgIH0gcmV0dXJuIHRoaXM7IH0sIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiAoaSwgdCkgeyB2YXIgbyA9IHR5cGVvZiBpLCBhID0gXCJzdHJpbmdcIiA9PT0gbyB8fCBBcnJheS5pc0FycmF5KGkpOyByZXR1cm4gXCJib29sZWFuXCIgPT0gdHlwZW9mIHQgJiYgYSA/IHQgPyB0aGlzLmFkZENsYXNzKGkpIDogdGhpcy5yZW1vdmVDbGFzcyhpKSA6IG0oaSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHsgayh0aGlzKS50b2dnbGVDbGFzcyhpLmNhbGwodGhpcywgZSwgeHQodGhpcyksIHQpLCB0KTsgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyB2YXIgZSwgdCwgbiwgcjsgaWYgKGEpIHtcbiAgICAgICAgICAgIHQgPSAwLCBuID0gayh0aGlzKSwgciA9IGJ0KGkpO1xuICAgICAgICAgICAgd2hpbGUgKGUgPSByW3QrK10pXG4gICAgICAgICAgICAgICAgbi5oYXNDbGFzcyhlKSA/IG4ucmVtb3ZlQ2xhc3MoZSkgOiBuLmFkZENsYXNzKGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaSAmJiBcImJvb2xlYW5cIiAhPT0gbyB8fCAoKGUgPSB4dCh0aGlzKSkgJiYgUS5zZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGUpLCB0aGlzLnNldEF0dHJpYnV0ZSAmJiB0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGUgfHwgITEgPT09IGkgPyBcIlwiIDogUS5nZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIpIHx8IFwiXCIpKTsgfSk7IH0sIGhhc0NsYXNzOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciA9IDA7IHQgPSBcIiBcIiArIGUgKyBcIiBcIjsgd2hpbGUgKG4gPSB0aGlzW3IrK10pXG4gICAgICAgICAgICBpZiAoMSA9PT0gbi5ub2RlVHlwZSAmJiAtMSA8IChcIiBcIiArIG10KHh0KG4pKSArIFwiIFwiKS5pbmRleE9mKHQpKVxuICAgICAgICAgICAgICAgIHJldHVybiAhMDsgcmV0dXJuICExOyB9IH0pO1xuICAgIHZhciB3dCA9IC9cXHIvZztcbiAgICBrLmZuLmV4dGVuZCh7IHZhbDogZnVuY3Rpb24gKG4pIHsgdmFyIHIsIGUsIGksIHQgPSB0aGlzWzBdOyByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpID0gbShuKSwgdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7IHZhciB0OyAxID09PSB0aGlzLm5vZGVUeXBlICYmIChudWxsID09ICh0ID0gaSA/IG4uY2FsbCh0aGlzLCBlLCBrKHRoaXMpLnZhbCgpKSA6IG4pID8gdCA9IFwiXCIgOiBcIm51bWJlclwiID09IHR5cGVvZiB0ID8gdCArPSBcIlwiIDogQXJyYXkuaXNBcnJheSh0KSAmJiAodCA9IGsubWFwKHQsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsID09IGUgPyBcIlwiIDogZSArIFwiXCI7IH0pKSwgKHIgPSBrLnZhbEhvb2tzW3RoaXMudHlwZV0gfHwgay52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSAmJiBcInNldFwiIGluIHIgJiYgdm9pZCAwICE9PSByLnNldCh0aGlzLCB0LCBcInZhbHVlXCIpIHx8ICh0aGlzLnZhbHVlID0gdCkpOyB9KSkgOiB0ID8gKHIgPSBrLnZhbEhvb2tzW3QudHlwZV0gfHwgay52YWxIb29rc1t0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSAmJiBcImdldFwiIGluIHIgJiYgdm9pZCAwICE9PSAoZSA9IHIuZ2V0KHQsIFwidmFsdWVcIikpID8gZSA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIChlID0gdC52YWx1ZSkgPyBlLnJlcGxhY2Uod3QsIFwiXCIpIDogbnVsbCA9PSBlID8gXCJcIiA6IGUgOiB2b2lkIDA7IH0gfSksIGsuZXh0ZW5kKHsgdmFsSG9va3M6IHsgb3B0aW9uOiB7IGdldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBrLmZpbmQuYXR0cihlLCBcInZhbHVlXCIpOyByZXR1cm4gbnVsbCAhPSB0ID8gdCA6IG10KGsudGV4dChlKSk7IH0gfSwgc2VsZWN0OiB7IGdldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4sIHIsIGkgPSBlLm9wdGlvbnMsIG8gPSBlLnNlbGVjdGVkSW5kZXgsIGEgPSBcInNlbGVjdC1vbmVcIiA9PT0gZS50eXBlLCBzID0gYSA/IG51bGwgOiBbXSwgdSA9IGEgPyBvICsgMSA6IGkubGVuZ3RoOyBmb3IgKHIgPSBvIDwgMCA/IHUgOiBhID8gbyA6IDA7IHIgPCB1OyByKyspXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKG4gPSBpW3JdKS5zZWxlY3RlZCB8fCByID09PSBvKSAmJiAhbi5kaXNhYmxlZCAmJiAoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhQShuLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9IGsobikudmFsKCksIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2godCk7XG4gICAgICAgICAgICAgICAgICAgIH0gcmV0dXJuIHM7IH0sIHNldDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIsIGkgPSBlLm9wdGlvbnMsIG8gPSBrLm1ha2VBcnJheSh0KSwgYSA9IGkubGVuZ3RoOyB3aGlsZSAoYS0tKVxuICAgICAgICAgICAgICAgICAgICAoKHIgPSBpW2FdKS5zZWxlY3RlZCA9IC0xIDwgay5pbkFycmF5KGsudmFsSG9va3Mub3B0aW9uLmdldChyKSwgbykpICYmIChuID0gITApOyByZXR1cm4gbiB8fCAoZS5zZWxlY3RlZEluZGV4ID0gLTEpLCBvOyB9IH0gfSB9KSwgay5lYWNoKFtcInJhZGlvXCIsIFwiY2hlY2tib3hcIl0sIGZ1bmN0aW9uICgpIHsgay52YWxIb29rc1t0aGlzXSA9IHsgc2V0OiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoQXJyYXkuaXNBcnJheSh0KSlcbiAgICAgICAgICAgIHJldHVybiBlLmNoZWNrZWQgPSAtMSA8IGsuaW5BcnJheShrKGUpLnZhbCgpLCB0KTsgfSB9LCB5LmNoZWNrT24gfHwgKGsudmFsSG9va3NbdGhpc10uZ2V0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT09IGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPyBcIm9uXCIgOiBlLnZhbHVlOyB9KTsgfSksIHkuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gQztcbiAgICB2YXIgVHQgPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sIEN0ID0gZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfTtcbiAgICBrLmV4dGVuZChrLmV2ZW50LCB7IHRyaWdnZXI6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhLCBzLCB1LCBsLCBjLCBmLCBwID0gW24gfHwgRV0sIGQgPSB2LmNhbGwoZSwgXCJ0eXBlXCIpID8gZS50eXBlIDogZSwgaCA9IHYuY2FsbChlLCBcIm5hbWVzcGFjZVwiKSA/IGUubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdOyBpZiAobyA9IGYgPSBhID0gbiA9IG4gfHwgRSwgMyAhPT0gbi5ub2RlVHlwZSAmJiA4ICE9PSBuLm5vZGVUeXBlICYmICFUdC50ZXN0KGQgKyBrLmV2ZW50LnRyaWdnZXJlZCkgJiYgKC0xIDwgZC5pbmRleE9mKFwiLlwiKSAmJiAoZCA9IChoID0gZC5zcGxpdChcIi5cIikpLnNoaWZ0KCksIGguc29ydCgpKSwgdSA9IGQuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIGQsIChlID0gZVtrLmV4cGFuZG9dID8gZSA6IG5ldyBrLkV2ZW50KGQsIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgZSkpLmlzVHJpZ2dlciA9IHIgPyAyIDogMywgZS5uYW1lc3BhY2UgPSBoLmpvaW4oXCIuXCIpLCBlLnJuYW1lc3BhY2UgPSBlLm5hbWVzcGFjZSA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIGguam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOiBudWxsLCBlLnJlc3VsdCA9IHZvaWQgMCwgZS50YXJnZXQgfHwgKGUudGFyZ2V0ID0gbiksIHQgPSBudWxsID09IHQgPyBbZV0gOiBrLm1ha2VBcnJheSh0LCBbZV0pLCBjID0gay5ldmVudC5zcGVjaWFsW2RdIHx8IHt9LCByIHx8ICFjLnRyaWdnZXIgfHwgITEgIT09IGMudHJpZ2dlci5hcHBseShuLCB0KSkpIHtcbiAgICAgICAgICAgIGlmICghciAmJiAhYy5ub0J1YmJsZSAmJiAheChuKSkge1xuICAgICAgICAgICAgICAgIGZvciAocyA9IGMuZGVsZWdhdGVUeXBlIHx8IGQsIFR0LnRlc3QocyArIGQpIHx8IChvID0gby5wYXJlbnROb2RlKTsgbzsgbyA9IG8ucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgcC5wdXNoKG8pLCBhID0gbztcbiAgICAgICAgICAgICAgICBhID09PSAobi5vd25lckRvY3VtZW50IHx8IEUpICYmIHAucHVzaChhLmRlZmF1bHRWaWV3IHx8IGEucGFyZW50V2luZG93IHx8IEMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoKG8gPSBwW2krK10pICYmICFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICAgICAgZiA9IG8sIGUudHlwZSA9IDEgPCBpID8gcyA6IGMuYmluZFR5cGUgfHwgZCwgKGwgPSAoUS5nZXQobywgXCJldmVudHNcIikgfHwge30pW2UudHlwZV0gJiYgUS5nZXQobywgXCJoYW5kbGVcIikpICYmIGwuYXBwbHkobywgdCksIChsID0gdSAmJiBvW3VdKSAmJiBsLmFwcGx5ICYmIEcobykgJiYgKGUucmVzdWx0ID0gbC5hcHBseShvLCB0KSwgITEgPT09IGUucmVzdWx0ICYmIGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICByZXR1cm4gZS50eXBlID0gZCwgciB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGMuX2RlZmF1bHQgJiYgITEgIT09IGMuX2RlZmF1bHQuYXBwbHkocC5wb3AoKSwgdCkgfHwgIUcobikgfHwgdSAmJiBtKG5bZF0pICYmICF4KG4pICYmICgoYSA9IG5bdV0pICYmIChuW3VdID0gbnVsbCksIGsuZXZlbnQudHJpZ2dlcmVkID0gZCwgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIGYuYWRkRXZlbnRMaXN0ZW5lcihkLCBDdCksIG5bZF0oKSwgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIGYucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLCBDdCksIGsuZXZlbnQudHJpZ2dlcmVkID0gdm9pZCAwLCBhICYmIChuW3VdID0gYSkpLCBlLnJlc3VsdDtcbiAgICAgICAgfSB9LCBzaW11bGF0ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSBrLmV4dGVuZChuZXcgay5FdmVudCwgbiwgeyB0eXBlOiBlLCBpc1NpbXVsYXRlZDogITAgfSk7IGsuZXZlbnQudHJpZ2dlcihyLCBudWxsLCB0KTsgfSB9KSwgay5mbi5leHRlbmQoeyB0cmlnZ2VyOiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgay5ldmVudC50cmlnZ2VyKGUsIHQsIHRoaXMpOyB9KTsgfSwgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdGhpc1swXTsgaWYgKG4pXG4gICAgICAgICAgICByZXR1cm4gay5ldmVudC50cmlnZ2VyKGUsIHQsIG4sICEwKTsgfSB9KSwgeS5mb2N1c2luIHx8IGsuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uIChuLCByKSB7IHZhciBpID0gZnVuY3Rpb24gKGUpIHsgay5ldmVudC5zaW11bGF0ZShyLCBlLnRhcmdldCwgay5ldmVudC5maXgoZSkpOyB9OyBrLmV2ZW50LnNwZWNpYWxbcl0gPSB7IHNldHVwOiBmdW5jdGlvbiAoKSB7IHZhciBlID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsIHQgPSBRLmFjY2VzcyhlLCByKTsgdCB8fCBlLmFkZEV2ZW50TGlzdGVuZXIobiwgaSwgITApLCBRLmFjY2VzcyhlLCByLCAodCB8fCAwKSArIDEpOyB9LCB0ZWFyZG93bjogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLCB0ID0gUS5hY2Nlc3MoZSwgcikgLSAxOyB0ID8gUS5hY2Nlc3MoZSwgciwgdCkgOiAoZS5yZW1vdmVFdmVudExpc3RlbmVyKG4sIGksICEwKSwgUS5yZW1vdmUoZSwgcikpOyB9IH07IH0pO1xuICAgIHZhciBFdCA9IEMubG9jYXRpb24sIGt0ID0gRGF0ZS5ub3coKSwgU3QgPSAvXFw/LztcbiAgICBrLnBhcnNlWE1MID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IGlmICghZSB8fCBcInN0cmluZ1wiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4gbnVsbDsgdHJ5IHtcbiAgICAgICAgdCA9IChuZXcgQy5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhlLCBcInRleHQveG1sXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0ID0gdm9pZCAwO1xuICAgIH0gcmV0dXJuIHQgJiYgIXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGggfHwgay5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGUpLCB0OyB9O1xuICAgIHZhciBOdCA9IC9cXFtcXF0kLywgQXQgPSAvXFxyP1xcbi9nLCBEdCA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSwganQgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG4gICAgZnVuY3Rpb24gcXQobiwgZSwgciwgaSkgeyB2YXIgdDsgaWYgKEFycmF5LmlzQXJyYXkoZSkpXG4gICAgICAgIGsuZWFjaChlLCBmdW5jdGlvbiAoZSwgdCkgeyByIHx8IE50LnRlc3QobikgPyBpKG4sIHQpIDogcXQobiArIFwiW1wiICsgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgbnVsbCAhPSB0ID8gZSA6IFwiXCIpICsgXCJdXCIsIHQsIHIsIGkpOyB9KTtcbiAgICBlbHNlIGlmIChyIHx8IFwib2JqZWN0XCIgIT09IHcoZSkpXG4gICAgICAgIGkobiwgZSk7XG4gICAgZWxzZVxuICAgICAgICBmb3IgKHQgaW4gZSlcbiAgICAgICAgICAgIHF0KG4gKyBcIltcIiArIHQgKyBcIl1cIiwgZVt0XSwgciwgaSk7IH1cbiAgICBrLnBhcmFtID0gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSBbXSwgaSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gbSh0KSA/IHQoKSA6IHQ7IHJbci5sZW5ndGhdID0gZW5jb2RlVVJJQ29tcG9uZW50KGUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobnVsbCA9PSBuID8gXCJcIiA6IG4pOyB9OyBpZiAobnVsbCA9PSBlKVxuICAgICAgICByZXR1cm4gXCJcIjsgaWYgKEFycmF5LmlzQXJyYXkoZSkgfHwgZS5qcXVlcnkgJiYgIWsuaXNQbGFpbk9iamVjdChlKSlcbiAgICAgICAgay5lYWNoKGUsIGZ1bmN0aW9uICgpIHsgaSh0aGlzLm5hbWUsIHRoaXMudmFsdWUpOyB9KTtcbiAgICBlbHNlXG4gICAgICAgIGZvciAobiBpbiBlKVxuICAgICAgICAgICAgcXQobiwgZVtuXSwgdCwgaSk7IHJldHVybiByLmpvaW4oXCImXCIpOyB9LCBrLmZuLmV4dGVuZCh7IHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gay5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpOyB9LCBzZXJpYWxpemVBcnJheTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkgeyB2YXIgZSA9IGsucHJvcCh0aGlzLCBcImVsZW1lbnRzXCIpOyByZXR1cm4gZSA/IGsubWFrZUFycmF5KGUpIDogdGhpczsgfSkuZmlsdGVyKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSB0aGlzLnR5cGU7IHJldHVybiB0aGlzLm5hbWUgJiYgIWsodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikgJiYganQudGVzdCh0aGlzLm5vZGVOYW1lKSAmJiAhRHQudGVzdChlKSAmJiAodGhpcy5jaGVja2VkIHx8ICFwZS50ZXN0KGUpKTsgfSkubWFwKGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gayh0aGlzKS52YWwoKTsgcmV0dXJuIG51bGwgPT0gbiA/IG51bGwgOiBBcnJheS5pc0FycmF5KG4pID8gay5tYXAobiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHsgbmFtZTogdC5uYW1lLCB2YWx1ZTogZS5yZXBsYWNlKEF0LCBcIlxcclxcblwiKSB9OyB9KSA6IHsgbmFtZTogdC5uYW1lLCB2YWx1ZTogbi5yZXBsYWNlKEF0LCBcIlxcclxcblwiKSB9OyB9KS5nZXQoKTsgfSB9KTtcbiAgICB2YXIgTHQgPSAvJTIwL2csIEh0ID0gLyMuKiQvLCBPdCA9IC8oWz8mXSlfPVteJl0qLywgUHQgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLCBSdCA9IC9eKD86R0VUfEhFQUQpJC8sIE10ID0gL15cXC9cXC8vLCBJdCA9IHt9LCBXdCA9IHt9LCAkdCA9IFwiKi9cIi5jb25jYXQoXCIqXCIpLCBGdCA9IEUuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgZnVuY3Rpb24gQnQobykgeyByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAodCA9IGUsIGUgPSBcIipcIik7IHZhciBuLCByID0gMCwgaSA9IGUudG9Mb3dlckNhc2UoKS5tYXRjaChSKSB8fCBbXTsgaWYgKG0odCkpXG4gICAgICAgIHdoaWxlIChuID0gaVtyKytdKVxuICAgICAgICAgICAgXCIrXCIgPT09IG5bMF0gPyAobiA9IG4uc2xpY2UoMSkgfHwgXCIqXCIsIChvW25dID0gb1tuXSB8fCBbXSkudW5zaGlmdCh0KSkgOiAob1tuXSA9IG9bbl0gfHwgW10pLnB1c2godCk7IH07IH1cbiAgICBmdW5jdGlvbiBfdCh0LCBpLCBvLCBhKSB7IHZhciBzID0ge30sIHUgPSB0ID09PSBXdDsgZnVuY3Rpb24gbChlKSB7IHZhciByOyByZXR1cm4gc1tlXSA9ICEwLCBrLmVhY2godFtlXSB8fCBbXSwgZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0KGksIG8sIGEpOyByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgbiB8fCB1IHx8IHNbbl0gPyB1ID8gIShyID0gbikgOiB2b2lkIDAgOiAoaS5kYXRhVHlwZXMudW5zaGlmdChuKSwgbChuKSwgITEpOyB9KSwgcjsgfSByZXR1cm4gbChpLmRhdGFUeXBlc1swXSkgfHwgIXNbXCIqXCJdICYmIGwoXCIqXCIpOyB9XG4gICAgZnVuY3Rpb24genQoZSwgdCkgeyB2YXIgbiwgciwgaSA9IGsuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9OyBmb3IgKG4gaW4gdClcbiAgICAgICAgdm9pZCAwICE9PSB0W25dICYmICgoaVtuXSA/IGUgOiByIHx8IChyID0ge30pKVtuXSA9IHRbbl0pOyByZXR1cm4gciAmJiBrLmV4dGVuZCghMCwgZSwgciksIGU7IH1cbiAgICBGdC5ocmVmID0gRXQuaHJlZiwgay5leHRlbmQoeyBhY3RpdmU6IDAsIGxhc3RNb2RpZmllZDoge30sIGV0YWc6IHt9LCBhamF4U2V0dGluZ3M6IHsgdXJsOiBFdC5ocmVmLCB0eXBlOiBcIkdFVFwiLCBpc0xvY2FsOiAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLy50ZXN0KEV0LnByb3RvY29sKSwgZ2xvYmFsOiAhMCwgcHJvY2Vzc0RhdGE6ICEwLCBhc3luYzogITAsIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLCBhY2NlcHRzOiB7IFwiKlwiOiAkdCwgdGV4dDogXCJ0ZXh0L3BsYWluXCIsIGh0bWw6IFwidGV4dC9odG1sXCIsIHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsIGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCIgfSwgY29udGVudHM6IHsgeG1sOiAvXFxieG1sXFxiLywgaHRtbDogL1xcYmh0bWwvLCBqc29uOiAvXFxianNvblxcYi8gfSwgcmVzcG9uc2VGaWVsZHM6IHsgeG1sOiBcInJlc3BvbnNlWE1MXCIsIHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsIGpzb246IFwicmVzcG9uc2VKU09OXCIgfSwgY29udmVydGVyczogeyBcIiogdGV4dFwiOiBTdHJpbmcsIFwidGV4dCBodG1sXCI6ICEwLCBcInRleHQganNvblwiOiBKU09OLnBhcnNlLCBcInRleHQgeG1sXCI6IGsucGFyc2VYTUwgfSwgZmxhdE9wdGlvbnM6IHsgdXJsOiAhMCwgY29udGV4dDogITAgfSB9LCBhamF4U2V0dXA6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0ID8genQoenQoZSwgay5hamF4U2V0dGluZ3MpLCB0KSA6IHp0KGsuYWpheFNldHRpbmdzLCBlKTsgfSwgYWpheFByZWZpbHRlcjogQnQoSXQpLCBhamF4VHJhbnNwb3J0OiBCdChXdCksIGFqYXg6IGZ1bmN0aW9uIChlLCB0KSB7IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgKHQgPSBlLCBlID0gdm9pZCAwKSwgdCA9IHQgfHwge307IHZhciBjLCBmLCBwLCBuLCBkLCByLCBoLCBnLCBpLCBvLCB2ID0gay5hamF4U2V0dXAoe30sIHQpLCB5ID0gdi5jb250ZXh0IHx8IHYsIG0gPSB2LmNvbnRleHQgJiYgKHkubm9kZVR5cGUgfHwgeS5qcXVlcnkpID8gayh5KSA6IGsuZXZlbnQsIHggPSBrLkRlZmVycmVkKCksIGIgPSBrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCB3ID0gdi5zdGF0dXNDb2RlIHx8IHt9LCBhID0ge30sIHMgPSB7fSwgdSA9IFwiY2FuY2VsZWRcIiwgVCA9IHsgcmVhZHlTdGF0ZTogMCwgZ2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyBpZiAoaCkge1xuICAgICAgICAgICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgICAgICAgICBuID0ge307XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ID0gUHQuZXhlYyhwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG5bdFsxXS50b0xvd2VyQ2FzZSgpICsgXCIgXCJdID0gKG5bdFsxXS50b0xvd2VyQ2FzZSgpICsgXCIgXCJdIHx8IFtdKS5jb25jYXQodFsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHQgPSBuW2UudG9Mb3dlckNhc2UoKSArIFwiIFwiXTtcbiAgICAgICAgICAgIH0gcmV0dXJuIG51bGwgPT0gdCA/IG51bGwgOiB0LmpvaW4oXCIsIFwiKTsgfSwgZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBoID8gcCA6IG51bGw7IH0sIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBudWxsID09IGggJiYgKGUgPSBzW2UudG9Mb3dlckNhc2UoKV0gPSBzW2UudG9Mb3dlckNhc2UoKV0gfHwgZSwgYVtlXSA9IHQpLCB0aGlzOyB9LCBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbnVsbCA9PSBoICYmICh2Lm1pbWVUeXBlID0gZSksIHRoaXM7IH0sIHN0YXR1c0NvZGU6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyBpZiAoZSlcbiAgICAgICAgICAgICAgICBpZiAoaClcbiAgICAgICAgICAgICAgICAgICAgVC5hbHdheXMoZVtULnN0YXR1c10pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yICh0IGluIGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB3W3RdID0gW3dbdF0sIGVbdF1dOyByZXR1cm4gdGhpczsgfSwgYWJvcnQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZSB8fCB1OyByZXR1cm4gYyAmJiBjLmFib3J0KHQpLCBsKDAsIHQpLCB0aGlzOyB9IH07IGlmICh4LnByb21pc2UoVCksIHYudXJsID0gKChlIHx8IHYudXJsIHx8IEV0LmhyZWYpICsgXCJcIikucmVwbGFjZShNdCwgRXQucHJvdG9jb2wgKyBcIi8vXCIpLCB2LnR5cGUgPSB0Lm1ldGhvZCB8fCB0LnR5cGUgfHwgdi5tZXRob2QgfHwgdi50eXBlLCB2LmRhdGFUeXBlcyA9ICh2LmRhdGFUeXBlIHx8IFwiKlwiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKFIpIHx8IFtcIlwiXSwgbnVsbCA9PSB2LmNyb3NzRG9tYWluKSB7XG4gICAgICAgICAgICByID0gRS5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgci5ocmVmID0gdi51cmwsIHIuaHJlZiA9IHIuaHJlZiwgdi5jcm9zc0RvbWFpbiA9IEZ0LnByb3RvY29sICsgXCIvL1wiICsgRnQuaG9zdCAhPSByLnByb3RvY29sICsgXCIvL1wiICsgci5ob3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB2LmNyb3NzRG9tYWluID0gITA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gaWYgKHYuZGF0YSAmJiB2LnByb2Nlc3NEYXRhICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIHYuZGF0YSAmJiAodi5kYXRhID0gay5wYXJhbSh2LmRhdGEsIHYudHJhZGl0aW9uYWwpKSwgX3QoSXQsIHYsIHQsIFQpLCBoKVxuICAgICAgICAgICAgcmV0dXJuIFQ7IGZvciAoaSBpbiAoZyA9IGsuZXZlbnQgJiYgdi5nbG9iYWwpICYmIDAgPT0gay5hY3RpdmUrKyAmJiBrLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksIHYudHlwZSA9IHYudHlwZS50b1VwcGVyQ2FzZSgpLCB2Lmhhc0NvbnRlbnQgPSAhUnQudGVzdCh2LnR5cGUpLCBmID0gdi51cmwucmVwbGFjZShIdCwgXCJcIiksIHYuaGFzQ29udGVudCA/IHYuZGF0YSAmJiB2LnByb2Nlc3NEYXRhICYmIDAgPT09ICh2LmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgKHYuZGF0YSA9IHYuZGF0YS5yZXBsYWNlKEx0LCBcIitcIikpIDogKG8gPSB2LnVybC5zbGljZShmLmxlbmd0aCksIHYuZGF0YSAmJiAodi5wcm9jZXNzRGF0YSB8fCBcInN0cmluZ1wiID09IHR5cGVvZiB2LmRhdGEpICYmIChmICs9IChTdC50ZXN0KGYpID8gXCImXCIgOiBcIj9cIikgKyB2LmRhdGEsIGRlbGV0ZSB2LmRhdGEpLCAhMSA9PT0gdi5jYWNoZSAmJiAoZiA9IGYucmVwbGFjZShPdCwgXCIkMVwiKSwgbyA9IChTdC50ZXN0KGYpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyBrdCsrICsgbyksIHYudXJsID0gZiArIG8pLCB2LmlmTW9kaWZpZWQgJiYgKGsubGFzdE1vZGlmaWVkW2ZdICYmIFQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGsubGFzdE1vZGlmaWVkW2ZdKSwgay5ldGFnW2ZdICYmIFQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIiwgay5ldGFnW2ZdKSksICh2LmRhdGEgJiYgdi5oYXNDb250ZW50ICYmICExICE9PSB2LmNvbnRlbnRUeXBlIHx8IHQuY29udGVudFR5cGUpICYmIFQuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCB2LmNvbnRlbnRUeXBlKSwgVC5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIHYuZGF0YVR5cGVzWzBdICYmIHYuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0gPyB2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dICsgKFwiKlwiICE9PSB2LmRhdGFUeXBlc1swXSA/IFwiLCBcIiArICR0ICsgXCI7IHE9MC4wMVwiIDogXCJcIikgOiB2LmFjY2VwdHNbXCIqXCJdKSwgdi5oZWFkZXJzKVxuICAgICAgICAgICAgVC5zZXRSZXF1ZXN0SGVhZGVyKGksIHYuaGVhZGVyc1tpXSk7IGlmICh2LmJlZm9yZVNlbmQgJiYgKCExID09PSB2LmJlZm9yZVNlbmQuY2FsbCh5LCBULCB2KSB8fCBoKSlcbiAgICAgICAgICAgIHJldHVybiBULmFib3J0KCk7IGlmICh1ID0gXCJhYm9ydFwiLCBiLmFkZCh2LmNvbXBsZXRlKSwgVC5kb25lKHYuc3VjY2VzcyksIFQuZmFpbCh2LmVycm9yKSwgYyA9IF90KFd0LCB2LCB0LCBUKSkge1xuICAgICAgICAgICAgaWYgKFQucmVhZHlTdGF0ZSA9IDEsIGcgJiYgbS50cmlnZ2VyKFwiYWpheFNlbmRcIiwgW1QsIHZdKSwgaClcbiAgICAgICAgICAgICAgICByZXR1cm4gVDtcbiAgICAgICAgICAgIHYuYXN5bmMgJiYgMCA8IHYudGltZW91dCAmJiAoZCA9IEMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IFQuYWJvcnQoXCJ0aW1lb3V0XCIpOyB9LCB2LnRpbWVvdXQpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaCA9ICExLCBjLnNlbmQoYSwgbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIGwoLTEsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGwoLTEsIFwiTm8gVHJhbnNwb3J0XCIpOyBmdW5jdGlvbiBsKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMsIHUsIGwgPSB0OyBoIHx8IChoID0gITAsIGQgJiYgQy5jbGVhclRpbWVvdXQoZCksIGMgPSB2b2lkIDAsIHAgPSByIHx8IFwiXCIsIFQucmVhZHlTdGF0ZSA9IDAgPCBlID8gNCA6IDAsIGkgPSAyMDAgPD0gZSAmJiBlIDwgMzAwIHx8IDMwNCA9PT0gZSwgbiAmJiAocyA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhLCBzID0gZS5jb250ZW50cywgdSA9IGUuZGF0YVR5cGVzOyB3aGlsZSAoXCIqXCIgPT09IHVbMF0pXG4gICAgICAgICAgICB1LnNoaWZ0KCksIHZvaWQgMCA9PT0gciAmJiAociA9IGUubWltZVR5cGUgfHwgdC5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7IGlmIChyKVxuICAgICAgICAgICAgZm9yIChpIGluIHMpXG4gICAgICAgICAgICAgICAgaWYgKHNbaV0gJiYgc1tpXS50ZXN0KHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHUudW5zaGlmdChpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBpZiAodVswXSBpbiBuKVxuICAgICAgICAgICAgbyA9IHVbMF07XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpIGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVbMF0gfHwgZS5jb252ZXJ0ZXJzW2kgKyBcIiBcIiArIHVbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG8gPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYSB8fCAoYSA9IGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbyA9IG8gfHwgYTtcbiAgICAgICAgfSBpZiAobylcbiAgICAgICAgICAgIHJldHVybiBvICE9PSB1WzBdICYmIHUudW5zaGlmdChvKSwgbltvXTsgfSh2LCBULCBuKSksIHMgPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyB2YXIgaSwgbywgYSwgcywgdSwgbCA9IHt9LCBjID0gZS5kYXRhVHlwZXMuc2xpY2UoKTsgaWYgKGNbMV0pXG4gICAgICAgICAgICBmb3IgKGEgaW4gZS5jb252ZXJ0ZXJzKVxuICAgICAgICAgICAgICAgIGxbYS50b0xvd2VyQ2FzZSgpXSA9IGUuY29udmVydGVyc1thXTsgbyA9IGMuc2hpZnQoKTsgd2hpbGUgKG8pXG4gICAgICAgICAgICBpZiAoZS5yZXNwb25zZUZpZWxkc1tvXSAmJiAobltlLnJlc3BvbnNlRmllbGRzW29dXSA9IHQpLCAhdSAmJiByICYmIGUuZGF0YUZpbHRlciAmJiAodCA9IGUuZGF0YUZpbHRlcih0LCBlLmRhdGFUeXBlKSksIHUgPSBvLCBvID0gYy5zaGlmdCgpKVxuICAgICAgICAgICAgICAgIGlmIChcIipcIiA9PT0gbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCIqXCIgIT09IHUgJiYgdSAhPT0gbykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhID0gbFt1ICsgXCIgXCIgKyBvXSB8fCBsW1wiKiBcIiArIG9dKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocyA9IGkuc3BsaXQoXCIgXCIpKVsxXSA9PT0gbyAmJiAoYSA9IGxbdSArIFwiIFwiICsgc1swXV0gfHwgbFtcIiogXCIgKyBzWzBdXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITAgPT09IGEgPyBhID0gbFtpXSA6ICEwICE9PSBsW2ldICYmIChvID0gc1swXSwgYy51bnNoaWZ0KHNbMV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoITAgIT09IGEpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAmJiBlW1widGhyb3dzXCJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBhKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBhKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogYSA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHUgKyBcIiB0byBcIiArIG8gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSByZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHQgfTsgfSh2LCBzLCBULCBpKSwgaSA/ICh2LmlmTW9kaWZpZWQgJiYgKCh1ID0gVC5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIikpICYmIChrLmxhc3RNb2RpZmllZFtmXSA9IHUpLCAodSA9IFQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSAmJiAoay5ldGFnW2ZdID0gdSkpLCAyMDQgPT09IGUgfHwgXCJIRUFEXCIgPT09IHYudHlwZSA/IGwgPSBcIm5vY29udGVudFwiIDogMzA0ID09PSBlID8gbCA9IFwibm90bW9kaWZpZWRcIiA6IChsID0gcy5zdGF0ZSwgbyA9IHMuZGF0YSwgaSA9ICEoYSA9IHMuZXJyb3IpKSkgOiAoYSA9IGwsICFlICYmIGwgfHwgKGwgPSBcImVycm9yXCIsIGUgPCAwICYmIChlID0gMCkpKSwgVC5zdGF0dXMgPSBlLCBULnN0YXR1c1RleHQgPSAodCB8fCBsKSArIFwiXCIsIGkgPyB4LnJlc29sdmVXaXRoKHksIFtvLCBsLCBUXSkgOiB4LnJlamVjdFdpdGgoeSwgW1QsIGwsIGFdKSwgVC5zdGF0dXNDb2RlKHcpLCB3ID0gdm9pZCAwLCBnICYmIG0udHJpZ2dlcihpID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIiwgW1QsIHYsIGkgPyBvIDogYV0pLCBiLmZpcmVXaXRoKHksIFtULCBsXSksIGcgJiYgKG0udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLCBbVCwgdl0pLCAtLWsuYWN0aXZlIHx8IGsuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSk7IH0gcmV0dXJuIFQ7IH0sIGdldEpTT046IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBrLmdldChlLCB0LCBuLCBcImpzb25cIik7IH0sIGdldFNjcmlwdDogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGsuZ2V0KGUsIHZvaWQgMCwgdCwgXCJzY3JpcHRcIik7IH0gfSksIGsuZWFjaChbXCJnZXRcIiwgXCJwb3N0XCJdLCBmdW5jdGlvbiAoZSwgaSkgeyBrW2ldID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgcmV0dXJuIG0odCkgJiYgKHIgPSByIHx8IG4sIG4gPSB0LCB0ID0gdm9pZCAwKSwgay5hamF4KGsuZXh0ZW5kKHsgdXJsOiBlLCB0eXBlOiBpLCBkYXRhVHlwZTogciwgZGF0YTogdCwgc3VjY2VzczogbiB9LCBrLmlzUGxhaW5PYmplY3QoZSkgJiYgZSkpOyB9OyB9KSwgay5fZXZhbFVybCA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBrLmFqYXgoeyB1cmw6IGUsIHR5cGU6IFwiR0VUXCIsIGRhdGFUeXBlOiBcInNjcmlwdFwiLCBjYWNoZTogITAsIGFzeW5jOiAhMSwgZ2xvYmFsOiAhMSwgY29udmVydGVyczogeyBcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uICgpIHsgfSB9LCBkYXRhRmlsdGVyOiBmdW5jdGlvbiAoZSkgeyBrLmdsb2JhbEV2YWwoZSwgdCk7IH0gfSk7IH0sIGsuZm4uZXh0ZW5kKHsgd3JhcEFsbDogZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IHJldHVybiB0aGlzWzBdICYmIChtKGUpICYmIChlID0gZS5jYWxsKHRoaXNbMF0pKSwgdCA9IGsoZSwgdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksIHRoaXNbMF0ucGFyZW50Tm9kZSAmJiB0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSwgdC5tYXAoZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXM7IHdoaWxlIChlLmZpcnN0RWxlbWVudENoaWxkKVxuICAgICAgICAgICAgZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7IHJldHVybiBlOyB9KS5hcHBlbmQodGhpcykpLCB0aGlzOyB9LCB3cmFwSW5uZXI6IGZ1bmN0aW9uIChuKSB7IHJldHVybiBtKG4pID8gdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7IGsodGhpcykud3JhcElubmVyKG4uY2FsbCh0aGlzLCBlKSk7IH0pIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBrKHRoaXMpLCB0ID0gZS5jb250ZW50cygpOyB0Lmxlbmd0aCA/IHQud3JhcEFsbChuKSA6IGUuYXBwZW5kKG4pOyB9KTsgfSwgd3JhcDogZnVuY3Rpb24gKHQpIHsgdmFyIG4gPSBtKHQpOyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7IGsodGhpcykud3JhcEFsbChuID8gdC5jYWxsKHRoaXMsIGUpIDogdCk7IH0pOyB9LCB1bndyYXA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLnBhcmVudChlKS5ub3QoXCJib2R5XCIpLmVhY2goZnVuY3Rpb24gKCkgeyBrKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyk7IH0pLCB0aGlzOyB9IH0pLCBrLmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gIWsuZXhwci5wc2V1ZG9zLnZpc2libGUoZSk7IH0sIGsuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gISEoZS5vZmZzZXRXaWR0aCB8fCBlLm9mZnNldEhlaWdodCB8fCBlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTsgfSwgay5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24gKCkgeyB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEMuWE1MSHR0cFJlcXVlc3Q7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH0gfTtcbiAgICB2YXIgVXQgPSB7IDA6IDIwMCwgMTIyMzogMjA0IH0sIFh0ID0gay5hamF4U2V0dGluZ3MueGhyKCk7XG4gICAgeS5jb3JzID0gISFYdCAmJiBcIndpdGhDcmVkZW50aWFsc1wiIGluIFh0LCB5LmFqYXggPSBYdCA9ICEhWHQsIGsuYWpheFRyYW5zcG9ydChmdW5jdGlvbiAoaSkgeyB2YXIgbywgYTsgaWYgKHkuY29ycyB8fCBYdCAmJiAhaS5jcm9zc0RvbWFpbilcbiAgICAgICAgcmV0dXJuIHsgc2VuZDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSBpLnhocigpOyBpZiAoci5vcGVuKGkudHlwZSwgaS51cmwsIGkuYXN5bmMsIGkudXNlcm5hbWUsIGkucGFzc3dvcmQpLCBpLnhockZpZWxkcylcbiAgICAgICAgICAgICAgICBmb3IgKG4gaW4gaS54aHJGaWVsZHMpXG4gICAgICAgICAgICAgICAgICAgIHJbbl0gPSBpLnhockZpZWxkc1tuXTsgZm9yIChuIGluIGkubWltZVR5cGUgJiYgci5vdmVycmlkZU1pbWVUeXBlICYmIHIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSwgaS5jcm9zc0RvbWFpbiB8fCBlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSB8fCAoZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCIpLCBlKVxuICAgICAgICAgICAgICAgIHIuc2V0UmVxdWVzdEhlYWRlcihuLCBlW25dKTsgbyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IG8gJiYgKG8gPSBhID0gci5vbmxvYWQgPSByLm9uZXJyb3IgPSByLm9uYWJvcnQgPSByLm9udGltZW91dCA9IHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgXCJhYm9ydFwiID09PSBlID8gci5hYm9ydCgpIDogXCJlcnJvclwiID09PSBlID8gXCJudW1iZXJcIiAhPSB0eXBlb2Ygci5zdGF0dXMgPyB0KDAsIFwiZXJyb3JcIikgOiB0KHIuc3RhdHVzLCByLnN0YXR1c1RleHQpIDogdChVdFtyLnN0YXR1c10gfHwgci5zdGF0dXMsIHIuc3RhdHVzVGV4dCwgXCJ0ZXh0XCIgIT09IChyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIikgfHwgXCJzdHJpbmdcIiAhPSB0eXBlb2Ygci5yZXNwb25zZVRleHQgPyB7IGJpbmFyeTogci5yZXNwb25zZSB9IDogeyB0ZXh0OiByLnJlc3BvbnNlVGV4dCB9LCByLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSk7IH07IH0sIHIub25sb2FkID0gbygpLCBhID0gci5vbmVycm9yID0gci5vbnRpbWVvdXQgPSBvKFwiZXJyb3JcIiksIHZvaWQgMCAhPT0gci5vbmFib3J0ID8gci5vbmFib3J0ID0gYSA6IHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgeyA0ID09PSByLnJlYWR5U3RhdGUgJiYgQy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgbyAmJiBhKCk7IH0pOyB9LCBvID0gbyhcImFib3J0XCIpOyB0cnkge1xuICAgICAgICAgICAgICAgIHIuc2VuZChpLmhhc0NvbnRlbnQgJiYgaS5kYXRhIHx8IG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH0gfSwgYWJvcnQ6IGZ1bmN0aW9uICgpIHsgbyAmJiBvKCk7IH0gfTsgfSksIGsuYWpheFByZWZpbHRlcihmdW5jdGlvbiAoZSkgeyBlLmNyb3NzRG9tYWluICYmIChlLmNvbnRlbnRzLnNjcmlwdCA9ICExKTsgfSksIGsuYWpheFNldHVwKHsgYWNjZXB0czogeyBzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIiB9LCBjb250ZW50czogeyBzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiLyB9LCBjb252ZXJ0ZXJzOiB7IFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGsuZ2xvYmFsRXZhbChlKSwgZTsgfSB9IH0pLCBrLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKGUpIHsgdm9pZCAwID09PSBlLmNhY2hlICYmIChlLmNhY2hlID0gITEpLCBlLmNyb3NzRG9tYWluICYmIChlLnR5cGUgPSBcIkdFVFwiKTsgfSksIGsuYWpheFRyYW5zcG9ydChcInNjcmlwdFwiLCBmdW5jdGlvbiAobikgeyB2YXIgciwgaTsgaWYgKG4uY3Jvc3NEb21haW4gfHwgbi5zY3JpcHRBdHRycylcbiAgICAgICAgcmV0dXJuIHsgc2VuZDogZnVuY3Rpb24gKGUsIHQpIHsgciA9IGsoXCI8c2NyaXB0PlwiKS5hdHRyKG4uc2NyaXB0QXR0cnMgfHwge30pLnByb3AoeyBjaGFyc2V0OiBuLnNjcmlwdENoYXJzZXQsIHNyYzogbi51cmwgfSkub24oXCJsb2FkIGVycm9yXCIsIGkgPSBmdW5jdGlvbiAoZSkgeyByLnJlbW92ZSgpLCBpID0gbnVsbCwgZSAmJiB0KFwiZXJyb3JcIiA9PT0gZS50eXBlID8gNDA0IDogMjAwLCBlLnR5cGUpOyB9KSwgRS5oZWFkLmFwcGVuZENoaWxkKHJbMF0pOyB9LCBhYm9ydDogZnVuY3Rpb24gKCkgeyBpICYmIGkoKTsgfSB9OyB9KTtcbiAgICB2YXIgVnQsIEd0ID0gW10sIFl0ID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcbiAgICBrLmFqYXhTZXR1cCh7IGpzb25wOiBcImNhbGxiYWNrXCIsIGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBHdC5wb3AoKSB8fCBrLmV4cGFuZG8gKyBcIl9cIiArIGt0Kys7IHJldHVybiB0aGlzW2VdID0gITAsIGU7IH0gfSksIGsuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIiwgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEgPSAhMSAhPT0gZS5qc29ucCAmJiAoWXQudGVzdChlLnVybCkgPyBcInVybFwiIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5kYXRhICYmIDAgPT09IChlLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgWXQudGVzdChlLmRhdGEpICYmIFwiZGF0YVwiKTsgaWYgKGEgfHwgXCJqc29ucFwiID09PSBlLmRhdGFUeXBlc1swXSlcbiAgICAgICAgcmV0dXJuIHIgPSBlLmpzb25wQ2FsbGJhY2sgPSBtKGUuanNvbnBDYWxsYmFjaykgPyBlLmpzb25wQ2FsbGJhY2soKSA6IGUuanNvbnBDYWxsYmFjaywgYSA/IGVbYV0gPSBlW2FdLnJlcGxhY2UoWXQsIFwiJDFcIiArIHIpIDogITEgIT09IGUuanNvbnAgJiYgKGUudXJsICs9IChTdC50ZXN0KGUudXJsKSA/IFwiJlwiIDogXCI/XCIpICsgZS5qc29ucCArIFwiPVwiICsgciksIGUuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbyB8fCBrLmVycm9yKHIgKyBcIiB3YXMgbm90IGNhbGxlZFwiKSwgb1swXTsgfSwgZS5kYXRhVHlwZXNbMF0gPSBcImpzb25cIiwgaSA9IENbcl0sIENbcl0gPSBmdW5jdGlvbiAoKSB7IG8gPSBhcmd1bWVudHM7IH0sIG4uYWx3YXlzKGZ1bmN0aW9uICgpIHsgdm9pZCAwID09PSBpID8gayhDKS5yZW1vdmVQcm9wKHIpIDogQ1tyXSA9IGksIGVbcl0gJiYgKGUuanNvbnBDYWxsYmFjayA9IHQuanNvbnBDYWxsYmFjaywgR3QucHVzaChyKSksIG8gJiYgbShpKSAmJiBpKG9bMF0pLCBvID0gaSA9IHZvaWQgMDsgfSksIFwic2NyaXB0XCI7IH0pLCB5LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICgoVnQgPSBFLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5KS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCIsIDIgPT09IFZ0LmNoaWxkTm9kZXMubGVuZ3RoKSwgay5wYXJzZUhUTUwgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSA/IFtdIDogKFwiYm9vbGVhblwiID09IHR5cGVvZiB0ICYmIChuID0gdCwgdCA9ICExKSwgdCB8fCAoeS5jcmVhdGVIVE1MRG9jdW1lbnQgPyAoKHIgPSAodCA9IEUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpKS5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSkuaHJlZiA9IEUubG9jYXRpb24uaHJlZiwgdC5oZWFkLmFwcGVuZENoaWxkKHIpKSA6IHQgPSBFKSwgbyA9ICFuICYmIFtdLCAoaSA9IEQuZXhlYyhlKSkgPyBbdC5jcmVhdGVFbGVtZW50KGlbMV0pXSA6IChpID0gd2UoW2VdLCB0LCBvKSwgbyAmJiBvLmxlbmd0aCAmJiBrKG8pLnJlbW92ZSgpLCBrLm1lcmdlKFtdLCBpLmNoaWxkTm9kZXMpKSk7IHZhciByLCBpLCBvOyB9LCBrLmZuLmxvYWQgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbywgYSA9IHRoaXMsIHMgPSBlLmluZGV4T2YoXCIgXCIpOyByZXR1cm4gLTEgPCBzICYmIChyID0gbXQoZS5zbGljZShzKSksIGUgPSBlLnNsaWNlKDAsIHMpKSwgbSh0KSA/IChuID0gdCwgdCA9IHZvaWQgMCkgOiB0ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgKGkgPSBcIlBPU1RcIiksIDAgPCBhLmxlbmd0aCAmJiBrLmFqYXgoeyB1cmw6IGUsIHR5cGU6IGkgfHwgXCJHRVRcIiwgZGF0YVR5cGU6IFwiaHRtbFwiLCBkYXRhOiB0IH0pLmRvbmUoZnVuY3Rpb24gKGUpIHsgbyA9IGFyZ3VtZW50cywgYS5odG1sKHIgPyBrKFwiPGRpdj5cIikuYXBwZW5kKGsucGFyc2VIVE1MKGUpKS5maW5kKHIpIDogZSk7IH0pLmFsd2F5cyhuICYmIGZ1bmN0aW9uIChlLCB0KSB7IGEuZWFjaChmdW5jdGlvbiAoKSB7IG4uYXBwbHkodGhpcywgbyB8fCBbZS5yZXNwb25zZVRleHQsIHQsIGVdKTsgfSk7IH0pLCB0aGlzOyB9LCBrLmVhY2goW1wiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCJdLCBmdW5jdGlvbiAoZSwgdCkgeyBrLmZuW3RdID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMub24odCwgZSk7IH07IH0pLCBrLmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiBrLmdyZXAoay50aW1lcnMsIGZ1bmN0aW9uIChlKSB7IHJldHVybiB0ID09PSBlLmVsZW07IH0pLmxlbmd0aDsgfSwgay5vZmZzZXQgPSB7IHNldE9mZnNldDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEsIHMsIHUsIGwgPSBrLmNzcyhlLCBcInBvc2l0aW9uXCIpLCBjID0gayhlKSwgZiA9IHt9OyBcInN0YXRpY1wiID09PSBsICYmIChlLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiKSwgcyA9IGMub2Zmc2V0KCksIG8gPSBrLmNzcyhlLCBcInRvcFwiKSwgdSA9IGsuY3NzKGUsIFwibGVmdFwiKSwgKFwiYWJzb2x1dGVcIiA9PT0gbCB8fCBcImZpeGVkXCIgPT09IGwpICYmIC0xIDwgKG8gKyB1KS5pbmRleE9mKFwiYXV0b1wiKSA/IChhID0gKHIgPSBjLnBvc2l0aW9uKCkpLnRvcCwgaSA9IHIubGVmdCkgOiAoYSA9IHBhcnNlRmxvYXQobykgfHwgMCwgaSA9IHBhcnNlRmxvYXQodSkgfHwgMCksIG0odCkgJiYgKHQgPSB0LmNhbGwoZSwgbiwgay5leHRlbmQoe30sIHMpKSksIG51bGwgIT0gdC50b3AgJiYgKGYudG9wID0gdC50b3AgLSBzLnRvcCArIGEpLCBudWxsICE9IHQubGVmdCAmJiAoZi5sZWZ0ID0gdC5sZWZ0IC0gcy5sZWZ0ICsgaSksIFwidXNpbmdcIiBpbiB0ID8gdC51c2luZy5jYWxsKGUsIGYpIDogYy5jc3MoZik7IH0gfSwgay5mbi5leHRlbmQoeyBvZmZzZXQ6IGZ1bmN0aW9uICh0KSB7IGlmIChhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHsgay5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsIHQsIGUpOyB9KTsgdmFyIGUsIG4sIHIgPSB0aGlzWzBdOyByZXR1cm4gciA/IHIuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPyAoZSA9IHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG4gPSByLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcsIHsgdG9wOiBlLnRvcCArIG4ucGFnZVlPZmZzZXQsIGxlZnQ6IGUubGVmdCArIG4ucGFnZVhPZmZzZXQgfSkgOiB7IHRvcDogMCwgbGVmdDogMCB9IDogdm9pZCAwOyB9LCBwb3NpdGlvbjogZnVuY3Rpb24gKCkgeyBpZiAodGhpc1swXSkge1xuICAgICAgICAgICAgdmFyIGUsIHQsIG4sIHIgPSB0aGlzWzBdLCBpID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgICAgICAgICAgIGlmIChcImZpeGVkXCIgPT09IGsuY3NzKHIsIFwicG9zaXRpb25cIikpXG4gICAgICAgICAgICAgICAgdCA9IHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ID0gdGhpcy5vZmZzZXQoKSwgbiA9IHIub3duZXJEb2N1bWVudCwgZSA9IHIub2Zmc2V0UGFyZW50IHx8IG4uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChlICYmIChlID09PSBuLmJvZHkgfHwgZSA9PT0gbi5kb2N1bWVudEVsZW1lbnQpICYmIFwic3RhdGljXCIgPT09IGsuY3NzKGUsIFwicG9zaXRpb25cIikpXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgZSAmJiBlICE9PSByICYmIDEgPT09IGUubm9kZVR5cGUgJiYgKChpID0gayhlKS5vZmZzZXQoKSkudG9wICs9IGsuY3NzKGUsIFwiYm9yZGVyVG9wV2lkdGhcIiwgITApLCBpLmxlZnQgKz0gay5jc3MoZSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgITApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHRvcDogdC50b3AgLSBpLnRvcCAtIGsuY3NzKHIsIFwibWFyZ2luVG9wXCIsICEwKSwgbGVmdDogdC5sZWZ0IC0gaS5sZWZ0IC0gay5jc3MociwgXCJtYXJnaW5MZWZ0XCIsICEwKSB9O1xuICAgICAgICB9IH0sIG9mZnNldFBhcmVudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub2Zmc2V0UGFyZW50OyB3aGlsZSAoZSAmJiBcInN0YXRpY1wiID09PSBrLmNzcyhlLCBcInBvc2l0aW9uXCIpKVxuICAgICAgICAgICAgZSA9IGUub2Zmc2V0UGFyZW50OyByZXR1cm4gZSB8fCBpZTsgfSk7IH0gfSksIGsuZWFjaCh7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24gKHQsIGkpIHsgdmFyIG8gPSBcInBhZ2VZT2Zmc2V0XCIgPT09IGk7IGsuZm5bdF0gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXyh0aGlzLCBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgcjsgaWYgKHgoZSkgPyByID0gZSA6IDkgPT09IGUubm9kZVR5cGUgJiYgKHIgPSBlLmRlZmF1bHRWaWV3KSwgdm9pZCAwID09PSBuKVxuICAgICAgICByZXR1cm4gciA/IHJbaV0gOiBlW3RdOyByID8gci5zY3JvbGxUbyhvID8gci5wYWdlWE9mZnNldCA6IG4sIG8gPyBuIDogci5wYWdlWU9mZnNldCkgOiBlW3RdID0gbjsgfSwgdCwgZSwgYXJndW1lbnRzLmxlbmd0aCk7IH07IH0pLCBrLmVhY2goW1widG9wXCIsIFwibGVmdFwiXSwgZnVuY3Rpb24gKGUsIG4pIHsgay5jc3NIb29rc1tuXSA9IHplKHkucGl4ZWxQb3NpdGlvbiwgZnVuY3Rpb24gKGUsIHQpIHsgaWYgKHQpXG4gICAgICAgIHJldHVybiB0ID0gX2UoZSwgbiksICRlLnRlc3QodCkgPyBrKGUpLnBvc2l0aW9uKClbbl0gKyBcInB4XCIgOiB0OyB9KTsgfSksIGsuZWFjaCh7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiAoYSwgcykgeyBrLmVhY2goeyBwYWRkaW5nOiBcImlubmVyXCIgKyBhLCBjb250ZW50OiBzLCBcIlwiOiBcIm91dGVyXCIgKyBhIH0sIGZ1bmN0aW9uIChyLCBvKSB7IGsuZm5bb10gPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKHIgfHwgXCJib29sZWFuXCIgIT0gdHlwZW9mIGUpLCBpID0gciB8fCAoITAgPT09IGUgfHwgITAgPT09IHQgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIik7IHJldHVybiBfKHRoaXMsIGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByOyByZXR1cm4geChlKSA/IDAgPT09IG8uaW5kZXhPZihcIm91dGVyXCIpID8gZVtcImlubmVyXCIgKyBhXSA6IGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIgKyBhXSA6IDkgPT09IGUubm9kZVR5cGUgPyAociA9IGUuZG9jdW1lbnRFbGVtZW50LCBNYXRoLm1heChlLmJvZHlbXCJzY3JvbGxcIiArIGFdLCByW1wic2Nyb2xsXCIgKyBhXSwgZS5ib2R5W1wib2Zmc2V0XCIgKyBhXSwgcltcIm9mZnNldFwiICsgYV0sIHJbXCJjbGllbnRcIiArIGFdKSkgOiB2b2lkIDAgPT09IG4gPyBrLmNzcyhlLCB0LCBpKSA6IGsuc3R5bGUoZSwgdCwgbiwgaSk7IH0sIHMsIG4gPyBlIDogdm9pZCAwLCBuKTsgfTsgfSk7IH0pLCBrLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoZSwgbikgeyBrLmZuW25dID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIDAgPCBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5vbihuLCBudWxsLCBlLCB0KSA6IHRoaXMudHJpZ2dlcihuKTsgfTsgfSksIGsuZm4uZXh0ZW5kKHsgaG92ZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0IHx8IGUpOyB9IH0pLCBrLmZuLmV4dGVuZCh7IGJpbmQ6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiB0aGlzLm9uKGUsIG51bGwsIHQsIG4pOyB9LCB1bmJpbmQ6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0aGlzLm9mZihlLCBudWxsLCB0KTsgfSwgZGVsZWdhdGU6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHJldHVybiB0aGlzLm9uKHQsIGUsIG4sIHIpOyB9LCB1bmRlbGVnYXRlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gMSA9PT0gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMub2ZmKGUsIFwiKipcIikgOiB0aGlzLm9mZih0LCBlIHx8IFwiKipcIiwgbik7IH0gfSksIGsucHJveHkgPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciwgaTsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSBlW3RdLCB0ID0gZSwgZSA9IG4pLCBtKGUpKVxuICAgICAgICByZXR1cm4gciA9IHMuY2FsbChhcmd1bWVudHMsIDIpLCAoaSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUuYXBwbHkodCB8fCB0aGlzLCByLmNvbmNhdChzLmNhbGwoYXJndW1lbnRzKSkpOyB9KS5ndWlkID0gZS5ndWlkID0gZS5ndWlkIHx8IGsuZ3VpZCsrLCBpOyB9LCBrLmhvbGRSZWFkeSA9IGZ1bmN0aW9uIChlKSB7IGUgPyBrLnJlYWR5V2FpdCsrIDogay5yZWFkeSghMCk7IH0sIGsuaXNBcnJheSA9IEFycmF5LmlzQXJyYXksIGsucGFyc2VKU09OID0gSlNPTi5wYXJzZSwgay5ub2RlTmFtZSA9IEEsIGsuaXNGdW5jdGlvbiA9IG0sIGsuaXNXaW5kb3cgPSB4LCBrLmNhbWVsQ2FzZSA9IFYsIGsudHlwZSA9IHcsIGsubm93ID0gRGF0ZS5ub3csIGsuaXNOdW1lcmljID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBrLnR5cGUoZSk7IHJldHVybiAoXCJudW1iZXJcIiA9PT0gdCB8fCBcInN0cmluZ1wiID09PSB0KSAmJiAhaXNOYU4oZSAtIHBhcnNlRmxvYXQoZSkpOyB9LCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kICYmIGRlZmluZShcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gazsgfSk7XG4gICAgdmFyIFF0ID0gQy5qUXVlcnksIEp0ID0gQy4kO1xuICAgIHJldHVybiBrLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gQy4kID09PSBrICYmIChDLiQgPSBKdCksIGUgJiYgQy5qUXVlcnkgPT09IGsgJiYgKEMualF1ZXJ5ID0gUXQpLCBrOyB9LCBlIHx8IChDLmpRdWVyeSA9IEMuJCA9IGspLCBrO1xufSk7XG4iLCJ2YXIgRjtcbihmdW5jdGlvbiAoRikge1xuICAgIHZhciBGdW5jdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBGdW5jdGlvbnMoKSB7XG4gICAgICAgIH1cbiAgICAgICAgRnVuY3Rpb25zLnJhbmRvbUludCA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICAgICAgdmFyIHJhbmRvbVJlc3VsdCA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiB0bykgKyBmcm9tKTtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21SZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGdW5jdGlvbnM7XG4gICAgfSgpKTtcbiAgICBGLkZ1bmN0aW9ucyA9IEZ1bmN0aW9ucztcbn0pKEYgfHwgKEYgPSB7fSkpO1xuIiwialF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoJCkge1xuICAgIGFsZXJ0KFwiSGVsbG8gXCIgKyBGLkZ1bmN0aW9ucy5yYW5kb21JbnQoMSwgMTAwKSk7XG59KTtcbiJdfQ==
